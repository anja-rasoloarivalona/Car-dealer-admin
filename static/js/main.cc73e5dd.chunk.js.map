{"version":3,"sources":["assets/sprite.svg","assets/eventually.mp3","components/loader/Loader.js","components/dropDownList/DropDownList.js","pages/inventory/Controller/Controller.js","store/actions/products.js","store/actions/actionsTypes.js","store/actions/suppliers.js","store/actions/error.js","utilities/svg/svg.js","components/product/Product.js","components/ProductsList/ProductsList.js","components/paginator/Paginator.js","utilities/amountFormater.js","pages/inventory/Inventory.js","components/button/Button.js","pages/publicity/PublicitySelector/PublicitySelector.js","store/actions/publicity.js","pages/publicity/Publicity.js","utilities/daysInMonth.js","utilities/monthTable.js","components/title/Title.js","pages/stats/charts/UserConnection.js","pages/stats/charts/ConnectedUserCounter.js","pages/stats/statsSection/FavoriteProducts.js","pages/stats/statsSection/ProductsView.js","pages/stats/Stats.js","pages/addProduct/forms/formGeneral.js","components/formInput/FormInput.js","pages/addProduct/forms/formFeature/FormFeature.js","pages/addProduct/forms/filePicker/FilePicker.js","firebase/index.js","pages/addProduct/AddProduct.js","pages/car/overview/Overview.js","pages/car/technical/Technical.js","pages/car/features/Features.js","pages/car/Car.js","utilities/validators.js","pages/auth/login/Login.js","store/actions/auth.js","components/errorHandler/ErrorHandler.js","pages/auth/signup/Signup.js","pages/auth/Auth.js","components/spinner/Spinner.js","pages/users/Users.js","pages/messages/messagesNavbar/MessagesNavbar.js","utilities/timeStampGenerator.js","pages/messages/messagesContainer/MessagesContainerList.js","components/autosizeTextArea/AutosizeTextArea.js","pages/messages/messagesContainer/MessagesContainer.js","store/actions/nav.js","pages/messages/messagesUserInfo/MessagesUserInfos.js","pages/messages/Messages.js","pages/userAccount/userAccountCharts/ConnectionCounter.js","pages/userAccount/userAccount.js","pages/suppliers/SuppliersList.js","pages/suppliers/SuppliersForm.js","pages/suppliers/Suppliers.js","pages/adminManager/AdminManager.js","components/navigation/navtop/Navtop.js","components/navigation/navbar/NavbarList.js","components/navigation/navbar/Navbar.js","components/chat/Chat.js","App.js","serviceWorker.js","store/utility.js","store/reducers/products.js","store/reducers/nav.js","store/reducers/auth.js","store/reducers/suppliers.js","store/reducers/error.js","store/reducers/publicity.js","store/reducers/parameters.js","index.js"],"names":["module","exports","connect","state","showFullNavbar","nav","props","className","fullView","DropDownList","showList","toggleList","setState","prevState","handleClick","e","target","contains","document","addEventListener","this","removeEventListener","list","ref","el","onClick","value","map","item","text","key","selectItemHandler","Component","Controller","prevProps","query","bodyTypeList","data","brandAndModelsData","brandData","Object","keys","bodyTypeBrandData","bodyType","forEach","brand","includes","push","modelData","suppliers","suppliersName","supplier","name","selectBodyTypeHandler","selectBrandHandler","model","selectModelHandler","sort","sortHandler","supplierName","selectSupplierHandler","price","min","max","step","maxValue","scope","minValue","onChange","changePriceHandler","onChangeComplete","changeComplete","year","changeYearHandler","products","setRequestedProduct","type","product","setRequestedProductId","id","setSuppliers","setError","svg","viewBox","icon","size","customClass","xmlns","xmlnsXlink","xlinkHref","sprite","children","goToProd","src","mainImg","alt","title","toLocaleString","nbKilometers","gazol","transmissionType","withRouter","productsList","_id","general","mainImgUrl","history","fetchProductDetailsHandler","Paginator","pageNumbers","i","lastPage","pageNumbersButton","onRequestPageNumber","bind","currentPage","length","itemsPerPage","onRequestPreviousPage","onRequestNextPage","amountFormater","amount","prevCurrency","nextCurrency","quotes","result","USDCAD","USDEUR","Inventory","loading","supplierId","page","init","fetchProductsHandler","params","url","URL","minPrice","maxPrice","minPriceQuery","maxPriceQuery","fullValue","currency","Math","floor","ceil","minYear","maxYear","split","search","URLSearchParams","toString","fetch","headers","then","res","status","Error","json","resData","pathname","catch","err","console","log","stateQuery","find","paginationHandler","direction","currentInventoryPage","setInventoryCurrentPage","parsedQuery","queryString","parse","location","parseInt","totalProductsCounter","inventory","totalProducts","parameters","lang","dispatch","button","link","color","join","to","disabled","PublicitySelector","body","section","selectorTitle","method","JSON","stringify","selectHandler","selectorSelectedProductsIds","selectorSelectedProductsDetails","productsIds","filter","prodId","productsDetails","setPublicitySelectorSelectedProducts","requestProductDetails","setProductRequestedId","publicitySelectorType","newPubProducts","newHomePageProducts","addNewProducts","toggleSelector","publicity","actions","Publicity","pubProducts","homePageProducts","home","setPublicityData","editingModeHandler","mode","newEditingMode","currentEditingMode","editingMode","cancelHandler","setPublicityEditingMode","selectedPubProducts","selectedHomePageProducts","setPublicitySelectedPubProducts","setPublicitySelectedHomePageProducts","deleteHandler","newPublicityProducts","currentPubProducts","deletePublicitySelectedPubProducts","currentHomePageProducts","deletePublicitySelectedHomePageProducts","cancelPublicityEditingMode","saveHandler","publicitySelectedProducts","homePageSelectedProducts","formData","FormData","append","newPublicityProductsIds","newHomePageProductsIds","fromEntries","togglePublicitySelector","addNewPubProducts","addPublicityPubProducts","addPublicityHomePageProducts","showSelector","INIT_pubProducts","INIT_homePageProducts","daysInMonth","month","Date","getDate","MONTH_TABLE","Title","UserConnection","labels","datasets","tempData","mm_yyyy_labels","selectedMonth","selectFilterHandler","selectUsersConnectionFilterGeneral","selectUsersConnectionFilterByMonth","monthAndYear","day","daysInMonthCounter","fullDatelabels","date","label","finalData","backgroundColor","stats","userStat","connection","fullDateArray","start","x","a","b","sortedShortDateArray","getMonth","getFullYear","mm_yyyy","statsUserConnectionFilter","showUserConnectionFilterByMonthList","statsUserConnection","slice","options","responsive","scales","yAxes","ticks","beginAtZero","stepSize","userId","tempDataKey","FavoriteProducts","showBrandsData","maxFollowedProducts","showBrandsDataHandler","sortedBrands","followers","brandName","models","mostFollowedProducts","style","width","favoritesCounter","ProductsView","productsStats","maxProductViews","mostViewedProducts","views","viewCounter","Stats","activeSection","userConnectionStats","fetchProductsStats","fetchUserConnectionStats","activSectionToggler","INITIAL_FORM","valueType","control","placeholder","yearOfRelease","nbOwners","serialNumber","generalState","homePage","reference","supplierPrice","tech","nbGearRatios","nbCylinders","motorSize","maxSpeed","design","intColor","extColor","formInput","required","autoComplete","formType","option","htmlFor","border","formFeature","featuresList","addFeatureChangeHandler","addFeature","deleteFeature","registerPlugin","FilePondPluginImagePreview","filePicker","filePond","productBeingEditedCurrentImages","selectedImages","cancelDeleteImagesAlowed","allowMultiple","onupdatefiles","filesHandler","selectDeleteHandler","checked","onDeleteCurrentImages","onCancelDeleteCurrentImages","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","AddProduct","images","urlImages","albumId","featureBeingAdded","showImage","productBeingEdited","productBeingEditedID","productBeingEditedCurrentUrlImages","productBeingEditedCurrentUrlImagesWithChekedOption","cancelImageDeletingAllowed","initialForm","requestDataSet","preparesDataHandler","dataType","reqData","info","imageUrls","features","inputChangeHandler","input","senData","productBeingEditedUrlImages","setProductRequested","addTotalProducts","toggleEditingMode","productBeingEditedId","uploadHandler","async","preventDefault","uuid","Promise","all","image","resolve","reject","put","on","snapshot","getDownloadURL","imgStored","urls","deleteImagesInFirebase","imgUrl","first","indexOf","end","imageName","substr","delete","imagesDeleted","files","file","showImageFormHandler","window","scrollTo","hideImageFormHandler","newList","urlSelected","newData","deleteImageOnThePage","newCurrentImages","cancelDeleteCurrentImageHandler","deletedImages","oldImagesWithCheck","over","productRequested","productRequestedId","prod","overview","technical","feature","Car","imageSlideHandler","index","initiatlIndex","inter","setInterval","clearInterval","changeGalleryImgIndex","detailRequestHandler","detail","requestedSection","partRequested","escFunction","match","event","keyCode","hideScrollBar","showScrollBarHandler","goBack","onRequestChange","img","objectFit","hideScrollBarHandler","followersCounter","validator","error","fields","field","trim","test","email","firstName","lastName","password","confirm_password","Login","loginForm","loginHandler","loginFormData","setLoadingToTrue","errors","setLoadingToFalse","loginSucceeded","localStorage","setItem","token","adminId","adminName","expiryDate","getTime","toISOString","loginFailed","onSubmit","noValidate","ErrorHandler","closeErrorHandler","setTimeout","errorHandler","dispacth","Signup","signupForm","errorLabel","submitHandler","setErrors","requestLoginForm","message","resetErrors","onCloseError","Auth","Spinner","Users","users","searchedUser","searchedUserResults","searchedUserNoResults","searchingUser","displaySelector","fetchUsersdata","searchUserHandler","clearTimeout","timer","fetchSearchedUsers","queryHandler","toggleDisplaySelector","socket","openSocket","userLoggedInId","userLoggedIn","user","active","newUserStates","userLoggedId","userLoggedInIndex","findIndex","newUsersData","inputIcon","phoneNumber","MessagesNavbar","messages","requestedMessageUserId","checkIfAdminIsOnTheConvoToBeUpdated","convoToBeUpdated","check","newState","read","onChangeConvoHandler","convoToBeUpdatedIndex","newMessages","onchangeConvoHandler","_ismounted","messageData","senderType","timeStampGenerator","realDay","hour","getHours","minutes","getMinutes","seconds","getSeconds","MessagesContainerList","chatMessageGap","currentSenderType","showInfo","displayedDate","timeStamp","shortDate","array","currentDate","readBy","readByTimeStamp","from","TextArea","textarea","focus","autosize","maxHeight","minHeight","resize","padding","boxSizing","fontSize","c","rows","MessagesContainer","messageInput","showUserInfos","toggleShowInfo","toggleShowUserInfos","messageChangeHandler","sendMessageHandler","addMessages","updateNavbar","scrollToBottom","playNotificationSound","lastposition","addANotification","notification","messagesEnd","scrollIntoView","behavior","messagesList","displayDetails","auth","MessagesUserInfos","currentNotes","editingNote","newNote","userPhone","editUserPhone","userStatus","editPhoneNumberStateHandler","editPhoneNumber","saveUserPhoneNumberHandler","editNewNoteHandler","toggleAddingNewNoteHandler","updateCurrentNote","noteId","note","deleteNoteHandler","newNotes","submitNewNoteHandler","creator","newNoteList","toggleShowNoteHandler","show","notes","undefined","Messages","requestedUser","changeConvoHandler","fetchUserMessages","substractANotification","newMessagesState","messagesContainer","ConnectionCounter","globalDataSet","chart","userAccount","userFavoriteProducts","userViewedProducts","fetchUserAccountDetails","favorites","viewedProducts","elapsedTimeCalculator","hourDisplayedElapsedTime","minuteDisplayedElapsedTime","secondsDisplayedElapsedTime","connectionEnd","connectionStart","elapsedTime","userFavoriteProductsList","made","SuppliersList","supplierCurrentViewHandler","editSupplierHandler","deleteSupplierHandler","address","currentView","supplierNavigationHandler","responsibles","responsible","SuppliersForm","addSupplierForm","responsiblesForm","addSupplierHandler","addSupplierFormChangeHandler","addResponsibleHandler","responsibleInputHandler","Suppliers","currentSupplierBeingEditedId","fetchSuppliers","newSuppliersList","newSupplier","editedSupplierIndex","resetFormHandler","currentResponsibles","numberOfCurrentResponsibles","newResponsible","requestedView","view","suppliersList","suppliersForm","AdminManager","Navtop","showUsersList","hideUsersList","showUsersListToggler","fetchUsersHandler","connectedUsers","logoutHandler","NAV_LINKS","path","Navbar","initNotifications","notifData","toggleShowFullNavbar","App","initializeDatasHandler","initAppData","player","play","setLoginStateToFalse","removeItem","getItem","connectedAdminId","connnectedAdminName","setLoginStateToTrue","app","exact","component","render","Add","UserAccount","isAuth","Boolean","hostname","updatedObject","oldObject","updatedProperties","initialState","action","reducer","notificationUpdated","loginSucced","EURUSD","EURCAD","CADUSD","CADEUR","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","productsReducer","navReducer","authReducer","suppliersReducer","errorReducer","publicityReducer","parametersReducer","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc73e5dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sprite.737c6dbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/eventually.b5e7acad.mp3\";","import React from 'react';\r\nimport './Loader.css';\r\nimport { connect } from 'react-redux'\r\n\r\nconst loader = props => {\r\n    return (\r\n        <div className={`loader-container ${props.showFullNavbar === true ? '': 'expand'}\r\n                        ${props.fullView ? 'full': ''}`}>\r\n            <div className=\"loader\">\r\n                <div className=\"loader__bar\"></div>\r\n                <div className=\"loader__bar\"></div>\r\n                <div className=\"loader__bar\"></div>\r\n                <div className=\"loader__bar\"></div>\r\n                <div className=\"loader__bar\"></div>\r\n                <div className=\"loader__ball\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        showFullNavbar: state.nav.showFullNavbar\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(loader);\r\n","import React, { Component } from 'react'\r\nimport './DropDownList.css';\r\n\r\n\r\nclass DropDownList extends Component {\r\n\r\n    state = {\r\n        showList: false\r\n    }\r\n\r\n    componentWillMount(){\r\n        document.addEventListener('mousedown', this.handleClick, false)\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n         document.removeEventListener('mousedown', this.handleClick, false)\r\n    }\r\n\r\n    toggleList = () => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            showList: !prevState.showList\r\n        }))\r\n    }\r\n\r\n    handleClick = e => {         \r\n        if(this.target && this.target.contains(e.target)){\r\n            return\r\n        } else {\r\n            if(this.state.showList){\r\n                this.toggleList()\r\n            }\r\n            \r\n        }     \r\n    }\r\n\r\n    render() {\r\n\r\n        let list = this.props.list;\r\n        const {showList} = this.state\r\n\r\n        return (\r\n            <div className={`drop-down-list ${showList ? 'show' : ''}`}\r\n                 ref={el => this.target = el}\r\n                 onClick={this.toggleList}>\r\n                    <div className=\"drop-down-list__value\">\r\n                        {this.props.value}\r\n                    </div>\r\n                    <ul className={`drop-down-list__list`}>\r\n                        {list.map(item => \r\n                            <li className={`drop-down-list__list__item\r\n                                        ${item.value && this.props.value == item.value ? 'active':''}\r\n                                        ${item.text && this.props.value == item.text ? 'active':''}\r\n                                        ${this.props.value == item ? 'active' : ''}`}\r\n                                key={item.text ? item.text : item}\r\n                                onClick={() => this.props.selectItemHandler(item.value ? item.value : item)}>\r\n                                {item.text ? item.text : item}\r\n                            </li>\r\n                        )}\r\n                    </ul>     \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default DropDownList;\r\n","import React, { Component } from 'react';\r\nimport './Controller.css';\r\nimport { connect } from 'react-redux';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\nimport DropDownList from '../../../components/dropDownList/DropDownList'\r\n\r\n\r\n class Controller extends Component {\r\n\r\n    componentDidMount(){\r\n        \r\n    }\r\n    componentDidUpdate(prevProps){\r\n        // if(prevProps.currency !== this.props.currency){\r\n        //    console.log('formated', this.props.query.price.formatedValue)\r\n        // }\r\n    }\r\n    render() {\r\n        const {query} = this.props;  \r\n        let bodyTypeList = this.props.bodyTypeList;\r\n        let data = this.props.brandAndModelsData;\r\n\r\n\r\n        let brandData = Object.keys(data)\r\n        let bodyTypeBrandData = [];\r\n        if(query.bodyType !== 'all'){\r\n            Object.keys(data).forEach(brand => {\r\n                if(Object.keys(data[brand]).includes(query.bodyType)){\r\n                    bodyTypeBrandData.push(brand)\r\n                }\r\n            })\r\n            brandData = bodyTypeBrandData\r\n        }\r\n\r\n        let modelData = [];\r\n        if(query.brand !== 'all'){\r\n            if(query.bodyType === 'all'){\r\n                Object.keys(data[query.brand]).forEach(bodyType => {\r\n                    modelData = [...modelData, ...data[query.brand][bodyType]]\r\n                })\r\n            } else { modelData = [...modelData, ...data[query.brand][query.bodyType]]\r\n            }\r\n        }\r\n\r\n        let suppliers = this.props.suppliers;\r\n\r\n        let suppliersName = [];\r\n        suppliers.forEach(supplier => {\r\n            suppliersName.push(supplier.name)\r\n        }) \r\n\r\n        return (\r\n       \r\n            <div className=\"inventory__controller\">\r\n\r\n                        <DropDownList \r\n                            value={query.bodyType === 'all' ? 'all body types' : query.bodyType}\r\n                            list={[ {text: 'all body types', value: 'all'}, ...bodyTypeList]}\r\n                            selectItemHandler={this.props.selectBodyTypeHandler}\r\n                        />\r\n\r\n                        <DropDownList \r\n                            value={query.brand === 'all' ? 'all brands' : query.brand}\r\n                            list={[ {text: 'all brands', value: 'all'}, ...brandData]}\r\n                            selectItemHandler={this.props.selectBrandHandler}\r\n                        />\r\n      \r\n                        <DropDownList \r\n                            value={query.model === 'all' ? 'all models' : query.model}\r\n                            list={ query.brand !== 'all' ? [{text: 'all models', value: 'all'}, ...modelData] : ['all models']}\r\n                            selectItemHandler={this.props.selectModelHandler}\r\n                        />\r\n              \r\n                        {query.sort && (\r\n                            <DropDownList \r\n                            value={query.sort}\r\n                            list={['increasing price', 'decreasing price', 'latest', 'most popular']}\r\n                            selectItemHandler={this.props.sortHandler}\r\n                            />\r\n                        )}\r\n\r\n                        <DropDownList \r\n                            value={query.supplierName === 'all' ? 'all suppliers': query.supplierName}\r\n                            list={[ {value: 'all', text: 'all suppliers'}, ...suppliersName]}\r\n                            selectItemHandler={this.props.selectSupplierHandler}\r\n                        />\r\n                      \r\n                 \r\n\r\n                    <div className=\"inventory__controller__group\">\r\n                        <div className=\"inventory__controller__group__infos\">\r\n                            <div className=\"inventory__controller__group__infos__key\">\r\n                                Price\r\n                            </div>\r\n                            <div className=\"inventory__controller__group__infos__value\">\r\n                                {query.price.value.min} - {query.price.value.max}\r\n                            </div>\r\n                        </div>\r\n                        <InputRange \r\n                            step={1000}\r\n                            maxValue= {query.price.scope.max}\r\n                            minValue={query.price.scope.min}\r\n                            value={query.price.value}\r\n                            onChange={value => this.props.changePriceHandler(value)}\r\n                            onChangeComplete={this.props.changeComplete}/>\r\n                    </div>\r\n\r\n                    <div className=\"inventory__controller__group\">\r\n                        <div className=\"inventory__controller__group__infos\">\r\n                            <div className=\"inventory__controller__group__infos__key\">\r\n                                Year\r\n                            </div>\r\n                            <div className=\"inventory__controller__group__infos__value\">\r\n                                {query.year.value.min} - {query.year.value.max}\r\n                            </div>\r\n                        </div>\r\n                        <InputRange \r\n                            maxValue={query.year.scope.max }\r\n                            minValue={query.year.scope.min } \r\n                            value={query.year.value}\r\n                            onChange={value => this.props.changeYearHandler(value)}\r\n                            onChangeComplete={this.props.changeComplete}/>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        brandAndModelsData: state.products.brandAndModelsData,\r\n        price: state.products.price,\r\n        bodyTypeList: state.products.bodyTypeList,\r\n        suppliers: state.suppliers.suppliers\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Controller)\r\n","import * as actionTypes from './actionsTypes';\r\n\r\n\r\nexport const initAppData = data => {\r\n    return  {\r\n        type: actionTypes.INIT_APP_DATA,\r\n        data: data\r\n    }\r\n}\r\nexport const setRequestedProduct = data => {\r\n    return {\r\n        type: actionTypes.SET_REQUESTED_PRODUCT,\r\n        product: data\r\n    }\r\n}\r\n\r\nexport const setRequestedProductId = data => {\r\n    return {\r\n        type: actionTypes.SET_REQUESTED_PRODUCT_ID,\r\n        id: data\r\n    }\r\n}\r\n\r\nexport const toggleEditingMode = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_EDITING_MODE\r\n    }\r\n}\r\n\r\nexport const setProducts = data => {\r\n    return {\r\n        type: actionTypes.SET_PRODUCTS,\r\n        products: data\r\n    }\r\n}\r\n\r\n\r\nexport const addTotalProducts = () => {\r\n    return {\r\n        type: actionTypes.ADD_TOTAL_PRODUCTS\r\n    }\r\n}\r\n\r\nexport const setInventoryCurrentPage = page => {\r\n    return {\r\n        type: actionTypes.SET_INVENTORY_CURRENT_PAGE,\r\n        page: page\r\n    }\r\n}","export const INIT_APP_DATA = 'INIT_APP_DATA'\r\n\r\nexport const SET_PRODUCTS = 'SET_PRODUCTS'\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_CURRENCY = 'SET_CURRENCY'\r\n\r\nexport const SET_REQUESTED_PRODUCT = 'SET_REQUESTED_PRODUCT'\r\nexport const SET_REQUESTED_PRODUCT_ID = 'SET_REQUESTED_PRODUCT_ID'\r\n\r\nexport const TOGGLE_SHOW_FULL_NAVBAR = 'TOGGLE_SHOW_FULL_NAVBAR';\r\nexport const TOGGLE_EDITING_MODE = 'TOGGLE_EDITING_MODE'\r\n\r\nexport const LOGIN_SUCCEDED = 'LOGIN_SUCCEDED';\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\r\nexport const SET_LOGIN_STATE_TO_TRUE = 'SET_LOGIN_STATE_TO_TRUE';\r\nexport const SET_LOGIN_STATE_TO_FALSE = 'SET_LOGIN_STATE_TO_FALSE';\r\n\r\nexport const INIT_NOTIFICATIONS = 'INIT_NOTIFICATIONS';\r\nexport const ADD_A_NOTIFICATION = 'ADD_A_NOTIFICATION';\r\nexport const SUBSTRACT_A_NOTIFICATION = 'SUBSTRACT_A_NOTIFICATION';\r\n\r\nexport const SET_SUPPLIERS = 'SET_SUPPLIERS';\r\nexport const SET_INVENTORY_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nexport const ADD_TOTAL_PRODUCTS = 'ADD_TOTAL_PRODUCTS';\r\nexport const SET_ERROR = 'SET_ERROR'\r\n\r\nexport const SET_PUBLICITY_DATA = 'SET_PUBLICITY_DATA';\r\nexport const SET_PUBLICITY_EDITING_MODE = 'SET_PUBLICITY_EDITING_MODE';\r\nexport const CANCEL_PUBLICITY_EDITING_MODE = 'CANCEL_PUBLICITY_EDITING_MODE'\r\nexport const SET_PUBLICITY_SELECTED_PUB_PRODUCTS = 'SET_PUBLICITY_SELECTED_PUB_PRODUCTS';\r\nexport const DELETE_PUBLICITY_SELECTED_PUB_PRODUCTS = 'DELETE_PUBLICITY_SELECTED_PUB_PRODUCTS';\r\nexport const ADD_PUBLICITY_PUB_PRODUCTS = 'ADD_PUBLICITY_PUB_PRODUCTS';\r\nexport const SET_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS = 'SET_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS';\r\nexport const DELETE_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS = 'DELETE_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS'\r\nexport const ADD__PUBLICITY__HOMEPAGE__PRODUCTS = 'ADD__PUBLICITY__HOMEPAGE__PRODUCTS'\r\nexport const TOGGLE_PUBLICITY_SELECTOR = 'TOGGLE_PUBLICITY_SELECTOR'\r\nexport const SET_PUBLICITY_SELECTOR_SELECTED_PRODUCTS = 'SET_PUBLICITY_SELECTOR_SELECTED_PRODUCTS'\r\n\r\n\r\n","import * as actionTypes from './actionsTypes';\r\n\r\n\r\nexport const setSuppliers = suppliers => {\r\n    return {\r\n        type: actionTypes.SET_SUPPLIERS,\r\n        suppliers: suppliers\r\n    }\r\n}","import * as actionTypes from './actionsTypes'\r\n\r\n\r\nexport const setError = data => {\r\n    return {\r\n        type: actionTypes.SET_ERROR,\r\n        data: data\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './svg.css';\r\nimport sprite from '../../assets/sprite.svg'\r\n\r\nconst svg = props => {\r\n    return (\r\n        <svg \r\n            viewBox='0 0 16 16' \r\n            onClick={props.onClick}\r\n            className={`icon icon-${props.icon} ${props.size} ${props.customClass}`}\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n\r\n            <use xlinkHref={`${sprite}#icon-${props.icon}`} />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default svg;\r\n","import React from 'react';\r\nimport './Product.css';\r\nimport IconSvg from '../../utilities/svg/svg';\r\n\r\nconst product = props => {\r\n    return (\r\n        <article className=\"product\" >\r\n            {props.children}\r\n            <div className=\"product__imgContainer\" onClick={props.goToProd}>\r\n                <div className=\"product__imgContainer__hoverLayer\"></div>\r\n                <img src={props.mainImg} alt=\"main img\" className=\"product__img\"/>\r\n                    <IconSvg icon=\"search\"/>\r\n            </div>        \r\n            <div className=\"product__details\">\r\n                <div className=\"product__details__model\">\r\n                   <span>{props.title}</span>\r\n                    <span>{props.year}</span>\r\n                </div>\r\n                <div className=\"product__details__price\">\r\n                    {props.price.toLocaleString()} MRU\r\n                </div>           \r\n            </div>\r\n            <ul className=\"product__specList\">\r\n                <li className=\"product__specList__item\">\r\n                    <span>{props.nbKilometers}</span>\r\n                    <IconSvg icon=\"road\"/>\r\n                </li>\r\n                <li className=\"product__specList__item\">\r\n                    <span>{props.gazol}</span>\r\n                    <IconSvg icon=\"gas-station\"/>\r\n                </li>\r\n                <li className=\"product__specList__item\">\r\n                    <span>{props.transmissionType}</span>\r\n                    <IconSvg icon=\"gear\"/>\r\n                </li>\r\n            </ul>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default product;","import React from 'react';\r\nimport './ProductsList.css';\r\nimport ProductCard from '../product/Product';\r\n// import * as actions from '../../store/actions';\r\n// import { connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst ProductsList = props => {\r\n    const requestProductDetails = (data) => {\r\n        props.history.push(`/inventory/${data._id}?brand=${data.general.brand}&model=${data.general.model}&price=${data.general.price}`); \r\n        if(props.fetchProductDetailsHandler){\r\n                props.fetchProductDetailsHandler(data)\r\n        }     \r\n        \r\n    }\r\n  \r\n    let productsList = props.productsList;\r\n    return (\r\n        <ul className=\"products-list\">\r\n            {productsList.map(product => (\r\n                <li key={product._id} className=\"products-list__item\">\r\n                    <ProductCard \r\n                        id={product._id}\r\n                        mainImg={product.general.mainImgUrl}\r\n                        title={product.general.title}\r\n                        brand={product.general.brand}\r\n                        model={product.general.model}\r\n                        year={product.general.year}\r\n                        price={product.general.price}\r\n                        nbKilometers={product.general.nbKilometers}\r\n                        gazol={product.general.gazol}\r\n                        transmissionType={product.general.transmissionType}\r\n                        goToProd={() => requestProductDetails(product)}\r\n                    />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default withRouter(ProductsList)\r\n","import React from 'react'\r\nimport './Paginator.css';\r\nimport IconSvg from '../../utilities/svg/svg'\r\n\r\nconst Paginator = props => {\r\n    const pageNumbers = [];\r\n    for(let i = 1; i <= props.lastPage; i++){\r\n        pageNumbers.push(i)\r\n    }\r\n    const pageNumbersButton = pageNumbers.map( i => (\r\n            <div \r\n                onClick={props.onRequestPageNumber.bind(this, i)}\r\n                key={i}\r\n                id={i}\r\n                className={`paginator__control ${props.currentPage === i ? 'active' : ' '}`}>\r\n                {i}\r\n            </div>\r\n    ))\r\n\r\n    return (\r\n        <div className=\"paginator\">\r\n            {props.children}\r\n            {props.products && props.products.length > 0 && (\r\n            <div className={`paginator__controls ${props.currentPage === 1 && props.products.length < props.itemsPerPage ? 'hide':' '}`}>\r\n                    <div className={`paginator__control\r\n                                ${props.currentPage === 1 ? 'disabled': ''}`}\r\n                            onClick={props.onRequestPreviousPage}>\r\n                            <IconSvg icon=\"arrow-left\"/>\r\n                    </div>\r\n                    {pageNumbersButton}\r\n                    <div className={`paginator__control\r\n                                ${props.currentPage === props.lastPage ? 'disabled': ''}`}\r\n                            onClick={props.onRequestNextPage}>\r\n                            <IconSvg icon=\"arrow-right\"/>\r\n                    </div>\r\n                </div>\r\n            )}\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Paginator;","export const amountFormater = (amount, prevCurrency, nextCurrency, quotes) => {\r\n    let USDCAD = quotes.USDCAD\r\n    let USDEUR = quotes.USDEUR\r\n    let result;\r\n\r\n    if(prevCurrency === 'CAD'){\r\n        if(nextCurrency === 'USD'){\r\n            result = amount / USDCAD\r\n        }\r\n        if(nextCurrency === 'EUR'){\r\n            result = amount / USDCAD * USDEUR\r\n        }\r\n        if(nextCurrency === 'CAD'){\r\n            result = amount \r\n        }\r\n    }\r\n\r\n    if(prevCurrency === 'USD'){\r\n        if(nextCurrency === 'CAD'){\r\n            result = amount * USDCAD\r\n        }\r\n        if(nextCurrency === 'EUR'){\r\n            result = amount * USDEUR\r\n        }\r\n    }\r\n\r\n    if(prevCurrency === 'EUR'){\r\n        if(nextCurrency === 'USD'){\r\n            result = amount / USDEUR\r\n        }\r\n        if(nextCurrency === 'CAD'){\r\n            result = amount / USDEUR * USDCAD\r\n        }\r\n    }\r\n\r\n    return result\r\n}","import React, { Component } from 'react'\r\nimport './Inventory.css';\r\nimport {connect} from 'react-redux'\r\nimport Loader from '../../components/loader/Loader';\r\nimport Controller from './Controller/Controller';\r\nimport queryString from 'query-string';\r\nimport * as actions from '../../store/actions'\r\nimport ProductsList from '../../components/ProductsList/ProductsList';\r\nimport Paginator from '../../components/paginator/Paginator';\r\nimport { amountFormater } from '../../utilities/amountFormater'\r\n\r\nclass Inventory extends Component {\r\n\r\n    state = {\r\n        products: null,\r\n        loading: true,\r\n        query: {\r\n            brand: 'all',\r\n            model: 'all',\r\n            bodyType: 'all',\r\n            supplierName: 'all',\r\n            supplierId: null,\r\n            page: 1,\r\n            year: {\r\n                value: {\r\n                    min: 2008,\r\n                    max: 2020\r\n                },\r\n                scope: {\r\n                    min: 2008,\r\n                    max: 2020\r\n                }\r\n            },\r\n            price: {\r\n                value: {\r\n                    min: null,\r\n                    max: null\r\n                },\r\n                scope: {\r\n                    min: null,\r\n                    max: null\r\n                },\r\n                init:{\r\n                    min: null,\r\n                    max: null\r\n                }\r\n            },\r\n            sort: 'increasing price'\r\n\r\n        },\r\n        lastPage: null\r\n    }\r\n\r\n    componentWillMount(){\r\n        // console.log('fetching',this.props.history, this.props.location)\r\n    }\r\n\r\n    componentDidMount(){    \r\n        /*** START INIT MIN AND MAX PRICE ***/\r\n        let minPrice = this.props.price.min;\r\n        let maxPrice = this.props.price.max;\r\n        /*** END INIT MIN AND MAX PRICE ***/  \r\n        let parsedQuery = queryString.parse(this.props.location.search);\r\n        if(Object.keys(parsedQuery).length > 2){\r\n          if(parsedQuery.page > 1){\r\n            this.props.setInventoryCurrentPage(parseInt(parsedQuery.page)) \r\n          }\r\n            this.setState(prevState => ({\r\n            ...prevState,\r\n            query: {\r\n                ...prevState.query,\r\n                price : {\r\n                    init: {\r\n                        min: minPrice,\r\n                        max: maxPrice\r\n                    },\r\n                    scope: {\r\n                        min:  minPrice,\r\n                        max: maxPrice\r\n                    },  \r\n                    value: {\r\n                        min: parseInt(parsedQuery.minPrice),\r\n                        max: parseInt(parsedQuery.maxPrice)\r\n                    },\r\n                    fullValue: {\r\n                        min: parseInt(parsedQuery.minPrice),\r\n                        max: parseInt(parsedQuery.maxPrice)\r\n                    }\r\n                },\r\n                year : {\r\n                    ...prevState.query.year,\r\n                    value: {\r\n                        min: parseInt(parsedQuery.minYear),\r\n                        max: parseInt(parsedQuery.maxYear)\r\n                    }\r\n                },\r\n                supplierName: parsedQuery.supplier,\r\n                supplierId: parsedQuery.supplier === 'all' ? null : this.props.suppliers.find( supplier => supplier.name === parsedQuery.supplier)._id,\r\n                brand: parsedQuery.brand,\r\n                model: parsedQuery.model,\r\n                sort: parsedQuery.sort,\r\n                bodyType: parsedQuery.bodyType,\r\n                page: parsedQuery.page,                  \r\n            },\r\n            lastPage: Math.ceil(this.props.totalProductsCounter / this.props.itemsPerPage)\r\n        }), () =>  this.fetchProductsHandler())\r\n        } else {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                query: {\r\n                    ...prevState.query,\r\n                    price: {\r\n                        init: {\r\n                            min: minPrice,\r\n                            max: maxPrice\r\n                        },\r\n                        scope: {\r\n                            min:  minPrice,\r\n                            max: maxPrice \r\n                        },  \r\n                        value: {\r\n                            min: minPrice,\r\n                            max: maxPrice \r\n                        },\r\n                        fullValue: {\r\n                            min: minPrice,\r\n                            max: maxPrice \r\n                        },\r\n                    }\r\n                },\r\n                lastPage: Math.ceil(this.props.totalProductsCounter / this.props.itemsPerPage)\r\n            }), () =>  this.fetchProductsHandler())\r\n           \r\n        }  \r\n    }\r\n\r\n\r\n    fetchProductsHandler = () => {\r\n        const {query} = this.state\r\n        let url =  new URL('https://africauto.herokuapp.com/product/admin');\r\n        let params;\r\n\r\n        //current value with the corresponding currency\r\n        let minPrice = query.price.value.min;\r\n        let maxPrice = query.price.value.max;\r\n            //store the value in those variables, we'll use them as a search parameters for the url at the ending of fetching products\r\n            let minPriceQuery = minPrice;\r\n            let maxPriceQuery = maxPrice;\r\n            //Convert the full value to CAD because or DB uses CAD as price currency\r\n            minPrice = amountFormater(query.price.fullValue.min, this.props.currency, 'CAD', this.props.quotes);\r\n            maxPrice = amountFormater(query.price.fullValue.max, this.props.currency, 'CAD', this.props.quotes);\r\n        \r\n            if(query){\r\n            params = {\r\n                ...params,\r\n                page: query.page,\r\n                brand: query.brand,\r\n                bodyType: query.bodyType,\r\n                model: query.model,\r\n                supplierId: query.supplierId,\r\n                minPrice: Math.floor(minPrice),\r\n                maxPrice: Math.ceil(maxPrice),\r\n                minYear: query.year.value.min,\r\n                maxYear: query.year.value.max,\r\n                sort: query.sort.split(' ').length > 0 ? `${query.sort.split(' ')[0]}_${query.sort.split(' ')[1]}` : query.sort\r\n            }\r\n            url.search = new URLSearchParams(params).toString()\r\n        }\r\n\r\n\r\n        fetch( url, {\r\n          headers: {\r\n            'Content-type': 'application/json'\r\n          }\r\n        })\r\n        .then( res => {\r\n          if(res.status !== 200 && res.status !== 201){\r\n            throw new Error('Error fetching products')\r\n          }\r\n          return res.json()\r\n        })\r\n        .then(resData => {  \r\n          this.setState({ products: resData.products, loading: false});\r\n          this.props.history.push({\r\n              pathname: `/inventory`,\r\n              search: `supplier=${query.supplierName}&sort=${query.sort}&page=${query.page}&bodyType=${query.bodyType}&brand=${query.brand}&model=${query.model}&minPrice=${minPriceQuery}&maxPrice=${maxPriceQuery}&minYear=${query.year.value.min}&maxYear=${query.year.value.max}`\r\n          })\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        let prevCurrency = prevProps.currency;\r\n        let nextCurrency = this.props.currency;\r\n        let stateQuery = this.state.query;   \r\n       if(prevCurrency !== nextCurrency){\r\n            let quotes = this.props.quotes;\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                query: {\r\n                    ...prevState.query,\r\n                    price: {\r\n                        ...prevState.query.price,\r\n                        scope: {\r\n                            min: Math.floor(amountFormater(stateQuery.price.init.min, 'CAD', nextCurrency, quotes) / 1000 ) * 1000,\r\n                            max: Math.ceil(amountFormater(stateQuery.price.init.max, 'CAD', nextCurrency, quotes) / 1000 ) * 1000 ,\r\n                        },\r\n                        value: {\r\n                            min: Math.floor(amountFormater(stateQuery.price.init.min, 'CAD', nextCurrency, quotes)/ 1000 ) * 1000,\r\n                            max: Math.ceil(amountFormater(stateQuery.price.init.max, 'CAD', nextCurrency, quotes) / 1000 ) * 1000,\r\n                        },\r\n                        fullValue: {\r\n                            min: amountFormater(stateQuery.price.init.min, 'CAD', nextCurrency, quotes),\r\n                            max: amountFormater(stateQuery.price.init.max, 'CAD', nextCurrency, quotes)\r\n                        }\r\n                    }\r\n                }\r\n            }), () => this.fetchProductsHandler())\r\n\r\n        }     \r\n    }\r\n\r\n    selectBodyTypeHandler = bodyType => {\r\n        let data = this.props.brandAndModelsData;\r\n        let stateQuery = this.state.query\r\n        let query\r\n        if(stateQuery.brand !== 'all'){   \r\n            if(Object.keys(data[stateQuery.brand]).includes(bodyType)){\r\n                query = {\r\n                    ...this.state.query,\r\n                    bodyType: bodyType\r\n                } \r\n            } else {\r\n                query = {\r\n                    ...this.state.query,\r\n                    bodyType: bodyType,\r\n                    brand: 'all',\r\n                    model: 'all',\r\n                    page: 1\r\n                } \r\n            }\r\n        } else {\r\n            query = {\r\n                ...this.state.query,\r\n                bodyType: bodyType\r\n            } \r\n        }\r\n        this.setState({ query}, () => this.fetchProductsHandler(query))\r\n    }\r\n\r\n    selectBrandHandler = brand => {   \r\n        let query = {\r\n            ...this.state.query,\r\n                brand: brand\r\n            }\r\n        if(brand === 'all'){\r\n            query = {\r\n                ...query,\r\n                model: 'all',\r\n                page: 1\r\n            }\r\n        } \r\n        this.setState({ query }, () => this.fetchProductsHandler(query))\r\n    }\r\n    selectModelHandler = model => {\r\n        this.setState( prevState => ({\r\n            ...prevState,\r\n            query: {\r\n                ...prevState.query,\r\n                model: model\r\n            }\r\n        }), () => this.fetchProductsHandler())\r\n    }\r\n    sortHandler = sort => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            query : {\r\n                ...prevState.query,\r\n                sort: sort,\r\n                page: 1\r\n            }         \r\n        }), () => this.fetchProductsHandler())\r\n    }\r\n    selectSupplierHandler = supplierName => {\r\n      if(supplierName === 'all'){\r\n        this.setState(prevState => ({\r\n          ...prevState,\r\n          query: {\r\n            ...prevState.query,\r\n            supplierName: 'all',\r\n            supplierId: null\r\n          }\r\n        }), () => this.fetchProductsHandler())\r\n\r\n      } else {\r\n        let supplierId = this.props.suppliers.find( supplier => supplier.name === supplierName)._id\r\n        this.setState(prevState => ({\r\n          ...prevState,\r\n          query: {\r\n            ...prevState.query,\r\n            supplierName: supplierName,\r\n            supplierId: supplierId,\r\n          }\r\n        }), () => this.fetchProductsHandler())\r\n      }\r\n    }\r\n    changePriceHandler = value => {\r\n        this.setState( prevState => ({\r\n            ...prevState,\r\n            query: {\r\n                ...prevState.query,\r\n                page: 1,\r\n                price: {\r\n                    ...prevState.query.price,\r\n                    value: value,\r\n                    fullValue: value\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    changeYearHandler = value => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            query: {\r\n                ...prevState.query,\r\n                page: 1,\r\n                year: {\r\n                    ...prevState.query.year,\r\n                    value: value\r\n                }\r\n            }\r\n        }))\r\n    }\r\n    changeComplete = () => {\r\n        this.fetchProductsHandler()\r\n    }\r\n\r\n    paginationHandler = direction => {\r\n        let query = this.state.query  \r\n        if(direction === 'next' &&  this.props.currentInventoryPage < this.state.lastPage ){ \r\n                query = {\r\n                    ...query,\r\n                    page: this.props.currentInventoryPage + 1\r\n                  }\r\n            this.props.setInventoryCurrentPage(this.props.currentInventoryPage + 1)\r\n            this.setState({ query }, () => this.fetchProductsHandler())\r\n        }\r\n        if(direction === 'previous' && this.props.currentInventoryPage > 1 ){\r\n          query = {\r\n            ...query,\r\n            page: this.props.currentInventoryPage - 1\r\n          }\r\n          this.props.setInventoryCurrentPage(this.props.currentInventoryPage - 1)\r\n          this.setState({ query }, () => this.fetchProductsHandler())\r\n        }\r\n        if(direction !== 'previous' && direction !== 'next'){\r\n          query = {\r\n            ...query,\r\n            page: direction\r\n          }\r\n          this.props.setInventoryCurrentPage(direction)\r\n          this.setState({ query }, () => this.fetchProductsHandler())\r\n        }\r\n\r\n        \r\n      }\r\n\r\n    render() {\r\n        const {products, loading, query} = this.state;\r\n        let inventory = <Loader />\r\n        if(!loading){\r\n            inventory = (\r\n                <div className=\"inventory\">\r\n    \r\n                        <Controller\r\n                            currency={this.props.currency}\r\n                            query={query}\r\n                            selectBrandHandler={this.selectBrandHandler}\r\n                            selectModelHandler={this.selectModelHandler}\r\n                            selectBodyTypeHandler={this.selectBodyTypeHandler}\r\n                            sortHandler={this.sortHandler}\r\n                            changePriceHandler={this.changePriceHandler}\r\n                            changeYearHandler={this.changeYearHandler}\r\n                            changeComplete={this.changeComplete}\r\n                            data={this.props.brandAndModelsData}\r\n                            selectSupplierHandler={this.selectSupplierHandler}\r\n                        />\r\n\r\n                    \r\n                    <section className=\"inventory__container\">\r\n                        {products && (\r\n                            <Paginator\r\n                            onRequestPreviousPage={this.paginationHandler.bind(this, 'previous')}\r\n                            onRequestNextPage={this.paginationHandler.bind(this, 'next')}\r\n                            lastPage={Math.ceil(this.props.totalProductsCounter / this.props.itemsPerPage)}\r\n                            currentPage={this.props.currentInventoryPage}\r\n                            onRequestPageNumber={this.paginationHandler}\r\n                            products={products}\r\n                            itemsPerPage={this.props.itemsPerPage}\r\n                            >\r\n                                <ProductsList productsList={products}/>\r\n                            </Paginator>\r\n                                          \r\n                        )}\r\n                    </section>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n\r\n        return inventory\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        brandAndModelsData: state.products.brandAndModelsData,\r\n        price: state.products.price,\r\n        totalProductsCounter: state.products.totalProducts,\r\n        currentInventoryPage: state.products.currentInventoryPage,\r\n        itemsPerPage: state.products.itemsPerPage,\r\n\r\n        currency: state.parameters.currency,\r\n        quotes: state.parameters.quotes,\r\n        lang: state.parameters.lang,\r\n        currency: state.parameters.currency,\r\n\r\n        suppliers: state.suppliers.suppliers\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setInventoryCurrentPage: data => dispatch(actions.setInventoryCurrentPage(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Inventory)","import React from 'react';\r\nimport './Button.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst button = props => !props.link ?\r\n    (\r\n        <button \r\n            className={['button', `button--${props.color}`].join(' ')}\r\n            onClick={props.onClick}\r\n            disabled={props.disabled || props.loading}\r\n            type={props.type}>\r\n                {props.loading ? 'Looading...' : props.children}\r\n        </button>\r\n    ) \r\n        :\r\n    (\r\n        <Link \r\n            className={['button', `button--${props.color}`].join(' ')}\r\n            to={props.link}\r\n            onClick={props.onClick}>\r\n                {props.children}\r\n        </Link>\r\n    )\r\n\r\nexport default button;\r\n","import React, { Component, Fragment } from 'react'\r\nimport './PublicitySelector.css';\r\nimport Loader from '../../../components/loader/Loader';\r\nimport Product from '../../../components/product/Product';\r\nimport Button from '../../../components/button/Button';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\nimport * as actions from '../../../store/actions';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nclass PublicitySelector extends Component {\r\n\r\n    state = {\r\n        products: null,\r\n        loading: true,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchProductsHandler();\r\n\r\n        let productsIds = [];\r\n        let productsDetails = [];\r\n        let products = [];\r\n\r\n        let publicitySelectorType = this.props.selectorTitle;\r\n\r\n        if(publicitySelectorType === 'publicity'){\r\n            products = this.props.newPubProducts\r\n        }\r\n\r\n        if(publicitySelectorType === 'home page'){\r\n            products = this.props.newHomePageProducts\r\n        }\r\n\r\n        if(products.length > 0){\r\n            products.forEach(product => {\r\n                productsIds = [...productsIds, product._id];\r\n                productsDetails = [...productsDetails, product]\r\n            })\r\n            let data = {\r\n                productsIds, \r\n                productsDetails\r\n            }\r\n            this.props.setPublicitySelectorSelectedProducts(data)\r\n        }  \r\n\r\n    }\r\n\r\n    fetchProductsHandler = () => {\r\n        this.setState({ loading: true});\r\n        let url = \"http://localhost:8000/admin/publicity/add-new\";\r\n        let method = 'POST';\r\n\r\n        let body = {section: this.props.selectorTitle};\r\n\r\n        fetch(url, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: method,\r\n            body: JSON.stringify(body)\r\n        })\r\n        .then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not fetch suppliers')\r\n            }\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n            this.setState({\r\n                products: resData.products,\r\n                loading: false\r\n            })\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n            this.setState({ loading: false})\r\n        })\r\n    }\r\n\r\n    selectHandler = product => {\r\n        const { selectorSelectedProductsIds, selectorSelectedProductsDetails } = this.props;\r\n        let id = product._id;\r\n        let data = {};\r\n        if(!selectorSelectedProductsIds.includes(id)){\r\n            data.productsIds = [...selectorSelectedProductsIds, id];\r\n            data.productsDetails = [...selectorSelectedProductsDetails, product]\r\n        } else {\r\n            data.productsIds = selectorSelectedProductsIds.filter(prodId => prodId !== id);\r\n            data.productsDetails = selectorSelectedProductsDetails.filter(product => product._id !== id);\r\n        }  \r\n        \r\n        this.props.setPublicitySelectorSelectedProducts(data)\r\n    }\r\n\r\n    requestProductDetails = id => {\r\n        this.props.setProductRequestedId(id);\r\n        this.props.history.push(`/inventory/${id}`);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {products, loading} = this.state;\r\n\r\n        const {selectorSelectedProductsIds,  selectorSelectedProductsDetails} = this.props;\r\n\r\n        let productsList = <Loader />\r\n        if(!loading){\r\n            productsList = (\r\n                <Fragment>\r\n                    <ul className=\"publicity__main__list\">\r\n                                {\r\n                                    products && products.map( product => (\r\n                                            <li key={product._id}>\r\n                                                <Product  \r\n                                                        id={product._id}\r\n                                                        mainImg={product.general.mainImgUrl}\r\n                                                        title={product.general.title}\r\n                                                        brand={product.general.brand}\r\n                                                        model={product.general.model}\r\n                                                        year={product.general.year}\r\n                                                        price={product.general.price}\r\n                                                        nbKilometers={product.general.nbKilometers}\r\n                                                        gazol={product.general.gazol}\r\n                                                        transmissionType={product.general.transmissionType}\r\n                                                        goToProd={() => this.requestProductDetails(product._id)}\r\n                                                    >\r\n                                                    <div className={`publicitySelector__checkbox \r\n                                                                    ${selectorSelectedProductsIds.includes(product._id) ? 'checked': ''}`}\r\n                                                        onClick={() => this.selectHandler(product)}>\r\n                                                        <IconSvg icon=\"checked\"/>\r\n                                                    </div>\r\n                                                    </Product>\r\n                                                </li>\r\n                                            ))\r\n                                    }  \r\n                        </ul>\r\n                        <div className=\"publicitySelector__cta\">\r\n                            <Button color=\"primary\"\r\n                                    onClick={() => this.props.addNewProducts(selectorSelectedProductsDetails)}>\r\n                                Add\r\n                            </Button>\r\n                            <Button color=\"primary\"\r\n                                    onClick={this.props.toggleSelector}>\r\n                                Cancel\r\n                            </Button>\r\n\r\n                        </div>\r\n                </Fragment>\r\n                \r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"publicitySelector\">\r\n                <h1 className=\"publicitySelector__title\">Select {this.props.selectorTitle} products</h1>\r\n                {productsList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectorSelectedProductsIds: state.publicity.selectorSelectedProductsIds,\r\n        selectorSelectedProductsDetails: state.publicity.selectorSelectedProductsDetails,\r\n        newPubProducts: state.publicity.newPubProducts,\r\n        newHomePageProducts: state.publicity.newHomePageProducts\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setProductRequestedId: (prodId) => dispatch(actions.setRequestedProductId(prodId)),\r\n        setPublicitySelectorSelectedProducts: data => dispatch(actions.setPublicitySelectorSelectedProducts(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PublicitySelector))\r\n","import * as actionTypes from './actionsTypes';\r\n\r\n\r\nexport const setPublicityData = data => {\r\n    return {\r\n        type: actionTypes.SET_PUBLICITY_DATA,\r\n        pubProducts: data.pubProducts,\r\n        homePageProducts: data.homePageProducts\r\n    }\r\n}\r\n\r\nexport const setPublicityEditingMode = data => {\r\n    return {\r\n        type: actionTypes.SET_PUBLICITY_EDITING_MODE,\r\n        editingMode: data\r\n    }\r\n}\r\n\r\nexport const setPublicitySelectedPubProducts = data => {\r\n    return {\r\n        type: actionTypes.SET_PUBLICITY_SELECTED_PUB_PRODUCTS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const setPublicitySelectedHomePageProducts= data => {\r\n    return {\r\n        type: actionTypes.SET_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const cancelPublicityEditingMode = section => {\r\n    return {\r\n        type: actionTypes.CANCEL_PUBLICITY_EDITING_MODE,\r\n        section: section\r\n    }\r\n}\r\n\r\nexport const deletePublicitySelectedPubProducts = data => {\r\n    return {\r\n        type: actionTypes.DELETE_PUBLICITY_SELECTED_PUB_PRODUCTS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const deletePublicitySelectedHomePageProducts = data => {\r\n    return {\r\n        type: actionTypes.DELETE_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const togglePublicitySelector = section => {\r\n    return {\r\n        type: actionTypes.TOGGLE_PUBLICITY_SELECTOR,\r\n        section: section\r\n    }\r\n}\r\n\r\nexport const setPublicitySelectorSelectedProducts = data => {\r\n    return {\r\n        type: actionTypes.SET_PUBLICITY_SELECTOR_SELECTED_PRODUCTS,\r\n        productsIds: data.productsIds,\r\n        productsDetails: data.productsDetails\r\n    }\r\n}\r\n\r\nexport const addPublicityPubProducts = data => {\r\n    return {\r\n        type: actionTypes.ADD_PUBLICITY_PUB_PRODUCTS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const addPublicityHomePageProducts = data => {\r\n    return {\r\n        type: actionTypes.ADD__PUBLICITY__HOMEPAGE__PRODUCTS,\r\n        data: data\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './Publicity.css';\r\nimport { connect } from 'react-redux';\r\nimport Product from '../../components/product/Product';\r\nimport Loader from '../../components/loader/Loader';\r\nimport * as actions from '../../store/actions';\r\nimport IconSvg from '../../utilities/svg/svg';\r\nimport Button from '../../components/button/Button';\r\nimport PublicitySelector from './PublicitySelector/PublicitySelector';\r\n\r\n\r\nclass Publicity extends Component {\r\n\r\n    state = {\r\n        loading: true,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchProductsHandler()\r\n    }\r\n\r\n    fetchProductsHandler = () => {\r\n        this.setState({ loading: true});\r\n\r\n        let url = 'https://africauto.herokuapp.com/admin/publicity'; \r\n        fetch(url, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n        .then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not fetch suppliers')\r\n            }\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n            let data = {\r\n                pubProducts: resData.publicity,\r\n                homePageProducts: resData.home,\r\n            }\r\n            this.props.setPublicityData(data);\r\n            this.setState({loading: false})\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n            this.setState({ loading: false})\r\n        })\r\n    }\r\n\r\n    requestProductDetails = id => {\r\n        this.props.setProductRequestedId(id);\r\n        this.props.history.push(`/inventory/${id}`);\r\n    }\r\n\r\n    editingModeHandler = mode => {\r\n        let newEditingMode;\r\n        let currentEditingMode = this.props.editingMode;\r\n\r\n\r\n\r\n        if(!currentEditingMode){\r\n            newEditingMode = [mode];\r\n            this.props.setPublicityEditingMode(newEditingMode);\r\n        } else {\r\n            if(!currentEditingMode.includes(mode)){\r\n                newEditingMode = [...currentEditingMode, mode]\r\n                this.props.setPublicityEditingMode(newEditingMode);\r\n            } else {\r\n                this.cancelHandler(mode)\r\n            }\r\n        }\r\n        \r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n    selectHandler = (section, id) => {\r\n        const {selectedPubProducts, selectedHomePageProducts} = this.props;\r\n        let data = [];\r\n        if(section === 'publicity'){\r\n            if(!selectedPubProducts.includes(id)){\r\n                data = [...selectedPubProducts, id]\r\n            } else {\r\n                data = selectedPubProducts.filter(prodId => prodId !== id)\r\n            }  \r\n            this.props.setPublicitySelectedPubProducts(data)\r\n        }\r\n        if(section === 'home page'){\r\n            if(!selectedHomePageProducts.includes(id)){\r\n                data = [...selectedHomePageProducts, id]\r\n            } else {\r\n                data = selectedHomePageProducts.filter(prodId => prodId !== id)\r\n            }  \r\n            this.props.setPublicitySelectedHomePageProducts(data)\r\n        }\r\n    }\r\n\r\n    deleteHandler = section => {\r\n        if(section === 'publicity'){\r\n           let newPublicityProducts =  this.props.currentPubProducts.filter(product => !this.props.selectedPubProducts.includes(product._id));\r\n           this.props.deletePublicitySelectedPubProducts(newPublicityProducts)\r\n        }\r\n\r\n        if(section === 'home page'){\r\n            let newHomePageProducts =  this.props.currentHomePageProducts.filter(product => !this.props.selectedHomePageProducts.includes(product._id));\r\n            this.props.deletePublicitySelectedHomePageProducts(newHomePageProducts)\r\n         }\r\n    }\r\n\r\n    cancelHandler = section => {\r\n        this.props.cancelPublicityEditingMode(section)\r\n    }\r\n\r\n    saveHandler = () => {\r\n        const {publicitySelectedProducts, newPubProducts, homePageSelectedProducts, newHomePageProducts } = this.props;\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"removeFromPub\", publicitySelectedProducts);\r\n        formData.append(\"removeFromHomePage\", homePageSelectedProducts);\r\n\r\n        if(newPubProducts){\r\n            let newPublicityProductsIds = [];\r\n            newPubProducts.forEach(product => {\r\n                newPublicityProductsIds = [...newPublicityProductsIds, product._id]\r\n            })\r\n            formData.append(\"addToPub\", newPublicityProductsIds);\r\n        }\r\n\r\n        if(newHomePageProducts){\r\n            let newHomePageProductsIds = [];\r\n            newHomePageProducts.forEach(product => {\r\n                newHomePageProductsIds = [...newHomePageProductsIds, product._id]\r\n            })\r\n            formData.append(\"addToHomePage\", newHomePageProductsIds);\r\n        }\r\n\r\n        let method = 'PUT';\r\n        let url = \"https://africauto.herokuapp.com/admin/update-product-visibility\";\r\n\r\n        fetch(url, {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            method: method,\r\n            body: JSON.stringify(Object.fromEntries(formData))\r\n          })\r\n          .then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n              throw new Error(\"Creating a product failed\");\r\n            }\r\n            return res.json()\r\n          })\r\n          .then(resData => {\r\n            this.fetchProductsHandler();\r\n            this.setState({ editingMode: false, newPubProducts: [], newHomePageProducts: []})\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n          });\r\n    }\r\n\r\n    toggleSelector = section => {\r\n        this.props.togglePublicitySelector(section)\r\n    }\r\n\r\n    addNewPubProducts = products => {\r\n        let currentEditingMode = this.props.editingMode;\r\n        let selectorTitle = this.props.selectorTitle\r\n\r\n        if(selectorTitle === 'publicity'){\r\n\r\n\r\n            this.props.addPublicityPubProducts(products);  \r\n\r\n            if(!currentEditingMode.includes('publicity')){\r\n                this.editingModeHandler('publicity')\r\n            }          \r\n        }\r\n\r\n        if(selectorTitle === 'home page'){\r\n            this.props.addPublicityHomePageProducts(products);         \r\n            if(!currentEditingMode.includes('home page')){\r\n                this.editingModeHandler('home page')\r\n            } \r\n        }\r\n\r\n        this.props.togglePublicitySelector()\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { loading} = this.state;\r\n\r\n        const {\r\n                currentPubProducts, \r\n                currentHomePageProducts, \r\n                editingMode,\r\n                selectedPubProducts,\r\n                selectedHomePageProducts,\r\n                showSelector,\r\n                selectorTitle,\r\n                newPubProducts,\r\n                newHomePageProducts\r\n              } = this.props;\r\n\r\n        let publicity = <Loader />\r\n        if(!loading){\r\n            publicity = (\r\n            <div className=\"publicity\">\r\n\r\n                {showSelector && <PublicitySelector \r\n                                    toggleSelector={this.toggleSelector} \r\n                                    addNewProducts={this.addNewPubProducts}\r\n                                    selectorTitle={selectorTitle}\r\n                                 />}\r\n                \r\n                <section className=\"publicity__section--main publicity__section\">\r\n                    <h1 className=\"publicity__title\">Publicity</h1>\r\n                    <div className=\"publicity__section__controller\">\r\n                        <IconSvg icon=\"add\"\r\n                                  onClick={() => this.toggleSelector('publicity')}/>\r\n                        <IconSvg icon=\"bin\" customClass=\"publicity__section__controller__delete\"\r\n                                 onClick={() => this.deleteHandler('publicity')}/>\r\n                        <IconSvg icon=\"pencil\" \r\n                                 customClass=\"publicity__section__controller__edit\"\r\n                                 onClick={ () => this.editingModeHandler('publicity')}\r\n                        />\r\n                        \r\n                    </div>\r\n                    <ul className=\"publicity__main__list\">               \r\n                                {\r\n                                   currentPubProducts && currentPubProducts.map( product => (\r\n                                        <li key={product._id}>\r\n                                            <Product  \r\n                                                id={product._id}\r\n                                                mainImg={product.general.mainImgUrl}\r\n                                                title={product.general.title}\r\n                                                brand={product.general.brand}\r\n                                                model={product.general.model}\r\n                                                year={product.general.year}\r\n                                                price={product.general.price}\r\n                                                nbKilometers={product.general.nbKilometers}\r\n                                                gazol={product.general.gazol}\r\n                                                transmissionType={product.general.transmissionType}\r\n                                                goToProd={() => this.requestProductDetails(product._id)}\r\n                                            >\r\n                                                <div className={`publicity__main__list__item__checkbox\r\n                                                                ${ selectedPubProducts.includes(product._id) ? 'checked': ''}\r\n                                                                ${editingMode && editingMode.includes(\"publicity\") ? 'show': ''}`\r\n                                                                }\r\n                                                    onClick={() => this.selectHandler('publicity', product._id)}>\r\n                                                    <IconSvg icon=\"checked\"/>\r\n                                                </div>\r\n                                            </Product>\r\n                                        </li>\r\n                                    ))\r\n                                }                 \r\n                    </ul>\r\n\r\n                    {\r\n                        newPubProducts.length > 0 && (\r\n                            <div className=\"publicity__newProducts\">\r\n                                <h2 className=\"publicity__newProducts__title\">New products</h2>\r\n                                <ul className=\"publicity__main__list\">               \r\n                                        {\r\n                                        newPubProducts && newPubProducts.map( product => (\r\n                                                <li key={product._id}>\r\n                                                    <Product  \r\n                                                        id={product._id}\r\n                                                        mainImg={product.general.mainImgUrl}\r\n                                                        title={product.general.title}\r\n                                                        brand={product.general.brand}\r\n                                                        model={product.general.model}\r\n                                                        year={product.general.year}\r\n                                                        price={product.general.price}\r\n                                                        nbKilometers={product.general.nbKilometers}\r\n                                                        gazol={product.general.gazol}\r\n                                                        transmissionType={product.general.transmissionType}\r\n                                                        goToProd={() => this.requestProductDetails(product._id)}\r\n                                                    >\r\n                                                        <div className={`publicity__main__list__item__checkbox`}>\r\n                                                            <IconSvg icon=\"checked\"/>\r\n                                                        </div>\r\n                                                    </Product>\r\n                                                </li>\r\n                                            ))\r\n                                        }                 \r\n                                </ul>\r\n                            </div>\r\n                        )\r\n                    }\r\n\r\n                    \r\n                                \r\n                    <div className={`publicity__section__cta ${editingMode && editingMode.includes(\"publicity\") ? 'show': ''}`}>\r\n                                <Button color=\"primary\"\r\n                                        onClick={this.saveHandler}>\r\n                                    Save\r\n                                </Button>\r\n                                <Button color=\"primary\"\r\n                                        onClick={() => this.cancelHandler('publicity')}>\r\n                                    Cancel\r\n                                </Button>\r\n                    </div>\r\n                \r\n                </section>\r\n                <section className=\"publicity__section--inventory publicity__section\">\r\n                    <h1 className=\"publicity__title\">Home Page</h1>\r\n                    <div className=\"publicity__section__controller\">\r\n                        <IconSvg icon=\"add\"\r\n                                  onClick={() => this.toggleSelector('home page')}/>\r\n                        <IconSvg icon=\"bin\" customClass=\"publicity__section__controller__delete\"\r\n                                 onClick={() => this.deleteHandler('home page')}/>\r\n                        <IconSvg icon=\"pencil\" \r\n                                 customClass=\"publicity__section__controller__edit\"\r\n                                 onClick={ () => this.editingModeHandler('home page')}\r\n                        />             \r\n                    </div>\r\n                    <ul className=\"publicity__main__list\">                \r\n                                {\r\n                                   currentHomePageProducts && currentHomePageProducts.map( product => (\r\n                                    <li key={product._id}>\r\n                                        <Product  \r\n                                            id={product._id}\r\n                                            mainImg={product.general.mainImgUrl}\r\n                                            title={product.general.title}\r\n                                            brand={product.general.brand}\r\n                                            model={product.general.model}\r\n                                            year={product.general.year}\r\n                                            price={product.general.price}\r\n                                            nbKilometers={product.general.nbKilometers}\r\n                                            gazol={product.general.gazol}\r\n                                            transmissionType={product.general.transmissionType}\r\n                                            goToProd={() => this.requestProductDetails(product._id)}\r\n                                        >\r\n                                        <div className={`publicity__main__list__item__checkbox\r\n                                                        ${selectedHomePageProducts.includes(product._id) ? 'checked': ''}\r\n                                                        ${editingMode && editingMode.includes(\"home page\") ? 'show': ''}`\r\n                                                        }\r\n                                                onClick={() => this.selectHandler(\"home page\",product._id)}>\r\n                                            <IconSvg icon=\"checked\"/>\r\n                                        </div>\r\n                                        </Product>\r\n                                        \r\n                                    </li>\r\n                                    ))\r\n                                } \r\n                    </ul>\r\n\r\n                    {\r\n                        newHomePageProducts.length > 0 && (\r\n                            <div className=\"publicity__newProducts\">\r\n                                <h2 className=\"publicity__newProducts__title\">New products</h2>\r\n                                <ul className=\"publicity__main__list\">               \r\n                                        {\r\n                                        newHomePageProducts && newHomePageProducts.map( product => (\r\n                                                <li key={product._id}>\r\n                                                    <Product  \r\n                                                        id={product._id}\r\n                                                        mainImg={product.general.mainImgUrl}\r\n                                                        title={product.general.title}\r\n                                                        brand={product.general.brand}\r\n                                                        model={product.general.model}\r\n                                                        year={product.general.year}\r\n                                                        price={product.general.price}\r\n                                                        nbKilometers={product.general.nbKilometers}\r\n                                                        gazol={product.general.gazol}\r\n                                                        transmissionType={product.general.transmissionType}\r\n                                                        goToProd={() => this.requestProductDetails(product._id)}\r\n                                                    >\r\n                                                        <div className={`publicity__main__list__item__checkbox`}>\r\n                                                            <IconSvg icon=\"checked\"/>\r\n                                                        </div>\r\n                                                    </Product>\r\n                                                </li>\r\n                                            ))\r\n                                        }                 \r\n                                </ul>\r\n                            </div>\r\n                        )\r\n                    }\r\n\r\n                    <div className={`publicity__section__cta ${editingMode && editingMode.includes(\"home page\") ? 'show': ''}`}>\r\n                                <Button color=\"primary\"\r\n                                        onClick={this.saveHandler}>\r\n                                    Save\r\n                                </Button>\r\n                                <Button color=\"primary\"\r\n                                        onClick={() => this.cancelHandler('home page')}>\r\n                                    Cancel\r\n                                </Button>\r\n                    </div>\r\n\r\n                </section>\r\n            </div>\r\n            )\r\n        }\r\n\r\n        return publicity\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        INIT_pubProducts: state.publicity.INIT_pubProducts,\r\n        INIT_homePageProducts: state.publicity.INIT_homePageProducts,\r\n        currentPubProducts: state.publicity.currentPubProducts,\r\n        currentHomePageProducts: state.publicity.currentHomePageProducts,\r\n        selectedPubProducts: state.publicity.selectedPubProducts,\r\n        selectedHomePageProducts: state.publicity.selectedHomePageProducts,\r\n\r\n        newPubProducts: state.publicity.newPubProducts,\r\n        newHomePageProducts: state.publicity.newHomePageProducts,\r\n\r\n        showSelector: state.publicity.showSelector,\r\n        selectorTitle: state.publicity.selectorTitle,\r\n        editingMode: state.publicity.editingMode\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setProductRequestedId: (prodId) => dispatch(actions.setRequestedProductId(prodId)),\r\n        setPublicityData: data => dispatch(actions.setPublicityData(data)),\r\n        setPublicityEditingMode: data => dispatch(actions.setPublicityEditingMode(data)),\r\n        setPublicitySelectedPubProducts: data => dispatch(actions.setPublicitySelectedPubProducts(data)),\r\n        setPublicitySelectedHomePageProducts: data => dispatch(actions.setPublicitySelectedHomePageProducts(data)),\r\n        cancelPublicityEditingMode: section => dispatch(actions.cancelPublicityEditingMode(section)),\r\n        deletePublicitySelectedHomePageProducts: data => dispatch(actions.deletePublicitySelectedHomePageProducts(data)),\r\n        deletePublicitySelectedPubProducts: data => dispatch(actions.deletePublicitySelectedPubProducts(data)),\r\n        togglePublicitySelector: section => dispatch(actions.togglePublicitySelector(section)),\r\n        addPublicityPubProducts: data => dispatch(actions.addPublicityPubProducts(data)),\r\n        addPublicityHomePageProducts: data => dispatch(actions.addPublicityHomePageProducts(data))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Publicity);","export const daysInMonth = (month, year) => {\r\n    return new Date(year, month, 0).getDate()\r\n}\r\n\r\n","export const MONTH_TABLE = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n]","import React from 'react'\r\nimport './Title.css'\r\n\r\nconst Title = props => {\r\n    return (\r\n        <div className=\"app__titleContainer\">\r\n            <h1 className=\"app__title--primary\">\r\n                {props.title}\r\n            </h1>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { daysInMonth } from '../../../utilities/daysInMonth';\r\nimport {MONTH_TABLE } from '../../../utilities/monthTable';\r\nimport Title from '../../../components/title/Title';\r\n\r\nclass UserConnection extends Component {\r\n    state = {\r\n        data: {\r\n            labels: [],\r\n            datasets: []\r\n        },\r\n        tempData: null,\r\n        mm_yyyy_labels: [],\r\n        loading: true,\r\n        filter: 'general',\r\n        selectedMonth: null,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.selectUsersConnectionFilterGeneral()\r\n    }\r\n\r\n    selectFilterHandler = filter => {\r\n        if(filter === 'general'){\r\n            this.setState({ filter}, () => this.selectUsersConnectionFilterGeneral())\r\n            \r\n        }\r\n        if(filter === 'month'){\r\n            this.setState({ filter}, () => this.selectUsersConnectionFilterByMonth())\r\n        }\r\n    }\r\n\r\n    selectUsersConnectionFilterByMonth = monthAndYear => {\r\n        //Check if we have an argument, if not use the state which has been initialized when componentDidMount\r\n        if(!monthAndYear){\r\n            monthAndYear = this.state.selectedMonth\r\n        } \r\n\r\n        //Count the number of day in the month\r\n        let month = monthAndYear.split('-')[0];\r\n        let year = monthAndYear.split('-')[1];\r\n        let daysInMonthCounter = daysInMonth( parseInt(month), parseInt(year));\r\n\r\n        //Built the full date for each day of the month\r\n        let fullDatelabels = [];\r\n        let day;\r\n        for(day = 1; day < daysInMonthCounter + 1; day++){\r\n            if(day < 10){\r\n                day=`0${day}`\r\n            }\r\n            fullDatelabels.push(`${day}-${month}-${year}`)\r\n        }\r\n\r\n        //store only the key value date-counter that corresponds to the month \r\n        let tempData = {};\r\n        Object.keys(this.state.tempData).forEach(date => {\r\n            if(`${date.split('-')[1]}-${date.split('-')[2]}` === monthAndYear){\r\n                tempData[date] = this.state.tempData[date]\r\n            }\r\n        })\r\n\r\n        let datasets = [];\r\n        fullDatelabels.forEach(label => {\r\n            if(Object.keys(tempData).includes(label)){\r\n                datasets = [...datasets, tempData[label]]\r\n            }else{\r\n                datasets = [...datasets, 0]\r\n            }\r\n        })\r\n\r\n        let labels = [];\r\n        fullDatelabels.forEach(label => {\r\n            labels.push(label.split('-')[0])\r\n        })\r\n\r\n        let finalData = {\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: `Number of website loadings - ${MONTH_TABLE[month - 1]} ${year}`,\r\n                        data: datasets,\r\n                        backgroundColor: 'transparent'\r\n                    }\r\n                ]\r\n        }          \r\n        this.setState({ data: finalData, selectedMonth: monthAndYear})\r\n \r\n    }\r\n\r\n    selectUsersConnectionFilterGeneral = () => {   \r\n        let tempData = {}; // to manipulate the data\r\n        let finalData = {} //to send the final value to the chart\r\n        //Storing all the connection dataset in the data array\r\n        let data = [];\r\n        this.props.stats.forEach(userStat => {\r\n            userStat.connection.forEach(connection => {\r\n                data.push(connection)\r\n            })\r\n        })\r\n        //Creating the full date for each connection and storing it in the fullDate array\r\n        let fullDateArray = [];\r\n        data.forEach(i => {\r\n            let day = i.start.split('-')[0];\r\n            let month = i.start.split('-')[1];\r\n            let year = i.start.split('-')[2];\r\n            let x = new Date(`${month}-${day}-${year}`);\r\n            fullDateArray.push(x)\r\n        })\r\n        //Sorting the date from oldest to newest\r\n        fullDateArray = fullDateArray.sort( (a, b) => {\r\n            return a > b ? 1 : a < b ? -1 : 0\r\n        })\r\n        //Format the sorted date in dd-mm-yyyy and store the result in the sortedShortDateArray\r\n        let sortedShortDateArray = [];\r\n        fullDateArray.forEach(i => {\r\n            let day = i.getDate()\r\n            let month = i.getMonth() + 1;\r\n            let year = i.getFullYear();\r\n            if(day < 10){\r\n                day = `0${day}`;\r\n            }\r\n            sortedShortDateArray.push(`${day}-${month}-${year}`)\r\n            \r\n        })\r\n        //For each date, check if it's already in the tempData object\r\n        sortedShortDateArray.forEach(date => {\r\n            if(!Object.keys(tempData).includes(date)){\r\n                // Case 1 : the date is not in the tempData, we need to add it as property and init the counter\r\n                tempData[date] = 1\r\n            } else {\r\n                //case 2 : the date is already in the tempData, we need to increment its value by 1\r\n                tempData[date] = tempData[date] + 1\r\n            }\r\n        })\r\n        //store each date the value in the datasets array\r\n        let datasets = [];\r\n        Object.keys(tempData).forEach(date => {\r\n            datasets = [...datasets, tempData[date]]\r\n        })\r\n\r\n        //Built the mm_yyyy_labels array\r\n        let mm_yyyy_labels = [];\r\n        (Object.keys(tempData).forEach(i => {\r\n            let mm_yyyy = `${i.split('-')[1]}-${i.split('-')[2]}`\r\n            if(!mm_yyyy_labels.includes(mm_yyyy)){\r\n                mm_yyyy_labels.push(mm_yyyy)\r\n            }\r\n        }))\r\n\r\n        //Build the finalData object\r\n        finalData =  {\r\n            labels : Object.keys(tempData),\r\n            datasets: [\r\n                    {\r\n                    label: 'Number of website loadings',\r\n                    data: datasets,\r\n                    backgroundColor: 'transparent'\r\n                    }\r\n                ]\r\n        }     \r\n        this.setState({ data: finalData,\r\n                        tempData: tempData,\r\n                        mm_yyyy_labels: mm_yyyy_labels,\r\n                        selectedMonth: mm_yyyy_labels[0],\r\n                        loading: false,                  \r\n                         statsUserConnectionFilter: 'general',\r\n                         showUserConnectionFilterByMonthList: false\r\n                    }, () => console.log(mm_yyyy_labels))\r\n    }\r\n\r\n    render() {\r\n        const {data, mm_yyyy_labels, loading, filter, selectedMonth} = this.state;\r\n\r\n        let statsUserConnection = <div>loading</div>\r\n        if(!loading){\r\n            statsUserConnection = (\r\n                <section className=\"stats__section\">\r\n                    <Title title=\"Website loadings\"/>\r\n                    <div className=\"stats__userConnection__container\">  \r\n                        <div className=\"stats__userConnection__filter\">\r\n                            <h2 className=\"stats__userConnection__filter__title\">Filtre</h2>\r\n                            <ul className=\"stats__userConnection__filter__list\">\r\n\r\n                                <li className={`stats__userConnection__filter__list__item\r\n                                            ${filter === 'general' ? 'active': ''}`}\r\n                                    onClick={() => this.selectFilterHandler('general')}>\r\n                                        general\r\n                                </li>\r\n\r\n                                <li className={`stats__userConnection__filter__list__item\r\n                                            ${filter === 'month' ? 'active': ''}`}\r\n                                    onClick={() => this.selectFilterHandler('month')}>\r\n                                    <div className=\"stats__userConnection__filter__list__item__key\">Par mois</div>\r\n                                    <div className=\"stats__userConnection__filter__list__item__value\">{MONTH_TABLE[selectedMonth.split('-')[0] - 1].slice(0, 3)} {selectedMonth.split('-')[1]}</div>\r\n                                    <ul className={`stats__userConnection__filter__byMonthList\r\n                                                    ${filter === 'month'  ? 'shown' : ''}`}>\r\n                                        {mm_yyyy_labels.map(label => (\r\n                                            <li key={label}\r\n                                                onClick={() => this.selectUsersConnectionFilterByMonth(label)} \r\n                                                className={`stats__userConnection__filter__byMonthList__item\r\n                                                            ${selectedMonth === label ? 'active' : ''}`}>\r\n                                                {MONTH_TABLE[label.split('-')[0] - 1].slice(0, 3)} {label.split('-')[1]}\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </li>\r\n                            </ul>\r\n                        </div>     \r\n                    \r\n                        <div className=\"stats__userConnection__chartContainer\">\r\n                            <Line \r\n                                options={{\r\n                                    responsive: true,\r\n                                    scales: {\r\n                                        yAxes: [{\r\n                                            ticks: {\r\n                                                beginAtZero: true,\r\n                                                stepSize: 1\r\n                                            }\r\n                                        }]\r\n                                    }\r\n                                }}\r\n                                data={data}\r\n                            />  \r\n                        </div>   \r\n                    </div>\r\n                </section>\r\n            )\r\n        }\r\n\r\n        return statsUserConnection\r\n    }\r\n}\r\n\r\n\r\nexport default UserConnection;\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { daysInMonth } from '../../../utilities/daysInMonth';\r\nimport {MONTH_TABLE } from '../../../utilities/monthTable';\r\nimport Title from \"../../../components/title/Title\";\r\n\r\nclass UserConnection extends Component {\r\n    state = {\r\n        data: {\r\n            labels: [],\r\n            datasets: []\r\n        },\r\n        tempData: null,\r\n        mm_yyyy_labels: [],\r\n        loading: true,\r\n        filter: 'general',\r\n        selectedMonth: null,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.selectUsersConnectionFilterGeneral()\r\n    }\r\n\r\n    selectFilterHandler = filter => {\r\n        if(filter === 'general'){\r\n            this.setState({ filter}, () => this.selectUsersConnectionFilterGeneral())\r\n            \r\n        }\r\n\r\n        if(filter === 'month'){\r\n            this.setState({ filter}, () => this.selectUsersConnectionFilterByMonth())\r\n        }\r\n    }\r\n\r\n    selectUsersConnectionFilterByMonth = monthAndYear => {\r\n        //Check if we have an argument, if not use the state which has been initialized when componentDidMount\r\n        if(!monthAndYear){\r\n            monthAndYear = this.state.selectedMonth\r\n        } \r\n\r\n        //Count the number of day in the month\r\n        let month = monthAndYear.split('-')[0];\r\n        let year = monthAndYear.split('-')[1];\r\n        let daysInMonthCounter = daysInMonth( parseInt(month), parseInt(year));\r\n\r\n        //Built the full date for each day of the month\r\n        let fullDatelabels = [];\r\n        let day;\r\n        for(day = 1; day < daysInMonthCounter + 1; day++){\r\n            if(day < 10){\r\n                day=`0${day}`\r\n            }\r\n            fullDatelabels.push(`${day}-${month}-${year}`)\r\n        }\r\n\r\n        let tempData = {};\r\n\r\n        Object.keys(this.state.tempData).forEach(date => {\r\n            if(`${date.split('-')[1]}-${date.split('-')[2]}` === monthAndYear){\r\n                tempData[date] = this.state.tempData[date]\r\n            }\r\n        })\r\n\r\n        let datasets = [];\r\n        fullDatelabels.forEach(label => {\r\n            if(Object.keys(tempData).includes(label)){\r\n                datasets = [...datasets, tempData[label].length]\r\n            }else{\r\n                datasets = [...datasets, 0]\r\n            }\r\n        })\r\n\r\n        let labels = [];\r\n        fullDatelabels.forEach(label => {\r\n            labels.push(label.split('-')[0])\r\n        })\r\n\r\n        let finalData = {\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: `Number of connected users - ${MONTH_TABLE[month - 1]} ${year}`,\r\n                        data: datasets,\r\n                        backgroundColor: 'transparent'\r\n                    }\r\n                ]\r\n        }          \r\n        this.setState({ data: finalData, selectedMonth: monthAndYear})\r\n \r\n    }\r\n\r\n\r\n    selectUsersConnectionFilterGeneral = () => {   \r\n        let tempData = {}; // to manipulate the data\r\n        let finalData = {} //to send the final value to the chart\r\n        //Storing all the connection dataset in the data array\r\n       \r\n        let data = [];\r\n        this.props.stats.forEach(userStat => {\r\n            userStat.connection.forEach(connection => {\r\n                connection = {\r\n                    ...connection,\r\n                    userId: userStat._id\r\n                }\r\n                data.push(connection)\r\n            })\r\n        })\r\n        //Creating the full date for each connection and storing it in the fullDate array\r\n        let fullDateArray = [];\r\n        \r\n        data.forEach(i => {\r\n            let day = i.start.split('-')[0];\r\n            let month = i.start.split('-')[1];\r\n            let year = i.start.split('-')[2];\r\n            let x = new Date(`${month}-${day}-${year}`);\r\n            fullDateArray.push(x)\r\n        })\r\n        //Sorting the date from oldest to newest\r\n        fullDateArray = fullDateArray.sort( (a, b) => {\r\n            return a > b ? 1 : a < b ? -1 : 0\r\n        })\r\n\r\n        //Format the sorted date in dd-mm-yyyy and store the result in the sortedShortDateArray\r\n        let sortedShortDateArray = [];\r\n        fullDateArray.forEach(i => {\r\n            let day = i.getDate()\r\n            let month = i.getMonth() + 1;\r\n            let year = i.getFullYear();\r\n            if(day < 10){\r\n                day = `0${day}`;\r\n            }\r\n\r\n            if(!sortedShortDateArray.includes(`${day}-${month}-${year}`)){\r\n                sortedShortDateArray.push(`${day}-${month}-${year}`)\r\n            }\r\n            \r\n        })\r\n\r\n       sortedShortDateArray.forEach(date => {\r\n           tempData[date] = []\r\n       })\r\n\r\n        data.forEach(i => {\r\n            let date = i.start.split(' ')[0];\r\n            let userId = i.userId; \r\n            Object.keys(tempData).forEach(tempDataKey => {\r\n                if(tempDataKey === date && !tempData[tempDataKey].includes(userId)){\r\n                    tempData[tempDataKey].push(userId)\r\n                }\r\n            })\r\n        })\r\n   \r\n        let datasets = [];\r\n        Object.keys(tempData).forEach(date => {\r\n            datasets = [...datasets, tempData[date].length]\r\n        })\r\n\r\n       \r\n        //Build the finalData object\r\n        finalData =  {\r\n            labels : Object.keys(tempData),\r\n            datasets: [\r\n                    {\r\n                    label: 'Number of connected users',\r\n                    data: datasets,\r\n                    backgroundColor: 'transparent'\r\n                    }\r\n                ]\r\n         }  \r\n\r\n        let mm_yyyy_labels = [];\r\n        (Object.keys(tempData).forEach(i => {\r\n            let mm_yyyy = `${i.split('-')[1]}-${i.split('-')[2]}`\r\n            if(!mm_yyyy_labels.includes(mm_yyyy)){\r\n                mm_yyyy_labels.push(mm_yyyy)\r\n            }\r\n        }))\r\n\r\n        this.setState({ data: finalData,\r\n                        tempData: tempData,\r\n                        mm_yyyy_labels: mm_yyyy_labels,\r\n                        selectedMonth: mm_yyyy_labels[0],\r\n                        loading: false,                  \r\n                         statsUserConnectionFilter: 'general',\r\n                         showUserConnectionFilterByMonthList: false\r\n                    })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {data, mm_yyyy_labels, loading, filter, selectedMonth} = this.state;\r\n\r\n        let statsUserConnection = <div>loading</div>\r\n        if(!loading){\r\n            statsUserConnection = (\r\n                <section className=\"stats__section\">\r\n                    <Title title=\"Connected users\"/>\r\n                    <div className=\"stats__userConnection__container\">  \r\n                        <div className=\"stats__userConnection__filter\">\r\n                            <h2 className=\"stats__userConnection__filter__title\">Filtre</h2>\r\n                            <ul className=\"stats__userConnection__filter__list\">\r\n                                <li className={`stats__userConnection__filter__list__item\r\n                                            ${filter === 'general' ? 'active': ''}`}\r\n                                    onClick={() => this.selectFilterHandler('general')}>\r\n                                        general\r\n                                </li>\r\n                                <li className={`stats__userConnection__filter__list__item\r\n                                            ${filter === 'month' ? 'active': ''}`}\r\n                                    onClick={() => this.selectFilterHandler('month')}>\r\n                                    <div className=\"stats__userConnection__filter__list__item__key\">Par mois</div>\r\n                                    <div className=\"stats__userConnection__filter__list__item__value\">{MONTH_TABLE[selectedMonth.split('-')[0] - 1].slice(0, 3)} {selectedMonth.split('-')[1]}</div>\r\n                                    <ul className={`stats__userConnection__filter__byMonthList\r\n                                                    ${filter === 'month'  ? 'shown' : ''}`}>\r\n                                        {mm_yyyy_labels.map(label => (\r\n                                            <li key={label}\r\n                                                onClick={() => this.selectUsersConnectionFilterByMonth(label)} \r\n                                                className={`stats__userConnection__filter__byMonthList__item\r\n                                                            ${selectedMonth === label ? 'active' : ''}`}>\r\n                                                {MONTH_TABLE[label.split('-')[0] - 1].slice(0, 3)} {label.split('-')[1]}\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </li>\r\n                            </ul>\r\n                        </div>                        \r\n                        <div className=\"stats__userConnection__chartContainer\">\r\n                            <Line \r\n                                options={{\r\n                                    responsive: true,\r\n                                    scales: {\r\n                                        yAxes: [{\r\n                                            ticks: {\r\n                                                beginAtZero: true,\r\n                                                stepSize: 1\r\n                                            }\r\n                                        }]\r\n                                    }\r\n                                }}\r\n                                data={data}\r\n                            />  \r\n                        </div>   \r\n                    </div>\r\n                </section>\r\n            )\r\n        }\r\n\r\n        return statsUserConnection\r\n    }\r\n}\r\n\r\n\r\nexport default UserConnection;\r\n","import React, { Component , Fragment} from 'react';\r\nimport Loader from '../../../components/loader/Loader';\r\nimport Button from '../../../components/button/Button';\r\nimport Product from '../../../components/product/Product';\r\nimport Title from '../../../components/title/Title';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nclass FavoriteProducts extends Component {\r\n    state = {\r\n        data : null,\r\n        loading: true,\r\n        showBrandsData: [],\r\n        maxFollowedProducts: 0\r\n    }\r\n\r\n    componentDidMount(){\r\n        let stats= this.props.stats;\r\n        let sortedBrands = [];\r\n        for(let brand in stats){\r\n            sortedBrands.push([ brand, stats[brand].followers])\r\n        }\r\n        sortedBrands.sort((a, b) => {\r\n            return b[1] - a[1];\r\n        })\r\n        let maxFollowedProducts = sortedBrands[0][1]\r\n        let data = {}; \r\n        sortedBrands.forEach(brandData => {\r\n            let brandName = brandData[0];\r\n            data[brandName] = {\r\n                followers: brandData[1],\r\n                models: {...stats[brandName].models}\r\n            }           \r\n        })\r\n        this.setState({ data, maxFollowedProducts , loading: false})\r\n    }\r\n\r\n    showBrandsDataHandler = brand => {\r\n        let showBrandsData = [];\r\n        if(brand === 'show all'){\r\n            showBrandsData = Object.keys(this.state.data)\r\n        } else {\r\n            if(brand === 'hide all'){\r\n                showBrandsData = [];\r\n            } else {\r\n                if(!this.state.showBrandsData.includes(brand)){\r\n                    showBrandsData = [...this.state.showBrandsData, brand]\r\n                } else {\r\n                    showBrandsData = this.state.showBrandsData.filter( i => i !== brand)\r\n                }\r\n            }\r\n        }          \r\n         this.setState({ showBrandsData })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {data, loading, maxFollowedProducts, showBrandsData} = this.state\r\n        let mostFollowedProducts = this.props.mostFollowedProducts\r\n        let stats = <Loader />;\r\n        if(!loading){\r\n            stats =            \r\n            <Fragment>\r\n                <section className=\"stats__section\">\r\n                    <Title title=\"Favorite Products\">\r\n                        <div className=\"stats__section__title__cta\">\r\n                                <Button color=\"primary\"\r\n                                        onClick={() => this.showBrandsDataHandler('show all')}>\r\n                                    Show\r\n                                </Button>\r\n                                <Button  color=\"primary\"\r\n                                    onClick={() => this.showBrandsDataHandler('hide all')}>\r\n                                    Hide\r\n                                </Button>\r\n                            </div>\r\n                    </Title>\r\n                    <ul className=\"stats__section__list\">\r\n                            {Object.keys(data).map(brand => (\r\n                                <li className={`stats__section__list__item\r\n                                               ${showBrandsData.includes(brand) ? 'showList': ''}`}\r\n                                    key={brand}>                       \r\n                                    <div className=\"stats__section__list__item__brandContainer\"\r\n                                         onClick={() => this.showBrandsDataHandler(brand)}>\r\n                                        <div className=\"stats__section__list__item__brand\">\r\n                                            {brand}\r\n                                        </div>\r\n                                        <div className=\"stats__section__list__item__viewBar\">\r\n                                            <div className=\"stats__section__list__item__viewBar__inner\"\r\n                                                 style={{ width: `${(data[brand].followers / maxFollowedProducts) * 100}%`}}\r\n                                                >\r\n                                                </div>\r\n                                        </div>\r\n                                        <div className=\"stats__section__list__item__viewCounter\">\r\n                                            {data[brand].followers}\r\n                                        </div>\r\n                                    </div>                                   \r\n                                    <ul className=\"stats__section__list__item__modelsList\">\r\n                                        {Object.keys(data[brand].models).map(model => (\r\n                                            <li key={model} className=\"stats__section__list__item__modelsList__item\">\r\n                                                <div className=\"stats__section__list__item__modelsList__item__model\">{model}</div> \r\n                                                <div className=\"stats__section__list__item__modelsList__item__viewBar\">\r\n                                                    <div className=\"stats__section__list__item__modelsList__item__viewBar__inner\"\r\n                                                        style={{ width: `${ data[brand].models[model].favoritesCounter / maxFollowedProducts * 100 }%`}}>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"stats__section__list__item__modelsList__item__viewCounter\">\r\n                                                    {data[brand].models[model].favoritesCounter}\r\n                                                </div>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                    \r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                </section>\r\n                <section className=\"stats__section\">\r\n                    <Title title=\"Top favorites\"/>\r\n                        <ul className=\"stats__products__list\">\r\n                            {mostFollowedProducts.map(product => (\r\n                                    <Product\r\n                                            id={product._id}\r\n                                            mainImg={product.general.mainImgUrl}\r\n                                            title={product.general.title}\r\n                                            brand={product.general.brand}\r\n                                            model={product.general.model}\r\n                                            year={product.general.year}\r\n                                            price={product.general.price}\r\n                                            nbKilometers={product.general.nbKilometers}\r\n                                            gazol={product.general.gazol}\r\n                                            transmissionType={product.general.transmissionType}\r\n                                            goToProd={() => {\r\n                                            this.props.setProductRequestedId(product._id);\r\n                                            this.props.history.push(`/inventory/${product._id}`);\r\n                                            }}\r\n                                    />\r\n                                    ))}                    \r\n                        </ul>                          \r\n                </section>\r\n             </Fragment>\r\n        }\r\n\r\n        return stats\r\n    }\r\n}\r\n\r\nexport default withRouter(FavoriteProducts)\r\n","import React, { Component , Fragment } from 'react';\r\nimport Title from '../../../components/title/Title';\r\nimport Button from '../../../components/button/Button';\r\nimport Product from '../../../components/product/Product';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nclass ProductsView extends Component {\r\n    state = {\r\n        showBrandsData: [],   \r\n    }\r\n\r\n    showBrandsDataHandler = brand => {\r\n        let showBrandsData = [];\r\n        if(brand === 'show all'){\r\n            showBrandsData = Object.keys(this.props.productsStats)\r\n        } else {\r\n            if(brand === 'hide all'){\r\n                showBrandsData = [];\r\n            } else {\r\n                if(!this.state.showBrandsData.includes(brand)){\r\n                    showBrandsData = [...this.state.showBrandsData, brand]\r\n                } else {\r\n                    showBrandsData = this.state.showBrandsData.filter( i => i !== brand)\r\n                }\r\n            }\r\n        }     \r\n         this.setState({ showBrandsData })\r\n    }\r\n\r\n    render() {\r\n        const { showBrandsData } = this.state\r\n        let productsStats = this.props.productsStats;\r\n        let maxProductViews = this.props.maxProductViews;\r\n        let mostViewedProducts = this.props.mostViewedProducts\r\n\r\n        return (\r\n            <Fragment>\r\n                <section className=\"stats__section\">\r\n                    <Title title=\" Products views\">\r\n                        <div className=\"stats__section__title__cta\">\r\n                                <Button color=\"primary\"\r\n                                        onClick={() => this.showBrandsDataHandler('show all')}>\r\n                                    Show\r\n                                </Button>\r\n                                <Button  color=\"primary\"\r\n                                    onClick={() => this.showBrandsDataHandler('hide all')}>\r\n                                    Hide\r\n                                </Button>\r\n                            </div>\r\n                    </Title>             \r\n                    <ul className=\"stats__section__list\">\r\n                        {Object.keys(productsStats).map(brand => (\r\n                            <li className={`stats__section__list__item\r\n                                        ${showBrandsData.includes(brand) ? 'showList': ''}`}\r\n                                key={brand}>                       \r\n                                <div className=\"stats__section__list__item__brandContainer\"\r\n                                    onClick={() => this.showBrandsDataHandler(brand)}>\r\n                                    <div className=\"stats__section__list__item__brand\">\r\n                                        {brand}\r\n                                    </div>\r\n\r\n                                    <div className=\"stats__section__list__item__viewBar\">\r\n                                        <div className=\"stats__section__list__item__viewBar__inner\"\r\n                                            style={{ width: `${(productsStats[brand].views / maxProductViews) * 100}%`}}></div>\r\n                                    </div>\r\n                                    <div className=\"stats__productViews__list__item__viewCounter\">\r\n                                        {productsStats[brand].views}\r\n                                    </div>\r\n                                </div>                           \r\n                                <ul className=\"stats__section__list__item__modelsList\">\r\n                                    {Object.keys(productsStats[brand].models).map(model => (\r\n                                        <li key={model} className=\"stats__section__list__item__modelsList__item\">\r\n                                            <div className=\"stats__section__list__item__modelsList__item__model\">{model}</div> \r\n                                            <div className=\"stats__section__list__item__modelsList__item__viewBar\">\r\n                                                <div className=\"stats__section__list__item__modelsList__item__viewBar__inner\"\r\n                                                    style={{ width: `${ productsStats[brand].models[model].viewCounter / maxProductViews * 100 }%`}}>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"stats__section__list__item__modelsList__item__viewCounter\">\r\n                                                {productsStats[brand].models[model].viewCounter}\r\n                                            </div>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                                \r\n                            </li>\r\n                        ))}\r\n                    </ul>                   \r\n                </section>\r\n                <section className=\"stats__section\">\r\n                    <Title title=\"Top views\"/>\r\n                    <ul className=\"stats__products__list\">\r\n                            {mostViewedProducts.map(product => (\r\n                                <Product\r\n                                    id={product._id}\r\n                                    mainImg={product.general.mainImgUrl}\r\n                                    title={product.general.title}\r\n                                    brand={product.general.brand}\r\n                                    model={product.general.model}\r\n                                    year={product.general.year}\r\n                                    price={product.general.price}\r\n                                    nbKilometers={product.general.nbKilometers}\r\n                                    gazol={product.general.gazol}\r\n                                    transmissionType={product.general.transmissionType}\r\n                                    goToProd={() => {\r\n                                    this.props.setProductRequestedId(product._id);\r\n                                    this.props.history.push(`/inventory/${product._id}`);\r\n                                    }}\r\n                            />\r\n                            ))}                    \r\n                    </ul>                          \r\n                </section>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ProductsView)\r\n","import React, { Component} from 'react'\r\nimport './Stats.css';\r\nimport './charts/StatsUserConnectionChart.css'\r\nimport Loader from '../../components/loader/Loader';\r\nimport * as actions from '../../store/actions'\r\nimport { connect} from 'react-redux';\r\n\r\n\r\n//STATS SECTIONS\r\nimport WebsiteLoadings from './charts/UserConnection';\r\nimport ConnectedUsers from './charts/ConnectedUserCounter';\r\nimport FavoriteProducts from './statsSection/FavoriteProducts';\r\nimport ProductsView from  './statsSection/ProductsView';\r\n\r\n\r\n\r\n\r\nclass Stats extends Component {\r\n\r\n    state = {\r\n        productsStats: null,\r\n        maxProductViews: 0,\r\n        loading: true,\r\n        showBrandsData: [],\r\n        activeSection: 'products views',\r\n        userConnectionStats: null,\r\n        mostViewedProducts: null,\r\n        mostFollowedProducts: null       \r\n    }\r\n    componentDidMount(){\r\n        this.fetchProductsStats()\r\n    }\r\n\r\n    fetchProductsStats = () => {\r\n        let url = \"https://africauto.herokuapp.com/stats/products-stats\";\r\n       fetch(url, {\r\n           headers: {\r\n               \"Content-Type\": \"application/json\"\r\n           },\r\n       })\r\n       .then(res => {\r\n            if (res.status !== 200) {\r\n            throw new Error(\"Failed to fetch users\");\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            let maxProductViews = 0;\r\n            Object.keys(resData.stats).forEach(brand => {\r\n                if(resData.stats[brand].views > maxProductViews){\r\n                    maxProductViews = resData.stats[brand].views\r\n                }\r\n            })\r\n            this.setState({\r\n                productsStats: resData.stats,\r\n                mostViewedProducts: resData.mostViewedProducts,\r\n                mostFollowedProducts: resData.mostFollowedProducts,\r\n                maxProductViews: maxProductViews,\r\n                loading: false,\r\n                \r\n           })          \r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    fetchUserConnectionStats = () => {\r\n        let url = \"https://africauto.herokuapp.com/stats/user-connection-stats\";\r\n        fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        })\r\n        .then(res => {\r\n             if (res.status !== 200) {\r\n             throw new Error(\"Failed to fetch users connection stats\");\r\n             }\r\n             return res.json();\r\n         })\r\n         .then(resData => {\r\n            let stats = resData.stats;\r\n            this.setState({  userConnectionStats: stats, loading: false})\r\n         })\r\n         .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    activSectionToggler = section => {\r\n        const {userConnectionStats} = this.state\r\n        if(section === 'website loadings' && !userConnectionStats || section === 'connected users' && !userConnectionStats){\r\n            this.setState({ loading: true, activeSection: section}, () => this.fetchUserConnectionStats()); \r\n        } else {\r\n            this.setState({ activeSection: section})\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        const {maxProductViews, productsStats, loading, activeSection, userConnectionStats, mostViewedProducts, mostFollowedProducts} = this.state;\r\n        let stats;\r\n\r\n        if(loading){\r\n            stats = <Loader />\r\n        }\r\n        if(!loading && activeSection === 'products views'){\r\n            stats = ( <ProductsView \r\n                        productsStats={productsStats} \r\n                        maxProductViews={maxProductViews}\r\n                        setProductRequestedId={this.props.setProductRequestedId}\r\n                        mostViewedProducts={mostViewedProducts}\r\n                      />)\r\n        } \r\n        if(!loading && activeSection === \"favorite products\"){\r\n            stats = <FavoriteProducts stats={productsStats}\r\n                                      mostFollowedProducts={mostFollowedProducts}\r\n                                      setProductRequestedId={this.props.setProductRequestedId}/>\r\n        }\r\n        if(!loading && activeSection === 'website loadings'){\r\n            stats = <WebsiteLoadings stats={userConnectionStats}/>\r\n        }\r\n\r\n        if(!loading && activeSection === 'connected users'){\r\n            stats = <ConnectedUsers stats={userConnectionStats}/>\r\n        }\r\n        \r\n        return (\r\n            <div className=\"stats\">\r\n                <nav className=\"stats__nav\">\r\n                    <ul className=\"stats__nav__list\">\r\n                        <li className={`stats__nav__list__item ${activeSection === 'products views' ? 'active' : ''}`}\r\n                            onClick={() => this.activSectionToggler('products views')}>\r\n                            Products Views\r\n                        </li>\r\n                        <li className={`stats__nav__list__item ${activeSection === 'favorite products' ? 'active' : ''}`}\r\n                            onClick={() => this.activSectionToggler('favorite products')}>\r\n                            Favorite Products\r\n                        </li>\r\n                        \r\n                        <li className={`stats__nav__list__item ${activeSection === 'website loadings' ? 'active' : ''}`}\r\n                        onClick={() => this.activSectionToggler('website loadings')}>\r\n                            Website loadings\r\n                        </li>\r\n                        <li className={`stats__nav__list__item  ${activeSection === 'connected users' ? 'active' : ''}`}\r\n                        onClick={() => this.activSectionToggler('connected users')}>\r\n                            Connected users\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n               {stats}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setProductRequestedId: (prodId) =>dispatch(actions.setRequestedProductId(prodId)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Stats);","export const INITIAL_FORM = {\r\n    general : {\r\n        title: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'title',\r\n            placeholder: 'title',\r\n            value: ''\r\n        },\r\n\r\n        brand: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'brand',\r\n            placeholder: 'brand',\r\n            value: ''\r\n        },\r\n\r\n        model: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'model',\r\n            placeholder: 'model',\r\n            value: ''\r\n        },\r\n\r\n        year: {\r\n            valueType: 'text',\r\n            control: 'select',\r\n            label: 'year',\r\n            placeholder: 'year',\r\n            value: '2008',\r\n            options: ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']\r\n        },\r\n\r\n        price: {\r\n            valueType: 'number',\r\n            control: 'input',\r\n            label: 'price',\r\n            placeholder: 'price',\r\n            value: 0\r\n        },\r\n        bodyType: {\r\n            valueType: 'text',\r\n            control: 'select',\r\n            label: 'body type',\r\n            placeholder: 'body type',\r\n            value: 'sedan',\r\n            options: ['sedan','coupe','hatchBack','SUV','crossover','minivan','pickup']\r\n        },\r\n            \r\n\r\n        nbKilometers: {\r\n            valueType: 'number',\r\n            control: 'input',\r\n            label: 'Nb km',\r\n            placeholder: 'kilometers',\r\n            value: 0\r\n        },\r\n        \r\n        gazol: {\r\n            valueType: 'text',\r\n            control: 'select',\r\n            label: 'fuel',\r\n            placeholder: 'fuel',\r\n            value: 'essence',\r\n            options: ['essence', 'diesel']\r\n        },\r\n\r\n        yearOfRelease: {\r\n            valueType: 'text',\r\n            control: 'select',\r\n            label: 'year of release',\r\n            placeholder: 'year of release',\r\n            value: '2008',\r\n            options: ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']\r\n        },\r\n\r\n        nbOwners: {\r\n            valueType: 'number',\r\n            control: 'select',\r\n            label: 'nb owners',\r\n            placeholder: 'number of owners',\r\n            value: 0,\r\n            options: [0, 1, 2, 3, 4, 5, 6]\r\n        },\r\n\r\n        serialNumber: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'serial number',\r\n            placeholder: 'serial number',\r\n            value: ''\r\n        },\r\n\r\n        generalState: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'general state',\r\n            placeholder: 'general state',\r\n            value: ''\r\n        },\r\n\r\n        publicity: {\r\n            valueType: 'number',\r\n            control: 'select',\r\n            label: 'publicity',\r\n            placeholder: 'true',\r\n            value: 'true',\r\n            options: ['true', 'false']\r\n        },\r\n\r\n        homePage: {\r\n            valueType: 'number',\r\n            control: 'select',\r\n            label: \"home page\",\r\n            placeholder: 'true',\r\n            value: 'true',\r\n            options: ['true', 'false']\r\n        },\r\n    },\r\n\r\n    supplier : {\r\n        reference: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'reference',\r\n            placeholder: 'reference',\r\n            value: ''\r\n        },\r\n\r\n        supplierPrice : {\r\n            valueType: 'number',\r\n            control: 'input',\r\n            label: 'supplier price',\r\n            placeholder: 'supplier price',\r\n            value: 0\r\n        },\r\n\r\n        supplierName : {\r\n            valueType: 'text',\r\n            control: 'select',\r\n            label: 'supplier',\r\n            placeholder: 'supplier',\r\n            value: '',\r\n            options: []\r\n        }\r\n\r\n\r\n    },\r\n\r\n    tech : {\r\n        transmissionType : {\r\n            valueType: 'text',\r\n            control: 'select',\r\n            label: 'gear box',\r\n            placeholder: 'gear box',\r\n            value: 'manual',\r\n            options: ['manual', 'automatic']  \r\n        },\r\n\r\n        nbGearRatios : {\r\n            valueType: 'number',\r\n            control: 'select',\r\n            label: 'gear box ratio',\r\n            placeholder: 'gear box ratio',\r\n            value: 5,\r\n            options: [5, 6]  \r\n        },\r\n\r\n        nbCylinders : {\r\n            valueType: 'number',\r\n            control: 'select',\r\n            label: 'nb cylinders',\r\n            placeholder: 'nombre de cylinders',\r\n            value: 2,\r\n            options: [2, 3, 4, 5, 6, 7,8,9,10,11,12]\r\n        },\r\n\r\n        motorSize: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'motor size',\r\n            placeholder: 'motor size',\r\n            value: ''\r\n        },\r\n\r\n        maxSpeed: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'max speed',\r\n            placeholder: 'max speed',\r\n            value: ''\r\n        },\r\n\r\n\r\n\r\n    },\r\n\r\n    design: {\r\n        intColor: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'interior color',\r\n            placeholder: 'interior color',\r\n            value: ''\r\n        },\r\n\r\n        extColor: {\r\n            valueType: 'text',\r\n            control: 'input',\r\n            label: 'exterior color',\r\n            placeholder: 'exterior color',\r\n            value: ''\r\n        },\r\n    }\r\n\r\n    \r\n}\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './FormInput.css';\r\n\r\nconst formInput = props => {\r\n    return (\r\n        <div className={`input ${props.className}`}>\r\n\r\n            \r\n\r\n            {/*-------INPUT VARIATION--------*/}\r\n\r\n\r\n                {/*-----BASIC INPUT--------*/}\r\n                {\r\n                    props.control === 'input' && (\r\n                        <input className=\"input__field\" \r\n                               type={props.type} //text, email, password...\r\n                               id={props.id}\r\n                               required={props.required}\r\n                               value={props.value}\r\n                               placeholder={props.placeholder}\r\n                               autoComplete={props.autoComplete}\r\n                               onChange={e => props.onChange(props.id, e.target.value, props.formType)}\r\n                               />\r\n                    )\r\n                }\r\n\r\n\r\n\r\n                {/*----TEXTAREA INPUT--------*/}\r\n                {\r\n                    props.control === 'textarea' && (\r\n                        <textarea className=\"textarea\"\r\n                            id={props.id}\r\n                            required={props.required}\r\n                            value={props.value}\r\n                            onChange={e => props.onChange(props.id, e.target.value)}\r\n                            />\r\n                    )\r\n                }\r\n\r\n                {\r\n                    props.control === 'select' && (\r\n                        <select id={props.id}\r\n                                required={props.required}\r\n                                onChange={e => props.onChange(props.id, e.target.value)}\r\n                                value={props.value}>\r\n                                \r\n                                {\r\n                                    props.options.map( option => (\r\n                                        <option key={option} value={option}>{option}</option>\r\n                                    ))\r\n                                }\r\n                        </select>\r\n                    )\r\n                }\r\n\r\n                {/*--------INPUT LABEL-----------*/}\r\n            {\r\n                props.label && (\r\n                    <label htmlFor={props.id} className=\"input__label\">{props.label}</label>\r\n                )\r\n            }\r\n            {\r\n                    props.border && (\r\n                        <div className=\"input__border\"></div>\r\n                    )\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default formInput;\r\n","import React from 'react';\r\nimport './FormFeature.css';\r\nimport Input from '../../../../components/formInput/FormInput';\r\nimport Button from '../../../../components/button/Button';\r\n\r\nconst formFeature = props => {\r\n\r\n    let featuresList = props.featuresList;\r\n    return (\r\n        <div className=\"formFeature\">\r\n\r\n            <div className=\"formFeature__add\">\r\n                <Input className=\"add-product__input\"\r\n                    id=\"options\"\r\n                    placeholder=\"ajouter options\"\r\n                    control=\"input\"\r\n                    value={props.value}\r\n                    onChange={props.addFeatureChangeHandler}\r\n                />\r\n                <Button onClick={props.addFeature}\r\n                        color=\"secondary\"\r\n                 >\r\n                    Add\r\n                </Button>\r\n            </div>\r\n\r\n            <ul className=\"formFeature__list\">\r\n                {\r\n                    featuresList.map(i => (\r\n                        <li className=\"formFeature__list__item\" \r\n                            key={i}\r\n                            onClick={() => props.deleteFeature(i)}>\r\n                            {i}\r\n                        </li>\r\n                    ))\r\n                }\r\n            </ul>  \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default formFeature\r\n","import React from 'react';\r\nimport './FilePicker.css';\r\nimport { FilePond, registerPlugin } from \"react-filepond\";\r\nimport * as FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\";\r\nimport \"filepond/dist/filepond.min.css\";\r\n\r\nimport Button from '../../../../components/button/Button';\r\nimport IconSvg from '../../../../utilities/svg/svg';\r\n\r\nregisterPlugin(FilePondPluginImagePreview);\r\n\r\n\r\n\r\nconst filePicker = props => {\r\n\r\n    let productBeingEditedCurrentImages = props.productBeingEditedCurrentImages;\r\n    let selectedImages = props.selectedImages;\r\n    let cancelDeleteImagesAlowed = props.cancelDeleteImagesAlowed\r\n   \r\n\r\n    let filePond;\r\n\r\n    if(props.editingMode === true){\r\n\r\n        filePond = (\r\n            <div>\r\n                <h3 className=\"file-picker__title\">New images</h3>\r\n                <FilePond className=\"add-product__filepond\"\r\n                          allowMultiple={true}\r\n                          onupdatefiles={props.filesHandler}                 \r\n                />\r\n            </div>\r\n        )    \r\n    } else {\r\n        filePond = (\r\n        <FilePond className=\"add-product__filepond\"\r\n                    allowMultiple={true}\r\n                    onupdatefiles={props.filesHandler}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"file-picker\">\r\n\r\n            { props.editingMode === true && (\r\n                    <div className=\"file-picker__currentImages\">\r\n                        <h3 className=\"file-picker__title\">Current images</h3>\r\n                        <ul className=\"file-picker__currentImages__list\">\r\n                            {\r\n                                productBeingEditedCurrentImages.map( i => (\r\n\r\n\r\n                                    <div className=\"file-picker__currentImages__list__item\"\r\n                                        onClick={() => props.selectDeleteHandler(i.url)}>\r\n                                        {\r\n                                            i.checked === true ? <IconSvg icon=\"checked\"/> : null\r\n                                        }         \r\n                                        <img src={i.url} alt=\"current images\" className=\"file-picker__currentImages__list__item__img\" key={i.url}/>\r\n                                    </div>\r\n\r\n                                   \r\n                                ))\r\n                            }\r\n                        </ul>\r\n                        <div className=\"file-picker__currentImages__controller\">\r\n\r\n                            {\r\n                                selectedImages.length !== 0 && (\r\n                                    <Button onClick={props.onDeleteCurrentImages}>\r\n                                         Delete\r\n                                    </Button>\r\n                                )\r\n                            }\r\n\r\n                            {\r\n                                cancelDeleteImagesAlowed === true && selectedImages.length !== 0 && (\r\n                                    <Button onClick={props.onCancelDeleteCurrentImages}>\r\n                                        Cancel\r\n                                    </Button>\r\n                                )\r\n                            }\r\n                           \r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n            }\r\n\r\n            {filePond}\r\n             \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default filePicker\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyARcDQEFmrLLL8WHVxiPDf2Pw-JZ2pULPs\",\r\n    authDomain: \"africauto-motors.firebaseapp.com\",\r\n    databaseURL: \"https://africauto-motors.firebaseio.com\",\r\n    projectId: \"africauto-motors\",\r\n    storageBucket: \"africauto-motors.appspot.com\",\r\n    messagingSenderId: \"325187327572\",\r\n    appId: \"1:325187327572:web:a31ba21828ea63225ebfc1\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const storage = firebase.storage();\r\n\r\nexport {\r\n    storage, firebase as default\r\n}","import React, { Component } from \"react\";\r\nimport \"./AddProduct.css\";\r\nimport uuid from 'uuid/v4';\r\n\r\n\r\nimport { INITIAL_FORM } from './forms/formGeneral'\r\n\r\nimport FormFeature from './forms/formFeature/FormFeature';\r\nimport Filepicker from './forms/filePicker/FilePicker';\r\nimport { storage } from \"../../firebase\";\r\nimport Input from \"../../components/formInput/FormInput\";\r\nimport Button from '../../components/button/Button';\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions';\r\nimport Loader from '../../components/loader/Loader';\r\n\r\nclass AddProduct extends Component {\r\n\r\n  state = {\r\n    images: [],\r\n    urlImages: [],\r\n    albumId: '',\r\n    loading: false,\r\n\r\n    featuresList: [],\r\n    featureBeingAdded: '',\r\n    showImage: false,\r\n\r\n    productBeingEdited: {},\r\n    productBeingEditedID: '',\r\n    productBeingEditedCurrentUrlImages: [], \r\n\r\n    productBeingEditedCurrentUrlImagesWithChekedOption: [],\r\n    selectedImages: [],\r\n    cancelImageDeletingAllowed: false,\r\n\r\n    initialForm: null,\r\n    requestDataSet: null\r\n\r\n  }; \r\n\r\n  componentDidMount() {   \r\n    this.preparesDataHandler()\r\n  }\r\n\r\n  preparesDataHandler = ()=> {\r\n    /*------INITIALIZE THE SUPPLIER SELECT OPTIONS-----*/\r\n      let suppliers = this.props.suppliers\r\n      let suppliersName = [];\r\n      suppliers.forEach(supplier => {\r\n        suppliersName.push(supplier.name)\r\n      })\r\n\r\n    /*----INITIALIZE THE FORM--------------*/\r\n\r\n     let initialForm = {}\r\n     Object.keys(INITIAL_FORM).forEach(dataType => {\r\n          initialForm = {\r\n            ...initialForm,\r\n            [dataType] : {\r\n              ...INITIAL_FORM[dataType],\r\n\r\n            } \r\n          }\r\n     })\r\n\r\n    /*----INITIALIZE THE REQUEST DATA SET OBJECT WHICH WILL BE USED TO STORE THE FORM'S VALUE*/\r\n\r\n    let requestDataSet = {};\r\n    Object.keys(initialForm).forEach( dataType => {\r\n          Object.keys(initialForm[dataType]).forEach(data => {\r\n              requestDataSet = {\r\n                ...requestDataSet,\r\n                [data] : initialForm[dataType][data].value\r\n              }\r\n          })\r\n      })\r\n\r\n    initialForm.supplier.supplierName.options = suppliersName;\r\n  \r\n\r\n  /*------CHECKING MODE------------*/\r\n \r\n   if(this.props.editingMode === false){  \r\n      //ADDING NEW PRODUCT\r\n      requestDataSet.supplierName = suppliersName[0];\r\n      return  this.setState({ initialForm : initialForm, requestDataSet: requestDataSet, loading: false})    \r\n    } else {\r\n      //UDPATING AN EXISTING PRODUCT\r\n          let product = this.props.productBeingEdited;\r\n\r\n          console.log(product);\r\n\r\n          // Setting all the key value pairs for the request data set object\r\n          Object.keys(product).forEach( dataType => {\r\n            Object.keys(product[dataType]).forEach(data => {\r\n              Object.keys(requestDataSet).forEach(reqData => {\r\n                if(data === reqData){\r\n                  requestDataSet = {\r\n                    ...requestDataSet,\r\n                    [reqData] : product[dataType][data]\r\n                  }\r\n                }\r\n              })\r\n            })\r\n          })\r\n\r\n          //Setting manually the supplier name as the identifier doesn't match\r\n          requestDataSet = {\r\n            ...requestDataSet,\r\n            price: product.general.price,\r\n            supplierName: product.supplier.info.name\r\n          }\r\n\r\n          //We need to transform each url (string) into an object with the checked property => We need it to select all the images we want to delete later\r\n          let productBeingEditedCurrentUrlImagesWithChekedOption = [];\r\n          product.imageUrls.forEach( url => {\r\n            productBeingEditedCurrentUrlImagesWithChekedOption = [...productBeingEditedCurrentUrlImagesWithChekedOption, {url: url, checked: false}]\r\n          })\r\n\r\n          console.log(requestDataSet)\r\n\r\n          this.setState({ \r\n            initialForm : initialForm, \r\n            requestDataSet: requestDataSet,\r\n            albumId: product.albumId,\r\n            productBeingEditedCurrentUrlImages: product.imageUrls,\r\n            productBeingEditedID: product._id,\r\n            featuresList: product.features,\r\n            productBeingEditedCurrentUrlImagesWithChekedOption: productBeingEditedCurrentUrlImagesWithChekedOption,\r\n            loading: false,              \r\n          })\r\n    } \r\n}\r\n\r\n\r\n  componentWillUnmount(){\r\n    console.log(['UNMOUNTED'])\r\n    if(this.props.editingMode === true){\r\n      this.props.toggleEditingMode()\r\n      this.props.setProductRequestedId('')\r\n      this.props.setProductRequested({})\r\n    }\r\n  }\r\n\r\n  inputChangeHandler = (input, value) => {\r\n      this.setState( prevState => ({\r\n        ...prevState,\r\n        requestDataSet : {\r\n          ...prevState.requestDataSet,\r\n          [input]: value\r\n        }\r\n      })) \r\n  };\r\n\r\n  senData = () => {     \r\n    const { featuresList, urlImages,requestDataSet, images, selectedImages } = this.state;\r\n    \r\n    let suppliers = this.props.suppliers;\r\n    let supplierName = requestDataSet.supplierName;\r\n    let supplierId = suppliers.find(i => i.name === supplierName)._id\r\n    \r\n    const formData = new FormData();\r\n    let method;\r\n    let url;\r\n\r\n    \r\n    if(this.props.editingMode === false){\r\n        Object.keys(requestDataSet).map(  data => formData.append(`${data}`, `${requestDataSet[data]}`));\r\n        formData.append('features', featuresList);\r\n        formData.append('imageUrls', urlImages);\r\n        formData.append('albumId', this.state.albumId);\r\n        formData.append('supplierId', supplierId)\r\n        method = 'POST';\r\n        url = \"https://africauto.herokuapp.com/admin/add-product\";\r\n    }\r\n\r\n    if(this.props.editingMode === true){\r\n\r\n      let productBeingEditedUrlImages = [];\r\n\r\n      if(images.length === 0 && selectedImages.length === 0){\r\n        // we don't need need to add neither delete images\r\n        productBeingEditedUrlImages = this.state.productBeingEditedCurrentUrlImages\r\n      } else {\r\n          \r\n          if(images.length !== 0 && selectedImages.length === 0){\r\n            //we need to add new imgUrls but we don't need to delete\r\n            productBeingEditedUrlImages = [...this.state.productBeingEditedCurrentUrlImages, ...this.state.urlImages]\r\n          } \r\n\r\n          if(  images.length === 0 && selectedImages.length !== 0){\r\n            //We need to delete the images but we dont need to add new ones\r\n            productBeingEditedUrlImages = this.state.productBeingEditedCurrentUrlImages.filter( url => !selectedImages.includes(url) )\r\n          }\r\n\r\n          if(images.length !== 0 && selectedImages.length !== 0){\r\n            //We need to upload and delete images at the same time\r\n            productBeingEditedUrlImages = [...this.state.productBeingEditedCurrentUrlImages, ...this.state.urlImages].filter( url => !this.state.selectedImages.includes(url) )\r\n          }\r\n\r\n      }\r\n\r\n        Object.keys(requestDataSet).map(  data => formData.append(`${data}`, `${requestDataSet[data]}`));\r\n        formData.append('features', featuresList);\r\n        formData.append('albumId', this.state.albumId);\r\n        formData.append('imageUrls', productBeingEditedUrlImages);\r\n        formData.append('productBeingEditedID', this.state.productBeingEditedID );\r\n        formData.append('supplierId', supplierId)\r\n\r\n        method = 'PUT';\r\n        url = \"https://africauto.herokuapp.com/admin/edit-product\"\r\n    }\r\n\r\n    fetch(url, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      method: method,\r\n      body: JSON.stringify(Object.fromEntries(formData))\r\n    })\r\n      .then(res => {\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          throw new Error(\"Creating a product failed\");\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(resData => {\r\n        this.props.setProductRequested(resData.product)\r\n        this.props.setProductRequestedId(resData.product._id)\r\n        this.props.addTotalProducts()\r\n        return resData\r\n      })\r\n      .then( resData => {\r\n        if(this.props.editingMode === true){  \r\n          this.props.toggleEditingMode()     \r\n          this.props.history.push(`/inventory/${this.props.productBeingEditedId}?brand=${resData.product.brand}&model=${resData.product.model}&price=${resData.product.price}`)\r\n        } else {\r\n\r\n          this.props.history.push(`/inventory/${resData.product._id}?brand=${resData.product.brand}&model=${resData.product.model}&price=${resData.product.price}`)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({loading: false})\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  uploadHandler = async e => {\r\n    e.preventDefault();\r\n    this.setState({loading: true})\r\n\r\n    const { images } = this.state;\r\n\r\n    let albumId;\r\n\r\n    if(this.props.editingMode === true){\r\n      albumId = this.state.albumId\r\n    } else {\r\n      albumId = uuid()\r\n      this.setState({ albumId: albumId})\r\n    }\r\n\r\n    if(images.length !== 0){\r\n      try {\r\n        const urls = await Promise.all( images.map(image => \r\n            new Promise((resolve, reject) => {\r\n                const uploadTask = storage.ref(`${albumId}--${image.name}`).put(image);\r\n                uploadTask.on('state_changed', \r\n                    (snapshot) => {\r\n                        // progress function....\r\n                    },          \r\n                    reject, //REJECTED                \r\n                    () => {\r\n                    //complete function...\r\n                    storage.ref(`${albumId}--${image.name}`)\r\n                        .getDownloadURL()\r\n                        .then(url => {\r\n                            let imgStored = this.state.urlImages;              \r\n                            imgStored.push(url);\r\n\r\n                            this.setState({\r\n                                urlImages: imgStored\r\n                            })\r\n                            resolve(url)\r\n                         })\r\n                })\r\n            })\r\n        ))        \r\n        \r\n        //check if we need to delete images after uploading images\r\n\r\n        if(this.state.selectedImages.length === 0 ){\r\n          //we need to send images but no images to delete\r\n          this.senData(); \r\n        } \r\n\r\n        if( this.state.selectedImages.length !== 0){\r\n          // after sending images, we need to delete as well before sending data\r\n          this.deleteImagesInFirebase()\r\n        }\r\n        \r\n        return urls;\r\n      }\r\n      catch (err){\r\n          this.setState({loading: false})\r\n          console.log(err)\r\n          \r\n      }   \r\n    } \r\n    \r\n    /*------NO IMAGES TO SEND TO FIREBASE-------*/\r\n    \r\n    else {\r\n\r\n        //check if we need to delete\r\n        if(this.state.selectedImages !== 0){\r\n          this.deleteImagesInFirebase()\r\n        } else {\r\n          this.senData();\r\n        }\r\n        \r\n    }  \r\n    \r\n  };\r\n\r\n  deleteImagesInFirebase =  async () => {\r\n\r\n    const { selectedImages, albumId } = this.state;\r\n\r\n    try {\r\n      const imagesDeleted = await Promise.all(\r\n\r\n        selectedImages.map(imgUrl => \r\n          \r\n          new Promise( (resolve, reject) => {\r\n            let first = imgUrl.indexOf('--');\r\n            let end = imgUrl.indexOf('?');\r\n            let imageName = imgUrl.substr(first + 2, (end - first - 2));\r\n            let imageRef = storage.ref(`${albumId}--${imageName}`);\r\n\r\n            imageRef.delete()\r\n            .then( () => resolve(imgUrl))\r\n            .catch( err => reject)\r\n          })\r\n        )\r\n    )\r\n\r\n    this.senData()\r\n\r\n    return imagesDeleted\r\n    }\r\n\r\n    catch (err){\r\n      this.setState({loading: false})\r\n      console.log(err)\r\n    } \r\n  }\r\n\r\n  filesHandler = files => {\r\n    let images = [];\r\n    files.forEach(file => {\r\n      let a = file.file;\r\n      images = [...images, a];\r\n    });\r\n    this.setState({\r\n      images: images\r\n    });\r\n  };\r\n\r\n\r\n  showImageFormHandler = e => {\r\n      e.preventDefault();\r\n      window.scrollTo(0, 0);\r\n    if(this.state.showImage === false){\r\n        this.setState({showImage: true});\r\n    }  \r\n  }\r\n\r\n  hideImageFormHandler = e => {\r\n     e.preventDefault();\r\n     window.scrollTo(0, 0);\r\n      if(this.state.showImage === true){\r\n        this.setState({showImage: false});\r\n      }\r\n  }\r\n\r\n  addFeatureChangeHandler = (input, value) => {\r\n        this.setState({featureBeingAdded: value})\r\n  }\r\n\r\n  addFeature = e => {\r\n      e.preventDefault();\r\n      const {featureBeingAdded, featuresList} = this.state;\r\n      let newList = [...featuresList, featureBeingAdded];\r\n      this.setState({featuresList: newList})\r\n  }\r\n\r\n  deleteFeature = i => {\r\n      let {featuresList} = this.state;\r\n      let newList = featuresList.filter(el => el !== i);\r\n      this.setState({featuresList: newList})\r\n  }\r\n\r\n\r\n  selectDeleteHandler = urlSelected => {\r\n\r\n    const  data  = this.state.productBeingEditedCurrentUrlImagesWithChekedOption;\r\n\r\n    let selectedImages = this.state.selectedImages;\r\n\r\n    if(selectedImages.length !== 0){\r\n\r\n        if(selectedImages.includes(urlSelected)){\r\n            selectedImages = selectedImages.filter(i => i !== urlSelected)\r\n        } else {\r\n            selectedImages = [...selectedImages, urlSelected]\r\n        }\r\n\r\n    } else {\r\n      selectedImages = [...selectedImages, urlSelected]\r\n    }\r\n\r\n    // New data with checked key updated for the UI\r\n    let newData = [];\r\n\r\n    data.forEach( i => {\r\n\r\n        if(i.url === urlSelected){\r\n          //When we find the object having the url selected, we change its checked value\r\n\r\n            if(i.checked === false){\r\n              newData = [...newData, { url: i.url, checked: true}];\r\n\r\n            } else {\r\n              newData = [...newData, { url: i.url, checked: false}]\r\n            }\r\n\r\n            \r\n        } else {\r\n            //Otherwise, we just add the data \r\n            newData = [...newData, i]\r\n        }\r\n    })\r\n\r\n    this.setState({\r\n        productBeingEditedCurrentUrlImagesWithChekedOption : newData,\r\n        selectedImages: selectedImages\r\n      })\r\n  \r\n  }\r\n\r\n\r\n  deleteImageOnThePage = e => {\r\n    e.preventDefault()\r\n\r\n    let imagesWithCheck = this.state.productBeingEditedCurrentUrlImagesWithChekedOption \r\n    let newCurrentImages = imagesWithCheck.filter(i => i.checked !== true)\r\n\r\n    this.setState({\r\n      productBeingEditedCurrentUrlImagesWithChekedOption: newCurrentImages,\r\n      cancelImageDeletingAllowed: true\r\n    })\r\n\r\n    \r\n  }\r\n\r\n  cancelDeleteCurrentImageHandler = e => {\r\n    e.preventDefault()\r\n\r\n    const { selectedImages, productBeingEditedCurrentUrlImagesWithChekedOption } = this.state;\r\n\r\n    let deletedImages = [];\r\n\r\n\r\n\r\n    selectedImages.forEach( url => {\r\n      deletedImages = [...deletedImages, { url: url, checked: true}]\r\n    })\r\n\r\n    let oldImagesWithCheck = [...productBeingEditedCurrentUrlImagesWithChekedOption, ...deletedImages]\r\n\r\n\r\n\r\n    this.setState({ productBeingEditedCurrentUrlImagesWithChekedOption: oldImagesWithCheck,\r\n                    cancelImageDeletingAllowed : false})\r\n\r\n  } \r\n\r\n  render() {\r\n\r\n    const { initialForm, requestDataSet } = this.state;\r\n\r\n    let addProduct;\r\n\r\n    if(this.state.loading === true || initialForm === null || requestDataSet === null) {\r\n      addProduct = <Loader />\r\n    } else {\r\n      addProduct = (\r\n        <section className=\"add-product\">\r\n            <form className=\"add-product__form\">\r\n\r\n              {this.state.showImage !== true && (\r\n                <div className={`add-product__part add-product__part--details `}>\r\n                {Object.keys(initialForm).map(dataType => (\r\n                  <div className=\"add-product__part--details__section\" key={dataType}>\r\n                    <h3 className=\"add-product__form__title\">{dataType}</h3>\r\n                        {Object.keys(initialForm[dataType]).map(data => {\r\n\r\n                          let info = initialForm[dataType][data];\r\n                          return (\r\n                              <Input\r\n                                  className=\"add-product__input\"\r\n                                  label={info.label}\r\n                                  key={info.label}\r\n                                  id={data}\r\n                                  options={info.options}\r\n                                  placeholder={info.placeholder}\r\n                                  control={info.control}\r\n                                  type={info.type}\r\n                                /*  value={ this.props.editingMode === false ? i.value : this.state.newFullForm[i.id]\r\n                                    }*/\r\n                                  value = {requestDataSet[data]}\r\n                                  onChange={this.inputChangeHandler}\r\n                              />\r\n                            )\r\n                        }\r\n                        \r\n                        )}\r\n                  </div>\r\n                ))}\r\n                <div className=\"add-product__part--details__section\">\r\n                    <h3 className=\"add-product__form__title\">options</h3>\r\n                    <FormFeature featuresList={this.state.featuresList}\r\n                                addFeatureChangeHandler={this.addFeatureChangeHandler}\r\n                                value={this.state.featureBeingAdded}\r\n                                addFeature={this.addFeature}\r\n                                deleteFeature= {this.deleteFeature}\r\n                    />\r\n                </div>\r\n                <div className=\"add-product__form__controller\">\r\n                    <Button onClick={this.showImageFormHandler}\r\n                        color='primary'>\r\n                        next\r\n                    </Button>\r\n                    \r\n                </div>\r\n              </div>\r\n              )}\r\n\r\n              {this.state.showImage === true && (\r\n                <div className={`add-product__part add-product__part--image `}>\r\n                    <h3 className=\"add-product__form__title\">Images</h3>          \r\n                    <Filepicker filesHandler={this.filesHandler}\r\n                                productBeingEditedCurrentImages={this.state.productBeingEditedCurrentUrlImagesWithChekedOption}\r\n                                editingMode={this.props.editingMode}\r\n                                selectDeleteHandler={this.selectDeleteHandler}\r\n                                selectedImages ={this.state.selectedImages}\r\n                                onDeleteCurrentImages = {this.deleteImageOnThePage}\r\n                                cancelDeleteImagesAlowed = {this.state.cancelImageDeletingAllowed}\r\n                                onCancelDeleteCurrentImages={this.cancelDeleteCurrentImageHandler}\r\n                    />\r\n                    <div className=\"add-product__form__controller\">\r\n                            <Button onClick={this.hideImageFormHandler}>\r\n                                previous \r\n                            </Button>\r\n                            <Button onClick={this.uploadHandler}>\r\n                                upload\r\n                            </Button>\r\n                            <Button onClick={this.over}>\r\n                                State\r\n                            </Button>\r\n                    </div>  \r\n              </div> \r\n              )}      \r\n\r\n            </form>\r\n          </section>\r\n      )\r\n    }\r\n\r\n    return addProduct\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      editingMode: state.products.editingMode,\r\n      productBeingEdited: state.products.productRequested,\r\n\r\n      productBeingEditedId: state.products.productRequestedId,\r\n\r\n      suppliers: state.suppliers.suppliers\r\n  }\r\n}\r\n\r\n\r\nconst madDispacthToProps = dispatch => {\r\n  return {\r\n        toggleEditingMode: () => dispatch(actions.toggleEditingMode()),\r\n\r\n        setProductRequested: (prod) => dispatch(actions.setRequestedProduct(prod)),\r\n        setProductRequestedId: (id) => dispatch(actions.setRequestedProductId(id)),\r\n\r\n        setSuppliers: suppliers => dispatch(actions.setSuppliers(suppliers)),\r\n\r\n        addTotalProducts: () => dispatch(actions.addTotalProducts())\r\n  }\r\n}\r\nexport default connect(mapStateToProps, madDispacthToProps)(AddProduct);\r\n\r\n\r\n","import React from 'react';\r\nimport './Overview.css';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\n\r\nconst overview = props => {\r\n    let product = props.product\r\n    return (\r\n        <div className=\"overview\">\r\n            <section className=\"overview__section\">\r\n                <div className=\"overview__title\">\r\n                    <IconSvg icon=\"file\"/>\r\n                    <div>General</div>\r\n                </div>\r\n                <ul className=\"overview__list\">\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Brand</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.brand}</div>\r\n                </li>\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Model</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.model}</div>\r\n                </li>\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Body Type</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.bodyType}</div>\r\n                </li>\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Year</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.year}</div>\r\n                </li>\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Kilometer</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.nbKilometers.toLocaleString()} km</div>\r\n                </li>\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Year of release</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.yearOfRelease}</div>\r\n                </li>\r\n                <li className=\"overview__list__item\">\r\n                    <div className=\"overview__list__item__key\">Serial number</div>\r\n                    <div className=\"overview__list__item__value\">{product.general.serialNumber}</div>\r\n                </li>\r\n               \r\n            </ul>\r\n            </section>\r\n            <section className=\"overview__section\">\r\n                <div className=\"overview__title\">\r\n                    <IconSvg icon=\"design\"/>\r\n                    <div>Design</div>\r\n                </div>\r\n                <ul className=\"overview__list\">\r\n                    <li className=\"overview__list__item\">\r\n                        <div className=\"overview__list__item__key\">Interior color</div>\r\n                        <div className=\"overview__list__item__value\">{product.design.intColor}</div>\r\n                    </li>\r\n                    <li className=\"overview__list__item\">\r\n                        <div className=\"overview__list__item__key\">Exterior color</div>\r\n                        <div className=\"overview__list__item__value\">{product.design.extColor}</div>\r\n                    </li>                            \r\n            </ul>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default overview;\r\n","import React from 'react';\r\nimport './Technical.css';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\n\r\n\r\nconst technical = props => {\r\n   let product = props.product;\r\n    return (\r\n        <div className=\"technical\">\r\n\r\n\r\n            <div className=\"technical__section\">\r\n                <div className=\"technical__title\">\r\n                    <IconSvg icon=\"engine\"/>\r\n                    <div>Engine</div>\r\n                </div>\r\n                <ul className=\"technical__section__list\">\r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">Motor size</span>\r\n                        <span className=\"technical__section__list__item__value\">{product.tech.motorSize}</span>\r\n                    </li>\r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">Number of cylinders</span>\r\n                        <span className=\"technical__section__list__item__value\">{product.tech.nbCylinders}</span>\r\n                    </li>\r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">Fuel</span>\r\n                        <span className=\"technical__section__list__item__value\">{product.general.gazol}</span>\r\n                    </li>\r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">Max speed</span>\r\n                        <span className=\"technical__section__list__item__value\">{product.tech.maxSpeed} km/h</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            {/* <div className=\"technical__section\">\r\n                <div className=\"technical__title\">\r\n                    <IconSvg icon=\"speedometer\"/>\r\n                    <div>Performance</div>\r\n                </div>\r\n                <ul className=\"technical__section__list\">\r\n                    \r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">0 à 100 km/h</span>\r\n                        <span className=\"technical__section__list__item__value\">10.6 s</span>\r\n                    </li>\r\n                </ul>\r\n            </div> */}\r\n            <div className=\"technical__section\">\r\n                <div className=\"technical__title\">\r\n                    <IconSvg icon=\"gear\"/>\r\n                    <div>Transmission</div>\r\n                </div>\r\n                <ul className=\"technical__section__list\">\r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">Gear box</span>\r\n                        <span className=\"technical__section__list__item__value\">{product.general.transmissionType}</span>\r\n                    </li>\r\n                    <li className=\"technical__section__list__item\">\r\n                        <span className=\"technical__section__list__item__detail\">Number of gear ratios</span>\r\n                        <span className=\"technical__section__list__item__value\">{product.tech.nbGearRatios}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default technical;","import React from 'react';\r\nimport './Features.css';\r\nimport IconSvg from '../../../utilities/svg/svg'\r\n\r\nconst features = props => {\r\n    let product = props.product\r\n    return (\r\n        <div className=\"features\">\r\n            <ul className=\"features__list\">\r\n                {product.features.map(feature => (\r\n                    <li className=\"features__list__item\">\r\n                        <IconSvg icon=\"arrow-list\"/>\r\n                        {feature}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default features;","import React, { Component } from 'react'\r\nimport './Car.css';\r\nimport { Gallery, GalleryImage } from \"react-gesture-gallery\";\r\nimport IconSvg from '../../utilities/svg/svg';\r\nimport Button from '../../components/button/Button';\r\n\r\nimport Overview from './overview/Overview';\r\nimport Technical from './technical/Technical';\r\nimport Features from './features/Features';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions';\r\n\r\n\r\nclass Car extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            index: 0,     \r\n            initiatlIndex: 0,  \r\n            product: null,\r\n            loading: true,\r\n            partRequested: 'overview',\r\n        }\r\n        this.escFunction = this.escFunction.bind(this)\r\n    }\r\n\r\n\r\n    imageSlideHandler = () => {\r\n    let {index, images, initiatlIndex} =  this.state;\r\n    this.inter = setInterval(() => {\r\n                if(index === images.length){\r\n                    this.setState({index: initiatlIndex}, () => {\r\n                        clearInterval(this.inter);\r\n                        this.imageSlideHandler();\r\n                    })\r\n                } else {\r\n                    this.setState({index: index++ })\r\n                }\r\n            }, 2500)\r\n    }\r\n\r\n    componentDidMount(){\r\n        let prodId;\r\n        if(this.props.prodId === ''){\r\n            prodId = this.props.match.params.prodId\r\n        } else {\r\n            prodId = this.props.prodId\r\n        }    \r\n\r\n        let url = \"https://africauto.herokuapp.com/admin/\" + prodId;\r\n        let method = 'GET';\r\n        \r\n        fetch(url, {\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            method: method\r\n        })\r\n        .then( res => {\r\n            if(res.status !== 200){\r\n                throw new Error('Failed to fetch that product')\r\n            }\r\n            return res.json();\r\n        })\r\n        .then( resData => {\r\n            this.setState({\r\n                product: resData.product,\r\n                loading: false\r\n            }, () => this.props.setProductRequested(resData.product))\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        \r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.inter)\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n    \r\n\r\n    changeGalleryImgIndex = url => {\r\n        const { product } = this.state;\r\n        let index = product.imageUrls.indexOf(`${url}`);\r\n        this.setState({ index: index})\r\n    }\r\n\r\n    detailRequestHandler = detail => {\r\n        this.setState({ requestedSection: detail})\r\n    }\r\n\r\n    escFunction(event){\r\n        if(event.keyCode === 27 && this.props.hideScrollBar) {\r\n          this.props.showScrollBarHandler()\r\n        }\r\n      }\r\n\r\n\r\n    render() {\r\n\r\n        let {partRequested, product, loading } = this.state;\r\n        let productRequested; \r\n        let detail;\r\n\r\n        if(partRequested === 'overview'){\r\n            detail = <Overview product={product}/>\r\n        }\r\n\r\n        if(partRequested === 'technical'){\r\n            detail = <Technical product={product}/>\r\n        }\r\n\r\n        if(partRequested === 'features'){\r\n            detail = <Features product={product}/>\r\n        }\r\n\r\n\r\n        if(loading ===  true){\r\n            productRequested = <div>loading</div>\r\n        } else {\r\n            productRequested = (\r\n                <div className=\"single-car\">\r\n                    <div className=\"single-car__backBtn\"\r\n                          onClick={() => this.props.history.goBack()}>\r\n                        Back\r\n                    </div>\r\n                    <div className=\"single-car__header\">\r\n\r\n                        <div className=\"single-car__header__main\">\r\n\r\n                            <div className=\"single-car__header__main__titleContainer\">\r\n                                <h1 className=\"single-car__header__main__title\">{product.general.title} {product.general.year}</h1>\r\n                                <div className=\"single-car__header__main__controller\">\r\n                                    <Button link= {{pathname: '/ajouter'}} color=\"primary\"\r\n                                            onClick={this.props.toggleEditingMode}>\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Button link='/' color=\"primary\">\r\n                                        Delete\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className={`single-car__header__main__gallery`}>                          \r\n                                <Gallery\r\n                                    index={this.state.index}\r\n                                    onRequestChange={i => this.setState({index: i})}>\r\n\r\n                                    {product.imageUrls.map(img => (\r\n                                    <GalleryImage objectFit=\"cover\" key={img} src={img} \r\n                                                onClick={this.props.hideScrollBarHandler}\r\n                                    />\r\n                                    ))}\r\n                                </Gallery>                                 \r\n                            </div> \r\n                            {this.props.hideScrollBar && (\r\n                                <div className=\"single-car__header__main__gallery--fullContainer\">\r\n\r\n                                    <div className=\"single-car__header__main__gallery--fullContainer__closeBtn\"\r\n                                        onClick={this.props.showScrollBarHandler}>\r\n                                        <IconSvg icon=\"close\"/>\r\n                                    </div>\r\n\r\n\r\n                                    <div className=\"single-car__header__main__gallery--full\">\r\n                                        <Gallery\r\n                                            index={this.state.index}\r\n                                            onRequestChange={i => this.setState({index: i})}>\r\n                                            {product.imageUrls.map(img => (\r\n                                            <GalleryImage objectFit=\"contain\" key={img} src={img} \r\n                                            />\r\n                                            ))}\r\n                                        </Gallery>\r\n                                    </div>\r\n                                </div>                   \r\n                            )}  \r\n                            <div className=\"single-car__header__main__gallery__controller\">\r\n                                {product.imageUrls.map(i => (\r\n                                    <img src={i} alt=\"car\" className=\"single-car__header__main__gallery__controller__img\" key={i}\r\n                                        onClick={ () => this.changeGalleryImgIndex(i)}/>\r\n                                ))}\r\n                            </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"single-car__header__info\">\r\n                            <div className=\"single-car__header__info__priceContainer\">\r\n                                <div className=\"single-car__header__info__price\">{product.general.price.toLocaleString()} CAD</div>\r\n                            </div>\r\n                            <ul className=\"single-car__header__info__list\">\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">reference</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.supplier.reference}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">brand</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.brand}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">body type</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.bodyType}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">model</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.model}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">year</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.year}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">kilometer</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.nbKilometers} km</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">YOR</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.yearOfRelease}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">fuel</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.gazol}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">gear box</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.transmissionType}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">serial number</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.serialNumber}</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">views</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.general.viewCounter ? product.general.viewCounter : '-' }</div>\r\n                                    </li>\r\n                                    <li className=\"single-car__header__info__list__item\">\r\n                                        <div className=\"single-car__header__info__list__item__key\">followers</div>\r\n                                        <div className=\"single-car__header__info__list__item__value\">{product.followersCounter ? product.followersCounter : '-'}</div>\r\n                                    </li>\r\n                            </ul>\r\n                        </div>  \r\n                    </div>\r\n                                          \r\n                    <section className=\"single-car__details\">                 \r\n                        <ul className=\"single-car__details__nav\">\r\n                            <li className={`single-car__details__nav__item\r\n                                        ${this.state.partRequested === 'overview' ? 'active': ''}`}\r\n                                onClick={() => this.setState({ partRequested: 'overview'})}>\r\n                                Overview\r\n                            </li>\r\n                            <li className={`single-car__details__nav__item\r\n                                        ${this.state.partRequested === 'technical' ? 'active': ''}`}\r\n                                onClick={() => this.setState({ partRequested: 'technical'})}>\r\n                                Technical\r\n                            </li>\r\n                            <li className={`single-car__details__nav__item\r\n                                        ${this.state.partRequested === 'features' ? 'active': ''}`}\r\n                                onClick={() => this.setState({ partRequested: 'features'})}>\r\n                                Features\r\n                            </li>\r\n                        </ul>\r\n                        {detail}\r\n                    </section>\r\n                      \r\n            </div>\r\n            )\r\n        }\r\n\r\n        \r\n        \r\n        return productRequested\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        prodId: state.products.productRequestedId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setProductRequested: (prod) => dispatch(actions.setRequestedProduct(prod)),\r\n        toggleEditingMode: () => dispatch(actions.toggleEditingMode())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Car);\r\n","export const validator = (data) => {\r\n    const error = [];\r\n    const fields = Object.keys(data);\r\n\r\n    console.log(data)\r\n\r\n    /* ------CHECK IF VALUE IS EMPTY---------*/\r\n\r\n   fields.forEach(field => {    \r\n        if(data[field].value.trim().length < 1){\r\n                error.push(`${field} is required`)\r\n        }\r\n    })\r\n\r\n    if(error.length > 0){\r\n        return error\r\n    }\r\n\r\n\r\n    /*-------CHECK IF EMAIL IS VALID--------*/\r\n    let emailIsValid = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(data.email.value.trim())\r\n      if(!emailIsValid){\r\n        error.push('Please, enter a valid email')\r\n      }\r\n\r\n\r\n      /*----CHECK FIRST NAME AND LAST NAME LLENGTH------*/ \r\n\r\n      if(fields.includes('firstName')){\r\n          if(data.firstName.value.trim().length < 3){\r\n              error.push('Firstname should be at least 3 characters long')\r\n          }\r\n      }\r\n\r\n     if(fields.includes('lastName')){\r\n        if(data.lastName.value.trim().length < 3){\r\n            error.push('Lastname should be at least 3 characters long')\r\n        }\r\n    }\r\n\r\n\r\n    /*------CHECK PASSWORD LENGTH-----*/\r\n\r\n\r\n\r\n    if(fields.includes('password') && data.password.value.trim().length < 5) {\r\n        error.push('Password should be at least 5 characters long')\r\n    }\r\n\r\n    /*----CHECK IF TWO PASSWORDS ARE EQUAL-----*/\r\n    if(fields.includes('confirm_password')){\r\n        if(data.password.value.trim() !== data.confirm_password.value.trim()){\r\n            error.push('Please enter the same password')\r\n        }\r\n    }\r\n\r\n    return error\r\n    \r\n}","import React, { Component } from 'react';\r\nimport Input from '../../../components/formInput/FormInput';\r\nimport Button from '../../../components/button/Button';\r\nimport './Login.css';\r\nimport { validator} from '../../../utilities/validators';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../store/actions';\r\n\r\n\r\n\r\n class Login extends Component {\r\n\r\n    state= {\r\n        loginForm: {\r\n            email: {\r\n                value: ''\r\n            },\r\n\r\n            password:{\r\n                value: ''\r\n            }\r\n        },\r\n    }\r\n\r\n    inputChangeHandler = (input, value) => {\r\n        this.setState( prevState => {\r\n            const updatedForm = {\r\n                ...prevState.loginForm,\r\n                [input]: {\r\n                    ...prevState.loginForm[input],\r\n                    value: value\r\n                }\r\n            }\r\n\r\n            return {\r\n                loginForm: updatedForm\r\n            }\r\n        })\r\n    }\r\n\r\n    loginHandler = (e, loginFormData) => {\r\n        e.preventDefault();\r\n        this.props.setLoadingToTrue();\r\n        this.props.setError(null)\r\n\r\n  \r\n\r\n      if(loginFormData){\r\n            const errors = validator(loginFormData)\r\n            if(errors.length > 0){\r\n                this.props.setError(errors);\r\n                this.props.setLoadingToFalse()\r\n                return \r\n            }\r\n        }\r\n\r\n\r\n        fetch('https://africauto.herokuapp.com/admin/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: loginFormData.email.value,\r\n                password: loginFormData.password.value\r\n            })\r\n        })\r\n        .then( res => {\r\n            console.log('reeees');\r\n\r\n            if(res.status === 422){\r\n                throw new Error('validation failed')\r\n            }\r\n            \r\n            if(res.status === 401){\r\n                throw new Error('Wrong email or password')\r\n            }\r\n\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not authenticate you')\r\n            }\r\n\r\n            return res.json()\r\n        })\r\n        .then( resData => {\r\n                this.props.loginSucceeded(resData);\r\n                localStorage.setItem('woto-admin-token', resData.token);\r\n                localStorage.setItem('woto-admin-adminId', resData.adminId);\r\n                localStorage.setItem('woto-admin-adminName', resData.adminName)\r\n\r\n                const remainingMilliSeconds =  60 * 60 * 1000 //1hour\r\n                const expiryDate = new Date( new Date().getTime() + remainingMilliSeconds )\r\n\r\n                localStorage.setItem('woto-admin-expiryData', expiryDate.toISOString());\r\n\r\n                this.props.setLoadingToFalse()\r\n\r\n        })\r\n        .catch( err => {\r\n            this.props.setError(err)\r\n            this.props.loginFailed()\r\n            this.props.setLoadingToFalse()\r\n           \r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    render() {     \r\n        return (\r\n            <form className= 'auth__form auth__form--login' \r\n                   onSubmit={e => this.loginHandler(e, this.state.loginForm)}\r\n                   noValidate\r\n                   autoComplete=\"off\">\r\n                <ul className=\"auth__input__list\">\r\n\r\n                            <Input  type='email'\r\n                                control='input'\r\n                                label='email'\r\n                                id='email'\r\n                                value={this.state.loginForm['email'].value}\r\n                                onChange={this.inputChangeHandler}\r\n                                placeholder='email'\r\n                                border\r\n                                required={true}\r\n                                autoComplete = 'off'/>\r\n\r\n                        <Input  type='password'\r\n                                control='input'\r\n                                label='mot de passe'\r\n                                id='password'\r\n                                value={this.state.loginForm['password'].value}\r\n                                onChange={this.inputChangeHandler}\r\n                                placeholder='mot de passe'\r\n                                border\r\n                                required={true}\r\n                                autoComplete = 'off'/>\r\n                </ul>\r\n\r\n                {/* <div className='login__options'>\r\n                    <div className=\"login__options--1\" >\r\n                        Mot de passe oublié\r\n                    </div>\r\n                    <div className=\"login__options--1\">\r\n                        Pas encore membre ?\r\n                    </div>\r\n                </div> */}\r\n\r\n                <div className=\"auth__button\">\r\n                    <Button color='primary' type='submit'>\r\n                        Login\r\n                    </Button>\r\n                </div>\r\n            \r\n        </form>\r\n         )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        loginSucceeded: (data) => dispatch(actions.loginSucceeded(data)),\r\n        loginFailed: () => dispatch(actions.loginFailed()),\r\n        setError: (data) => dispatch(actions.setError(data))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import * as actionTypes from './actionsTypes';\r\n\r\n\r\n\r\nexport const loginSucceeded = data => {\r\n    return {\r\n        type: actionTypes.LOGIN_SUCCEDED,\r\n        token: data.token,\r\n        adminId: data.adminId,\r\n        adminName: data.adminName\r\n\r\n    }\r\n}\r\n\r\nexport const loginFailed = () => {\r\n    return {\r\n        type: actionTypes.LOGIN_FAILED\r\n    }\r\n}\r\n\r\nexport const setLoginStateToTrue = (isAuth, token, adminId, adminName) => {\r\n    return {\r\n        type: actionTypes.SET_LOGIN_STATE_TO_TRUE,\r\n        isAuth: isAuth,\r\n        token: token,\r\n        adminId: adminId,\r\n        adminName: adminName\r\n    }\r\n}\r\n\r\nexport const setLoginStateToFalse = () => {\r\n    return {\r\n        type: actionTypes.SET_LOGIN_STATE_TO_FALSE\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './ErrorHandler.css'\r\nimport * as actions from '../../store/actions';\r\nimport { connect } from 'react-redux'\r\nimport IconSvg from '../../utilities/svg/svg';\r\nimport Button from '../button/Button'\r\n\r\nclass ErrorHandler extends Component {\r\n\r\n    componentDidMount(){\r\n      setTimeout(this.closeErrorHandler, 8000);\r\n     \r\n    }\r\n\r\n    closeErrorHandler = () => {\r\n        this.props.setError(null)\r\n    }\r\n    render() {\r\n        let errorHandler = null;\r\n        if(this.props.errors){\r\n            errorHandler = (\r\n                <div className='error'> \r\n                    <div className=\"error__header\">\r\n                        <span>Something went wrong</span>\r\n                        <IconSvg icon=\"error\" />\r\n                    </div>        \r\n                    {this.props.errors && this.props.errors.map( (error, index) => (\r\n                    <div key={index}\r\n                         className=\"error__text\">\r\n                        {error}\r\n                    </div>\r\n                ))}\r\n\r\n                <div className=\"error__cta\">\r\n                    <Button color='primary'\r\n                            onClick={() => this.closeErrorHandler()}>\r\n                        OK\r\n                    </Button>\r\n                </div>\r\n               \r\n            </div>\r\n            )\r\n        }\r\n        return errorHandler; \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        errors: state.error.errors\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispacth => {\r\n    return {\r\n        setError: (data) => dispacth(actions.setError(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorHandler)\r\n","import React, { Component  } from 'react';\r\nimport Input from '../../../components/formInput/FormInput';\r\nimport Button from '../../../components/button/Button';\r\nimport { validator } from '../../../utilities/validators';\r\nimport ErrorHandler from '../../../components/errorHandler/ErrorHandler';\r\n\r\nclass Signup extends Component {\r\n\r\n    state = {\r\n        signupForm: {\r\n            firstName: {\r\n                value: '',\r\n                errorLabel: 'A firstname'\r\n            },\r\n            lastName: {\r\n                value: '',\r\n                errorLabel: 'A lastname'\r\n            },\r\n\r\n            email: {\r\n                value: '',\r\n                errorLabel: 'An email'\r\n            },\r\n\r\n            password:{\r\n                value: '',\r\n                errorLabel: 'A password'\r\n            },\r\n\r\n            confirm_password: {\r\n                value: '',\r\n                errorLabel: 'A confirmation password'\r\n            }\r\n        },\r\n        error: null\r\n\r\n        \r\n    }\r\n\r\n \r\n\r\n\r\n    inputChangeHandler = (input, value) => {\r\n        this.setState( prevState => {\r\n            const updatedForm = {\r\n                ...prevState.signupForm,\r\n                [input]: {\r\n                    ...prevState.signupForm[input],\r\n                    value: value\r\n                }\r\n            }\r\n\r\n            return {\r\n                signupForm: updatedForm\r\n            }\r\n        })\r\n    }\r\n\r\n    submitHandler = (e ) => {\r\n\r\n        const {signupForm} = this.state\r\n        \r\n        e.preventDefault();\r\n\r\n        this.props.setLoadingToTrue()\r\n\r\n        let data  = {\r\n            email: signupForm.email,\r\n            firstName: signupForm.firstName,\r\n            lastName: signupForm.lastName,\r\n            password: signupForm.password,\r\n            confirm_password: signupForm.confirm_password\r\n        }\r\n        const errors = validator(data)\r\n\r\n        if(errors.length > 0){\r\n            this.setState({ error: errors })\r\n            this.props.setLoadingToFalse()\r\n            this.props.setErrors()\r\n            return \r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n\r\n        formData.append('firstName', signupForm.firstName.value);\r\n        formData.append('lastName', signupForm.lastName.value);\r\n        formData.append('email', signupForm.email.value);\r\n        formData.append('password', signupForm.password.value)\r\n\r\n        fetch('https://africauto.herokuapp.com/admin/signup', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(Object.fromEntries(formData))\r\n        })\r\n        .then( res => {\r\n            if(res.status === 422){\r\n                throw new Error (\r\n                    \"Make sure the email isn't used yet\"\r\n                )\r\n            }\r\n\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error ( ' Creating a user failed')\r\n            }\r\n\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n            this.props.setLoadingToFalse()\r\n            this.props.requestLoginForm()\r\n        })\r\n        .catch( err => {\r\n            let error = []\r\n            error.push(err.message)\r\n            this.props.setLoadingToFalse()\r\n            this.props.setErrors()\r\n            this.setState({ error: error})\r\n        })\r\n\r\n    }\r\n\r\n    closeErrorHandler = () => {\r\n        this.setState({ error: null});\r\n        this.props.resetErrors()\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        let form;\r\n\r\n        if(this.state.error ) {\r\n            form = <ErrorHandler error = {this.state.error}\r\n                    onCloseError={this.closeErrorHandler}/>\r\n        } else {\r\n            form = (\r\n            \r\n            <form className= 'auth__form auth__form--signup'\r\n                    onSubmit={e => this.submitHandler(e)} \r\n                    autoComplete=\"off\"\r\n                    noValidate> \r\n\r\n            <ul className=\"auth__input__list\">\r\n\r\n                    <Input type='text'\r\n                            control='input'\r\n                        id='firstName'\r\n                        value={this.state.signupForm['firstName'].value}\r\n                        label='prénom'\r\n                        onChange={this.inputChangeHandler}\r\n                        placeholder='prénom'\r\n                        border\r\n                        required={true}/>\r\n                    \r\n                    <Input  type='text'\r\n                            control='input'\r\n                            label='nom'\r\n                            id='lastName'\r\n                            value={this.state.signupForm['lastName'].value}\r\n                            onChange={this.inputChangeHandler}\r\n                            placeholder='nom'\r\n                            border\r\n                            required={true}/>\r\n\r\n\r\n                        <Input  type='email'\r\n                            control='input'\r\n                            label='email'\r\n                            id='email'\r\n                            value={this.state.signupForm['email'].value}\r\n                            onChange={this.inputChangeHandler}\r\n                            placeholder='email'\r\n                            border\r\n                            autoComplete=\"nope\"\r\n                        \r\n                            required={true}/>\r\n\r\n                    <Input  type='password'\r\n                            control='input'\r\n                            label='mot de passe'\r\n                            id='password'\r\n                            value={this.state.signupForm['password'].value}\r\n                            onChange={this.inputChangeHandler}\r\n                            placeholder='mot de passe'\r\n                            border\r\n                            autoComplete = 'new-password'\r\n                            required={true}/>\r\n\r\n                            \r\n                    <Input \r\n                        id='confirm_password'\r\n                        label='confirmer mot de passe'\r\n                        placeholder='confirmer mot de passe'\r\n                        type='password'\r\n                        control='input' \r\n                        required={true}\r\n                        border\r\n                        autoComplete = 'new-password'\r\n                        value={this.state.signupForm['confirm_password'].value}\r\n                        onChange={this.inputChangeHandler}\r\n                    />\r\n            </ul>\r\n\r\n            <div className=\"auth__button\">\r\n                <Button color='primary' type='submit'>\r\n                    Add Admin\r\n                </Button>\r\n            </div>\r\n            \r\n        </form>\r\n\r\n\r\n            )\r\n        }\r\n\r\n\r\n        return form\r\n            \r\n    }\r\n}\r\n\r\nexport default Signup;\r\n","import React, { Component } from 'react'\r\nimport './Auth.css';\r\n\r\nimport Login from './login/Login';\r\nimport Signup from './signup/Signup';\r\n\r\n\r\nimport Loader from '../../components/loader/Loader';\r\n\r\n\r\nclass Auth extends Component {\r\n\r\n    state= {\r\n        // requestedForm: 'signup',\r\n        loading: false,\r\n        error: false\r\n    }\r\n\r\n\r\n    // setRequestedForm = requested => {\r\n    //     this.setState({ requestedForm: requested})\r\n    // }\r\n\r\n    setLoadingToTrue = () => {\r\n        this.setState({ loading: true})\r\n    }\r\n\r\n    setLoadingToFalse = () => {\r\n        this.setState( { loading: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"auth\">            \r\n                  <div className=\"auth__container\">\r\n                    <div className=\"auth__controller\">\r\n                        <div className={`auth__controller__button `}>\r\n                            Login\r\n                        </div>\r\n                    </div>\r\n                  <Login setLoadingToTrue={this.setLoadingToTrue}\r\n                         setLoadingToFalse = {this.setLoadingToFalse}\r\n                    />\r\n                        {/* {\r\n                            this.state.error === false && (\r\n                            <div className=\"auth__controller\">\r\n                                <div className={`auth__controller__button \r\n                                                ${this.state.requestedForm === 'signup' ? 'active' : ''}`} \r\n                                    onClick={() => this.setRequestedForm('signup')}>\r\n                                    Signup\r\n                                </div>\r\n                                <div className={`auth__controller__button \r\n                                                ${this.state.requestedForm === 'login' ? 'active' : ''}`}\r\n                                    onClick={() => this.setRequestedForm('login')}>\r\n                                    Login\r\n                                </div>\r\n                            </div>\r\n                            )\r\n                        } */}\r\n\r\n                   \r\n\r\n                      {/* {\r\n                          this.state.requestedForm === 'signup' && (\r\n                          <Signup setLoadingToTrue={this.setLoadingToTrue}\r\n                                  setLoadingToFalse = {this.setLoadingToFalse}\r\n                                  setErrors={this.setErrors}\r\n                                  resetErrors={this.resetErrors}\r\n                                  requestLoginForm={() => this.setRequestedForm('login')}/>\r\n                          )\r\n                      } */}        \r\n                  </div>\r\n          </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Auth;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport './Users.css';\r\nimport IconSvg from '../../utilities/svg/svg';\r\nimport openSocket from 'socket.io-client';\r\nimport Spinner from '../../components/spinner/Spinner';\r\nimport DropDownList from '../../components/dropDownList/DropDownList';\r\n\r\n\r\n\r\n class Users extends Component {\r\n\r\n    state = {\r\n        users: [],\r\n        searchedUser: '', \r\n        searchedUserResults: [],\r\n        searchedUserNoResults: false,\r\n        searchingUser: false,\r\n        query: {\r\n            status: 'all'\r\n        },\r\n        displaySelector: false,\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.timer = null\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.timer = null\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchUsersdata();\r\n        const socket = openSocket('https://africauto.herokuapp.com');\r\n        socket.on('userLoggedIn', data => {\r\n            let userLoggedInId = data._id;\r\n\r\n            let userLoggedIn = this.state.users.find( user => user._id === userLoggedInId);\r\n\r\n            userLoggedIn.active = true;\r\n            userLoggedIn.connection = [data.connection[data.connection.length - 1]];\r\n            const newUserStates = this.state.users.filter(i => i._id !== userLoggedInId);\r\n            let newData = [];\r\n            if(newUserStates.length === 0){\r\n                newData = [userLoggedIn];\r\n                this.setState({ users: newData})\r\n            } else {\r\n                newData = [userLoggedIn, ...newUserStates]\r\n                this.setState({ users: newData})\r\n            }\r\n        })\r\n        socket.on('userLoggedOut', data => {\r\n            let userLoggedId = data._id;\r\n            let userLoggedInIndex = this.state.users.findIndex( i => i._id === userLoggedId)\r\n            let userLoggedIn = this.state.users.find( i => i._id === userLoggedId);\r\n\r\n            userLoggedIn.active = false;\r\n            userLoggedIn.connection = [data.connection[data.connection.length - 1]];\r\n            let newUsersData = [...this.state.users];\r\n            newUsersData[userLoggedInIndex] = userLoggedIn;\r\n            this.setState({ users: newUsersData})\r\n        })        \r\n    }\r\n\r\n    fetchUsersdata = () => {\r\n        let url = \"https://africauto.herokuapp.com/admin/users\";\r\n        let method = \"POST\";\r\n        fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: method,\r\n            body: JSON.stringify({ status: this.state.query.status})\r\n        })\r\n        .then(res => {\r\n             if (res.status !== 200) {\r\n             throw new Error(\"Failed to fetch users\");\r\n             }\r\n             return res.json(); //extract the body\r\n         })\r\n         .then(resData => {\r\n             this.setState({ users: resData.users})\r\n         })\r\n         .catch(err => {\r\n             console.log(err);\r\n         });\r\n    }\r\n\r\n    searchUserHandler = value => {\r\n        clearTimeout(this.timer);\r\n        this.setState({searchedUser: value, searchedUserNoResults: false });\r\n        this.timer = setTimeout( () => this.fetchSearchedUsers(), 1000) \r\n    }\r\n\r\n    fetchSearchedUsers = () => {\r\n        let url = 'https://africauto.herokuapp.com/user/search-user';\r\n        let method = 'POST'\r\n\r\n        if(this.state.searchedUser !== ''){\r\n            this.setState({ searchingUser: true})\r\n            fetch(url, {\r\n                method: method,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify( { search : this.state.searchedUser})\r\n            })\r\n            .then( res => {\r\n                if(res.status === 422){\r\n                    throw new Error (\r\n                        \"Make sure the email isn't used yet\"\r\n                    )\r\n                }\r\n                if(res.status !== 200 && res.status !== 201){\r\n                    throw new Error ( ' Creating a user failed')\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(resData => {\r\n                let results = resData.users;\r\n                if(results.length > 0){\r\n                    this.setState({searchedUserResults:  resData.users, searchingUser: false })\r\n                } else {\r\n                    this.setState({searchedUserResults:  resData.users, searchingUser: false, searchedUserNoResults: true })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n            } else {\r\n                this.setState({ searchedUserResults: [], searchedUserNoResults: false})\r\n            }\r\n    }\r\n\r\n    queryHandler = value => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            query: {\r\n                ...prevState.query,\r\n                status: value\r\n            }\r\n        }), () => this.fetchUsersdata())\r\n    }\r\n\r\n    toggleDisplaySelector = () => {\r\n        this.setState( prevState => ({\r\n            ...prevState,\r\n            displaySelector: !prevState.displaySelector\r\n        }))\r\n    }\r\n\r\n\r\n    render() {\r\n        const {users, searchedUser, searchedUserResults, searchedUserNoResults, searchingUser, query, displaySelector } = this.state;\r\n        let inputIcon = <IconSvg icon=\"search\"/>\r\n        if(searchingUser){\r\n            inputIcon = <Spinner />\r\n        }\r\n        return (\r\n            <section className=\"users\">\r\n                <div className=\"users__search\">\r\n                    <div className=\"users__search__inputContainer\">\r\n                        <input className=\"users__search__input\" \r\n                                    type='text'\r\n                                    value={searchedUser}\r\n                                    placeholder='Name Filter'\r\n                                    onChange={e => this.searchUserHandler(e.target.value)}\r\n                        />\r\n                        {inputIcon}\r\n                    </div>\r\n                    <DropDownList \r\n                        value={query.status}\r\n                        list = {['all', 'active', 'away']}\r\n                        selectItemHandler = {this.queryHandler}\r\n                    />                   \r\n                                                          \r\n                     {!searchedUserNoResults && searchedUserResults.length > 0 && (\r\n                        <ul className=\"users__search__results\">\r\n                            {searchedUserResults.map(user => (\r\n                                <li className=\"users__search__results__item\">\r\n                                    <div className=\"users__search__results__item__avatar\">\r\n                                        {user.firstName.slice(0, 1)}{user.lastName.slice(0, 1)}\r\n                                    </div>\r\n                                    <div className=\"users__search__results__item__name\">\r\n                                        {user.firstName} {user.lastName}\r\n                                    </div>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n\r\n                    {searchedUserNoResults && (\r\n                        <ul className=\"users__search__results\">                       \r\n                                <li className=\"users__search__results__item users__search__results__item--noResult\">\r\n                                    No user found\r\n                                </li>\r\n                        </ul>\r\n                    )}             \r\n                </div>\r\n                <table className=\"users__table\">\r\n                    <thead className={ `users__table__header `}>\r\n                        <tr>\r\n                            <th>&nbsp;</th>\r\n                            <th>Identity</th>\r\n                            <th>Email</th>\r\n                            <th>Tél</th>\r\n                            <th>Status</th>\r\n                            <th>Connection</th>\r\n                            <th>Fiche</th>\r\n                            <th>Open conversation</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {users.map( user => (\r\n                          <tr className=\"users__table__data\"\r\n                              key={user._id}>\r\n                                <td className=\"users__table__data__avatar\">\r\n                                    <div>\r\n                                        {user.firstName.slice(0, 1)}{user.lastName.slice(0, 1)}\r\n                                    </div>                        \r\n                                </td>\r\n                                <td className=\"users__table__data__name\">\r\n                                    {user.firstName} {user.lastName}\r\n                                </td>\r\n                                <td className=\"users__table__data__info\">\r\n                                    <div>\r\n                                        {user.email}\r\n                                    </div>                                    \r\n                                </td>\r\n                                <td className=\"users__table__data__info\">\r\n                                    <div>\r\n                                        {user.phoneNumber ? user.phoneNumber : 'N.D.'}\r\n                                    </div>\r\n                                </td>\r\n                                <td className=\"users__table__data__status\">\r\n                                    <div className={`users__table__data__status__icon \r\n                                        ${user.active === true ? 'active': ''}`}>\r\n                                       {user.active === true ? 'active': 'away'}\r\n                                    </div>\r\n                                </td>\r\n                                <td className=\"users__table__data__info\">\r\n                                    <div>\r\n                                        {\r\n                                            user.active === true ?  user.connection[0].start : \r\n                                            \r\n                                            user.connection[0] ? user.connection[0].end : 'N.D.'\r\n                                        }\r\n                                    </div>                                   \r\n                                </td>\r\n                                <td className=\"users__table__data__icon users__table__data__icon--file\">\r\n                                    <IconSvg icon=\"file\"\r\n                                            onClick={() => this.props.history.push(`/users/${user._id}`)}/>\r\n                                </td>\r\n                                <td className=\"users__table__data__icon users__table__data__icon--message\">\r\n                                    <IconSvg icon=\"email\"/>\r\n                                </td>\r\n                        </tr>\r\n                        ))}                    \r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from 'react'\r\nimport './MessagesNavbar.css';\r\nimport openSocket from 'socket.io-client'\r\n\r\n\r\n\r\nclass MessagesNavbar extends Component {\r\n\r\n    state = {\r\n        messages: [],\r\n        requestedMessageUserId: ''\r\n    }\r\n\r\n    \r\n    componentDidUpdate(prevProps){\r\n\r\n        if(prevProps.messages[0]._id !== this.props.messages[0]._id){\r\n            this.setState({ messages: this.props.messages })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._ismounted = false;\r\n     }\r\n\r\n    componentDidMount(){\r\n        this._ismounted = true;\r\n        this.setState({ messages: this.props.messages, requestedMessageUserId: this.props.requestedMessageUserId});\r\n        const socket = openSocket('https://africauto.herokuapp.com');\r\n\r\n            socket.on('userSentMessage', data => {\r\n            if(this._ismounted === true){\r\n                let messageData = data.messageData;\r\n                let userId = messageData.userId;\r\n                //find the user discussion to be updated and pull it \r\n                let convoToBeUpdated = this.state.messages.filter( i => i._id === userId)[0];\r\n                //update the last message of that discussion\r\n                convoToBeUpdated.messages[0] = messageData\r\n               \r\n                this.checkIfAdminIsOnTheConvoToBeUpdated(userId, convoToBeUpdated)\r\n            }\r\n            else return        \r\n        })\r\n    }\r\n\r\n    checkIfAdminIsOnTheConvoToBeUpdated = (userId, convoToBeUpdated) => {\r\n        let check = userId === this.state.requestedMessageUserId;\r\n        let data = convoToBeUpdated;\r\n        //delete the previous discussion\r\n        let newState = this.state.messages.filter( i => i._id !== userId);\r\n        if(check){\r\n            data.messages[0].read = true\r\n        } \r\n        this.setState({\r\n            messages: [data, ...newState]\r\n        }, () => console.log(this.state.messages))\r\n\r\n    }\r\n\r\n    \r\n    onChangeConvoHandler = userId => { \r\n        //find the user discussion to be updated and pull it \r\n        let convoToBeUpdated = this.state.messages.filter( i => i._id === userId)[0];\r\n        let convoToBeUpdatedIndex = this.state.messages.findIndex(i => i._id === userId);\r\n\r\n        if(convoToBeUpdated.messages.length > 0){\r\n            //update the last message of that discussion\r\n            convoToBeUpdated.messages[0].read = true;\r\n            let newMessages = [...this.state.messages];\r\n            newMessages[convoToBeUpdatedIndex] = convoToBeUpdated;\r\n            this.setState({ requestedMessageUserId: userId, messages: newMessages});\r\n        } else {\r\n            this.setState({ requestedMessageUserId: userId });\r\n        }\r\n        this.props.onchangeConvoHandler(userId);\r\n    }\r\n    render() {\r\n\r\n        const {messages } = this.state;\r\n\r\n        return (\r\n            <nav className=\"messagesNavbar\">\r\n            <ul className=\"messagesNavbar__list\">\r\n                {messages && messages.map(message => {\r\n                        if(message.messages.length > 0){\r\n                            return (\r\n                                <li className={`messagesNavbar__list__item\r\n                                                ${this.state.requestedMessageUserId === message._id ? 'active': ''}\r\n                                                ${message.messages[0].read === true || message.messages[0].senderType === 'admin' ? '' : 'not-read'}   \r\n                                    `}\r\n                                    key={message._id}\r\n                                    onClick={() => this.onChangeConvoHandler(message._id)}>\r\n                                    <div className=\"messagesNavbar__list__item__avatar\">\r\n                                        {`${message.firstName.slice(0, 1)}${message.lastName.slice(0, 1)}`}\r\n                                    </div>  \r\n                                    <div className=\"messagesNavbar__list__item__message\">\r\n                                            <div className=\"messagesNavbar__list__item__message__name\">{`${message.firstName} ${message.lastName}`}</div>\r\n                                            {message.messages[0].senderType === 'admin' && (\r\n                                                    <span>admin: {\r\n                                                        message.messages[0].message.slice(0, 25)}...\r\n                                                    </span>\r\n                                            )}\r\n                                            {message.messages[0].senderType === 'user' && (\r\n                                                    <span>{message.messages[0].message.slice(0, 25)}...</span>\r\n                                            )}\r\n                                    </div>                                   \r\n                                </li>\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                <li className={`messagesNavbar__list__item\r\n                                                ${this.state.requestedMessageUserId === message._id ? 'active': '' }`}\r\n                                    key={message._id}\r\n                                    onClick={() => this.onChangeConvoHandler(message._id)}>\r\n                                    <div className=\"messagesNavbar__list__item__avatar\">\r\n                                        {`${message.firstName.slice(0, 1)}${message.lastName.slice(0, 1)}`}\r\n                                    </div>\r\n                                    <div className=\"messagesNavbar__list__item__message\">\r\n                                            <div className=\"messagesNavbar__list__item__message__name\">{`${message.firstName} ${message.lastName}`}</div >\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                          }\r\n                })}\r\n            </ul>\r\n        \r\n        </nav>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MessagesNavbar;\r\n\r\n\r\n\r\n                           \r\n","export const timeStampGenerator = () => {\r\n    let date = new Date();\r\n    \r\n    let day = date.getDate();\r\n    let realDay; \r\n    if(day < 10){\r\n      realDay = '0' + day\r\n    } else {\r\n      realDay = day\r\n    }\r\n    \r\n    let month = date.getMonth() + 1;\r\n    let year = date.getFullYear()\r\n    let hour = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    let seconds = date.getSeconds();\r\n\r\n    return `${realDay}-${month}-${year} ${hour}:${minutes}:${seconds}`\r\n  }","import React, {Fragment} from 'react';\r\n\r\nconst MessagesContainerList = props => {\r\n\r\n    let messages = props.messages;\r\n    let showInfo = props.showInfo\r\n    let displayedDate = '';\r\n\r\n    let chatMessageGap;\r\n    let currentSenderType;\r\n\r\n\r\n    //Initialize date and store it\r\n    let date = messages[0].timeStamp;\r\n    let shortDate = messages[0].timeStamp.slice(0 , 5);\r\n\r\n    currentSenderType = messages[0].senderType;\r\n\r\n\r\n    let messagesList = messages.map((message, index, array) => {     \r\n\r\n        let currentDate = array[index].timeStamp.slice(0 , 5);\r\n        if(index === 0){\r\n            //Display the first date\r\n                displayedDate = date\r\n\r\n        } else {\r\n            //compare the current date with the previous date\r\n            if(currentDate !== shortDate && index + 1 < array.length){\r\n                 displayedDate = messages[index].timeStamp\r\n                 shortDate = messages[index].timeStamp.slice(0 , 5);\r\n            } else {\r\n                displayedDate = ''\r\n            }\r\n        }\r\n\r\n        if( index + 1 < array.length  && array[index + 1].senderType === currentSenderType ){\r\n            chatMessageGap = 'small'\r\n        } else {\r\n            chatMessageGap = 'big'\r\n            if(index + 1 < array.length){\r\n                currentSenderType = array[index + 1].senderType\r\n            }\r\n            \r\n        }\r\n\r\n\r\n        \r\n        \r\n        return (\r\n            <div key={message._id} className=\"messagesContainer__body__chatContainer\" >\r\n\r\n                {displayedDate !== '' && (<div className=\"messagesContainer__body__chat__convoDate\">{displayedDate}</div>)\r\n                }\r\n\r\n                <div className={`messagesContainer__body__chat               \r\n                                ${chatMessageGap === 'small' ? 'small-gap': 'big-gap'}`}>\r\n                    <div className={`messagesContainer__body__chat__content \r\n                                    ${message.senderType === 'user' ? 'user' : 'admin'}` }>\r\n                        {message.message}\r\n                    </div>\r\n                    <div className={`messagesContainer__body__chat__detail\r\n                                    ${showInfo ? 'show':''}\r\n                                    ${message.senderType === 'user' ? 'user' : 'admin'}`}>\r\n                    {\r\n                        message.senderType === 'user' && (\r\n                            <Fragment>\r\n                                <span>{message.timeStamp}</span>\r\n                                <span>Lu par {message.readBy} le {message.readByTimeStamp}</span>\r\n                            </Fragment>    \r\n                    )}\r\n                    {\r\n                        message.senderType === 'admin' && (\r\n                            <Fragment>\r\n                                <span>{message.timeStamp} - {message.from}</span> \r\n                                {message.read === true && (\r\n                                    <span>   Lu le {message.readByTimeStamp} </span>\r\n                                )}\r\n                                {message.read === false && (\r\n                                    <span>Non lu</span>\r\n                                                                        )}                                                                                                          \r\n                            </Fragment>                                                       \r\n                    )}\r\n                </div>\r\n                </div>\r\n             \r\n                \r\n\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return messagesList\r\n}\r\n\r\nexport default MessagesContainerList\r\n","import React, { Component } from 'react';\r\nimport autosize from 'autosize';\r\n\r\nclass TextArea extends Component {\r\n    componentDidMount(){\r\n       this.textarea.focus();\r\n       autosize(this.textarea);\r\n    }\r\n    render(){\r\n      const style = {\r\n                maxHeight:'9rem',\r\n                minHeight:'4rem',\r\n                  resize:'none',\r\n                  padding:'.7rem',\r\n                  boxSizing:'border-box',\r\n                  fontSize:'1.6rem'};\r\n        return (\r\n            <textarea\r\n                style={style} \r\n                ref={c=>this.textarea=c}\r\n                placeholder={this.props.placeholder}\r\n                rows={1} \r\n                value={this.props.value}\r\n                onChange={(e) => this.props.onChange(e.target.value)}\r\n                className={this.props.className}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextArea","import React, { Component, Fragment } from 'react';\r\nimport './MessagesContainer.css';\r\nimport openSocket from 'socket.io-client';\r\nimport {timeStampGenerator} from '../../../utilities/timeStampGenerator';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../store/actions'\r\nimport MessagesList from './MessagesContainerList'\r\nimport AutoSizeTextArea from '../../../components/autosizeTextArea/AutosizeTextArea';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\n\r\nclass MessagesContainer extends Component {\r\n\r\n    state = {\r\n        messages: null,\r\n        messageInput: '',\r\n        userId: '',\r\n        showInfo: false,\r\n        showUserInfos: true\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._ismounted = false;\r\n     }\r\n    \r\n    \r\n    componentDidMount(){    \r\n        this._ismounted = true;  \r\n        this.setState({\r\n            messages: this.props.messages, \r\n            userId: this.props.userId\r\n        }, () => this.scrollToBottom() );\r\n      \r\n        const socket = openSocket('https://africauto.herokuapp.com');\r\n\r\n        socket.on('userSentMessage', data => {   \r\n            this.props.playNotificationSound()\r\n            if(data.messageData.userId === this.state.userId && this._ismounted === true){\r\n                let url = \"https://africauto.herokuapp.com/messages/admin-update/\" + this.state.userId;\r\n                let method = \"POST\";\r\n                let timeStamp = timeStampGenerator();\r\n\r\n                    fetch(url, {\r\n                        method: method,\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify({\r\n                            adminName: this.props.adminName,\r\n                            timeStamp: timeStamp\r\n                        })\r\n                    })\r\n                    .then( res => {\r\n                        if(res.status !== 200)\r\n                        throw new Error('Failed to fetch messages')\r\n\r\n                        return res.json()\r\n                    })\r\n                    .then(resData => {\r\n                        let lastposition = resData.user.messages.length - 1\r\n                        this.addMessages(resData.user.messages[lastposition])    \r\n                    })\r\n                    .catch( err => {\r\n                        console.log(err)\r\n                    })\r\n\r\n            } else {\r\n                \r\n                let userId = data.messageData.userId;\r\n                let url = \"https://africauto.herokuapp.com/stats/add-notification/\" + userId;\r\n                let method = 'POST';\r\n\r\n                fetch(url, {\r\n                    method: method,\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                })\r\n                .then( res => {\r\n                    if(res.status !== 200 && res.status !== 201)\r\n                    throw new Error('Failed to add notification')\r\n                    return res.json()\r\n                })\r\n                .then(resData => {\r\n                    this.props.addANotification(resData.notification)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n\r\n            }\r\n        })\r\n        socket.on('userReadNewMessages', data => {\r\n            if(data._id === this.state.userId){           \r\n                this.setState({ messages: data.messages})\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps){   \r\n        if(prevProps.userId !== this.props.userId){        \r\n            this.setState({messages: this.props.messages, userId: this.props.userId}, () => this.scrollToBottom());\r\n        } \r\n    }\r\n\r\n    toggleShowInfo = () => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            showInfo: !prevState.showInfo\r\n        }))\r\n    }\r\n\r\n    toggleShowUserInfos = () => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            showUserInfos: !prevState.showUserInfos\r\n        }))\r\n        this.props.toggleShowUserInfos()\r\n    }\r\n    \r\n    messageChangeHandler = value => {\r\n        this.setState({ messageInput: value})\r\n    }\r\n\r\n\r\n    sendMessageHandler = () => {\r\n        let timeStamp = timeStampGenerator();\r\n\r\n        // let url = \"https://africauto.herokuapp.com/messages/admin/\" + this.props.userId; \r\n\r\n       let url = \"https://africauto.herokuapp.com/messages/admin/\" + this.props.userId;\r\n        let method = \"POST\";\r\n\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                from: this.props.adminName,\r\n                message: this.state.messageInput,\r\n                timeStamp: timeStamp\r\n            })\r\n        })\r\n        .then( res => {\r\n            return res.json()\r\n\r\n        })\r\n        .then( resData => {\r\n            this.addMessages(resData.data);\r\n            this.setState({ messageInput: ''});\r\n            this.props.updateNavbar(resData.data);\r\n\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    addMessages = message => {\r\n        this.setState(prevState => ({\r\n            messages: [...prevState.messages, message]\r\n        }), () => this.scrollToBottom())\r\n    }\r\n\r\n    scrollToBottom() {\r\n        this.messagesEnd.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n\r\n\r\n    render() {\r\n        const {displayDetails, messages, showInfo, showUserInfos} = this.state;\r\n\r\n        let messagesList;\r\n\r\n        if(messages && messages.length > 0){\r\n            messagesList = (\r\n                <MessagesList messages={messages} displayDetails={displayDetails} showInfo={showInfo}/>\r\n            ) \r\n        } else {\r\n            messagesList = (\r\n                <div className=\"messagesContainer__body__start\">Start conversation</div>\r\n            )\r\n        }\r\n        return (\r\n            <Fragment>\r\n\r\n                <div className=\"messagesContainer__body\">\r\n                    {messagesList}\r\n                    <div ref={el => { this.messagesEnd = el; }}></div>\r\n                </div>\r\n                \r\n                <div className=\"messagesSender\"> \r\n\r\n                    <div className={`messagesSender__cta`}>\r\n                        <div className={`messagesSender__cta__iconContainer ${showUserInfos ? 'active': ''}`}\r\n                             onClick={this.toggleShowUserInfos}>\r\n                            <IconSvg icon=\"file\"/>\r\n                        </div>\r\n                        <div className={`messagesSender__cta__iconContainer ${showInfo ? 'active': ''}`}\r\n                             onClick={this.toggleShowInfo}>\r\n                                <IconSvg icon=\"eye\"/>\r\n                        </div>\r\n                        <div className=\"messagesSender__cta__iconContainer\">\r\n                            <IconSvg icon=\"user\"/>\r\n                        </div>              \r\n                    </div>\r\n\r\n                    <div className=\"messagesSender__textareaContainer\">\r\n                        <AutoSizeTextArea \r\n                            value={this.state.messageInput}\r\n                            placeholder='message'\r\n                            onChange={this.messageChangeHandler}\r\n                            className= \"messagesSender__textarea\"\r\n                        />\r\n                         <IconSvg icon='send'\r\n                            onClick={this.sendMessageHandler}\r\n                            customClass='messagesSender__sender-btn'\r\n                        />\r\n                    </div>\r\n                    \r\n\r\n                   \r\n\r\n                </div>\r\n                \r\n                    \r\n            </Fragment>\r\n        )\r\n    }\r\n} \r\n\r\n\r\nconst mapStateToPros = state => {\r\n    return {\r\n        adminName: state.auth.adminName\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addANotification : (data) => dispatch(actions.addANotification(data)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToPros, mapDispatchToProps)(MessagesContainer);\r\n","import * as actionTypes from './actionsTypes';\r\n\r\n\r\nexport const toggleShowFullNavbar = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_SHOW_FULL_NAVBAR\r\n    }\r\n}\r\n\r\nexport const initNotifications = data => {\r\n    return {\r\n        type: actionTypes.INIT_NOTIFICATIONS,\r\n        notifData: data\r\n    }\r\n}\r\n\r\n\r\nexport const addANotification = data => {\r\n    return  {\r\n        type: actionTypes.ADD_A_NOTIFICATION,\r\n        userId: data.userId\r\n    }\r\n}\r\n\r\nexport const substractANotification = userId => {\r\n    return {\r\n        type: actionTypes.SUBSTRACT_A_NOTIFICATION,\r\n        userId: userId\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './MessagesUserInfos.css';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\nimport {timeStampGenerator} from '../../../utilities/timeStampGenerator';\r\nimport Button from '../../../components/button/Button';\r\nimport { connect } from 'react-redux';\r\nimport openSocket from 'socket.io-client';\r\n\r\n class MessagesUserInfos extends Component {\r\n\r\n    state = {  \r\n        currentNotes: null,\r\n\r\n        editingNote: false,\r\n\r\n        newNote: {\r\n            title: '',\r\n            text: ''\r\n        },\r\n        userPhone: '',\r\n        editUserPhone: false,\r\n\r\n        userStatus: null,\r\n    }\r\n\r\n    componentDidMount(){\r\n        let user = this.props.user;\r\n        user.notes.forEach(note => {\r\n            note.show = false\r\n        })\r\n\r\n        let userPhone = '';\r\n\r\n        if(user.phoneNumber && user.phoneNumber !== ''){\r\n            userPhone = user.phoneNumber\r\n        }\r\n        this.setState({ currentNotes: user.notes, userStatus: user.active, userPhone: userPhone})\r\n\r\n        const socket = openSocket('https://africauto.herokuapp.com');\r\n\r\n        socket.on('userLoggedIn', data => {\r\n            let userLoggedInId = data._id;\r\n            if(userLoggedInId === user._id){\r\n                this.setState({ userStatus: true})\r\n            }\r\n        })\r\n        socket.on('userLoggedOut', data => {\r\n            let userLoggedOutId = data._id;\r\n            if(userLoggedOutId === user._id){\r\n                this.setState({ userStatus: false})\r\n            }\r\n        })  \r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.user._id !== this.props.user._id){\r\n            let user = this.props.user;\r\n            user.notes.forEach(note => {\r\n                note.show = false\r\n            })\r\n            this.setState({ currentNotes: user.notes, userStatus: user.active, userPhone: user.phoneNumber, editUserPhone: false})\r\n        }\r\n    }\r\n\r\n    editPhoneNumberStateHandler = state => {\r\n        this.setState({ editUserPhone: state})      \r\n    }\r\n\r\n    editPhoneNumber = value => {\r\n        this.setState({ userPhone: value})\r\n    }\r\n\r\n    saveUserPhoneNumberHandler = () => {\r\n        let userId = this.props.user._id;\r\n        let url = \"https://africauto.herokuapp.com/user/edit-phone/\" + userId;\r\n        let method = \"PUT\";\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ phoneNumber: this.state.userPhone})\r\n        })\r\n        .then( res => {\r\n            if(res.status !== 200)\r\n            throw new Error('Failed to fetch messages')\r\n\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n                this.setState({\r\n                    userPhone: resData.userPhone,\r\n                    editUserPhone: false,\r\n\r\n                })\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        }) \r\n    }\r\n\r\n    editNewNoteHandler = (input, value) => {\r\n        this.setState( prevState => ({\r\n            ...prevState,\r\n            newNote: {\r\n                ...prevState.newNote,\r\n                [input]: value\r\n            }\r\n        }))\r\n    }\r\n\r\n    toggleAddingNewNoteHandler = () => {\r\n        const {editingNote} = this.state;\r\n        if(!editingNote){\r\n            this.setState({ editingNote: true})\r\n        } else {\r\n            let newNote = {\r\n                title: '',\r\n                text: ''\r\n            }\r\n            this.setState({ editingNote: false, newNote: newNote})\r\n        }\r\n    }\r\n\r\n    updateCurrentNote = (noteId, title, text) => {\r\n        let note = {\r\n            title,\r\n            text,\r\n            noteId\r\n        }\r\n        this.setState({ newNote: note, editingNote: true})\r\n    }\r\n\r\n    deleteNoteHandler = noteId => {\r\n        let url = \"https://africauto.herokuapp.com/user/delete-note/\" + noteId;\r\n        let userId = this.props.user._id;\r\n        let method = 'DELETE';\r\n\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ userId: userId})\r\n        })\r\n        .then(res =>  {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not delete supplier')\r\n            }\r\n            return res.json()\r\n        })\r\n        .then( resData => {\r\n            if(resData.message === 'Note deleted'){          \r\n                let newNotes = this.state.currentNotes.filter(note => note._id !== noteId);\r\n                this.setState({ currentNotes: newNotes})\r\n            }\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    submitNewNoteHandler = e => {\r\n        e.preventDefault();\r\n        const {newNote} = this.state\r\n\r\n        let noteId = newNote.noteId;\r\n\r\n        let url, method, body;\r\n\r\n        if(noteId){\r\n            url = \"https://africauto.herokuapp.com/user/edit-note/\" + this.props.user._id;\r\n            method ='PUT';\r\n            body = JSON.stringify({\r\n                title: newNote.title,\r\n                text: newNote.text,\r\n                noteId: noteId\r\n            })\r\n        } else {\r\n            url = \"https://africauto.herokuapp.com/user/add-note/\" + this.props.user._id;\r\n            method = \"POST\";\r\n            body = JSON.stringify({\r\n                title: newNote.title,\r\n                text: newNote.text,\r\n                timeStamp: timeStampGenerator(),\r\n                creator: this.props.adminName\r\n          })\r\n        }\r\n\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                      \"Content-Type\": \"application/json\"\r\n            },\r\n            body: body\r\n            })\r\n            .then( res => {\r\n                  if(res.status !== 200)\r\n                  throw new Error('Failed to fetch messages')\r\n      \r\n                  return res.json()\r\n            })\r\n            .then(resData => {\r\n               let newNote = {\r\n                    title: '',\r\n                    text: ''\r\n                }\r\n                this.setState({ currentNotes: resData.newNoteList, editingNote: false, newNote: newNote})\r\n            })\r\n            .catch( err => {\r\n                  console.log(err)\r\n            })\r\n          \r\n    }\r\n\r\n    toggleShowNoteHandler = noteId => {\r\n        const {currentNotes} = this.state;\r\n        currentNotes.forEach(note => {\r\n            if(note._id === noteId){\r\n                note.show = !note.show\r\n            }\r\n        })\r\n        this.setState({ currentNotes})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { currentNotes, editUserPhone,  editingNote, newNote, userStatus, userPhone  } = this.state\r\n        const { user } = this.props;\r\n        return (\r\n            <div className=\"messagesUserInfos\">\r\n                <header className=\"messagesUserInfos__header\">\r\n                    <div className=\"messagesUserInfos__header__name\">{user.firstName} {user.lastName}</div>\r\n                    <div className={`messagesUserInfos__header__status ${userStatus ? 'active' : 'away'}`}>\r\n                        {userStatus ? 'active' : 'away'}\r\n                    </div>\r\n                </header>\r\n\r\n                <div className=\"messagesuserInfos__contact\">\r\n                    <div className=\"messagesUserInfo__contact__group\">\r\n                        <IconSvg icon=\"email\"/>\r\n                        <span>{user.email}</span>\r\n                    </div>\r\n                  \r\n                    <div className=\"messagesUserInfo__contact__group messagesUserInfo__contact__group--editable\">               \r\n                        <IconSvg icon=\"phone\"/>\r\n                        <div className={`messagesUserInfo__contact__group__value ${editUserPhone ? 'edit':'' }`}\r\n                            onClick={() => this.editPhoneNumberStateHandler(true)}>\r\n                            <div className=\"messagesUserInfo__contact__group__value--value\">{userPhone && userPhone !== '' ? userPhone : 'N.D.'}</div>\r\n                            <input className=\"messagesUserInfo__contact__group__value--input\"\r\n                                   value={userPhone !== undefined ? userPhone: ''}\r\n                                   onChange={e => this.editPhoneNumber(e.target.value)}/>\r\n                        </div>                      \r\n                    </div>\r\n\r\n                    <div className={`messagesUserInfo__contact__cta\r\n                                    ${editUserPhone ? 'show': ''}`}>\r\n                        <Button color=\"primary\"\r\n                                onClick={this.saveUserPhoneNumberHandler}>\r\n                            Save\r\n                        </Button>\r\n                        <Button color=\"primary\"\r\n                                onClick={() => this.editPhoneNumberStateHandler(false)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <section className=\"messagesUserInfos__notes\"> \r\n\r\n                    <div className=\"messagesUserInfos__notes__title\">\r\n                        <span>Notes</span>\r\n                        <div className=\"messagesUserInfos__notes__title__icon\">\r\n                            <IconSvg icon=\"add\"\r\n                                     onClick={this.toggleAddingNewNoteHandler}\r\n                            />\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    {editingNote && (\r\n                        <form className=\"messagesUserInfos__notes__form\"\r\n                          onSubmit={e => this.submitNewNoteHandler(e)}>\r\n                        <div className=\"messagesUserInfos__notes__form__title\">New note</div>\r\n                        <input className=\"messagesUserInfos__notes__form__input\"\r\n                               value={newNote.title}\r\n                               placeholder='Title' \r\n                               onChange={e => this.editNewNoteHandler('title', e.target.value)}       \r\n                        />\r\n                        <textarea className=\"messagesUserInfos__notes__form__textarea\"\r\n                               value={newNote.text}\r\n                               placeholder='Details...'  \r\n                               onChange={e => this.editNewNoteHandler('text', e.target.value)}\r\n                        />\r\n                        \r\n                        <div className=\"messagesUserInfos__notes__form__cta\">\r\n                                <Button color=\"primary\" type=\"submit\">\r\n                                    Add\r\n                                </Button>\r\n                                <Button color=\"primary\"\r\n                                        onClick={this.toggleAddingNewNoteHandler}>\r\n                                    Cancel\r\n                                </Button>\r\n                        </div>\r\n                    </form>\r\n                    )}\r\n                    \r\n\r\n                    {currentNotes && !editingNote && (\r\n                        <ul className=\"messagesUserInfos__notes__list\">\r\n                            {currentNotes.map( note => (\r\n                                <li key={note._id} className={`messagesUserInfos__notes__list__item\r\n                                                            ${note.show ? 'show' : ''}`}>\r\n                                    <div className={`messagesUserInfos__notes__list__item__title`}\r\n                                         onClick={() => this.toggleShowNoteHandler(note._id)}>\r\n                                        <span>{note.title}</span>\r\n\r\n                                        <div className=\"messagesUserInfos__notes__list__item__title__cta\">\r\n                                            <IconSvg icon=\"pencil\"\r\n                                                     onClick={() => this.updateCurrentNote(note._id, note.title, note.text)}/>\r\n                                            <IconSvg icon=\"bin\" \r\n                                                    onClick={() => this.deleteNoteHandler(note._id)}/>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <p className=\"messagesUserInfos__notes__list__item__text\">\r\n                                        {note.text}\r\n                                    </p>\r\n                                </li>\r\n                            ))}\r\n                            \r\n                        </ul>\r\n                    )}\r\n                    \r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        adminName: state.auth.adminName\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MessagesUserInfos)\r\n","import React, { Component } from 'react';\r\nimport './Messages.css';\r\nimport MessagesNavbar from './messagesNavbar/MessagesNavbar';\r\nimport MessagesContainer from './messagesContainer/MessagesContainer';\r\nimport { connect } from 'react-redux';\r\nimport { timeStampGenerator } from '../../utilities/timeStampGenerator';\r\nimport * as actions from '../../store/actions';\r\nimport Loader from '../../components/loader/Loader';\r\nimport MessagesUserInfos from './messagesUserInfo/MessagesUserInfos';\r\n\r\n class Messages extends Component {\r\n    state = {\r\n        messages: null,    \r\n        loading: true,\r\n        requestedUser: null,  \r\n        showUserInfos: true \r\n    }\r\n\r\n    componentDidMount(){\r\n     let url = \"https://africauto.herokuapp.com/messages\";\r\n     let method = \"GET\";\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        .then( res => {\r\n            if(res.status !== 200)\r\n            throw new Error('Failed to fetch messages')\r\n\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n            if(resData.messages[0].messages.length !== 0){\r\n                this.setState({ messages: resData.messages,\r\n                    requestedMessageUserId: resData.messages[0]._id},\r\n                    () => this.fetchUserMessages(resData.messages[0]._id))\r\n            } else return         \r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })          \r\n    }\r\n\r\n    changeConvoHandler = userId => {\r\n        this.fetchUserMessages(userId)\r\n    }\r\n\r\n    fetchUserMessages = userId => {    \r\n      let url = \"https://africauto.herokuapp.com/messages/admin-update/\" + userId;\r\n      let method = \"POST\";\r\n      let timeStamp = timeStampGenerator();\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                adminName: this.props.adminName,\r\n                timeStamp: timeStamp\r\n            })\r\n        })\r\n        .then( res => {\r\n            if(res.status !== 200)\r\n            throw new Error('Failed to fetch messages')\r\n\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n            this.setState({ \r\n                requestedUser: resData.user,\r\n                loading: false\r\n            })\r\n            this.props.substractANotification(userId)\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    updateNavbar = data => {\r\n        let userId = data.userId;\r\n        let convoToBeUpdated = this.state.messages.filter(i => i._id === userId)[0];\r\n        convoToBeUpdated.messages[0] = data;\r\n        let newMessagesState = this.state.messages.filter(i => i._id !== userId);\r\n        let newData = [convoToBeUpdated, ...newMessagesState];\r\n        this.setState({messages: newData})\r\n    }\r\n\r\n    toggleShowUserInfos = () => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            showUserInfos: !prevState.showUserInfos\r\n        }))\r\n    }\r\n \r\n    \r\n    render() {\r\n\r\n        const {requestedUser, loading, messages, showUserInfos} = this.state;\r\n\r\n        let messagesContainer = <Loader />\r\n        if(requestedUser && requestedUser.messages){\r\n            messagesContainer = <MessagesContainer \r\n                                        messages={requestedUser.messages}\r\n                                        userId={requestedUser._id}\r\n                                        updateNavbar={this.updateNavbar}\r\n                                        playNotificationSound={this.props.playNotificationSound}\r\n                                        loading={loading}\r\n                                        toggleShowUserInfos={this.toggleShowUserInfos}/>\r\n        }\r\n\r\n        return (\r\n            <section className=\"messages\">\r\n                <div className=\"messages__navbar\">\r\n                    {requestedUser && (\r\n                        <MessagesNavbar messages={messages}\r\n                                        requestedMessageUserId={requestedUser._id} \r\n                                        onchangeConvoHandler={this.changeConvoHandler}/>\r\n                    )}\r\n                </div>\r\n                <section className={`messages__container ${showUserInfos ? 'full': ''}`}>\r\n                        {messagesContainer}\r\n                </section>\r\n                <div className={`messages__userInfos ${showUserInfos ? 'show': ''}`}>\r\n                    {requestedUser &&  <MessagesUserInfos user={requestedUser}/>}              \r\n                </div>\r\n     \r\n            </section>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        adminName: state.auth.adminName\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        substractANotification: userId => dispatch(actions.substractANotification(userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nclass ConnectionCounter extends Component {\r\n\r\n    state = {\r\n        data: null,\r\n        globalDataSet: null,\r\n\r\n    }\r\n    componentDidMount(){\r\n        // console.log('nofew', this.props.data);\r\n        let data = this.props.data;\r\n        let tempData = {};\r\n        let finalData = {}\r\n\r\n        data.forEach(i => {\r\n            let a = i.start.split(' ')[0];\r\n            let month = a.split('-')[0];\r\n            let day = a.split('-')[1];\r\n            let year = a.split('-')[2];\r\n\r\n            let date = `${day}-${month}-${year}`;\r\n            let shortDate = `${day}-${month}`;\r\n\r\n            if(!Object.keys(tempData ).includes(shortDate)){\r\n                tempData  = {\r\n                    ...tempData ,\r\n                    [shortDate] : 1\r\n                }\r\n            } else {\r\n                tempData  = {\r\n                    ...tempData ,\r\n                    [shortDate] : tempData [shortDate] + 1\r\n                }\r\n            }           \r\n        })\r\n\r\n        let datasets = [];\r\n            Object.keys(tempData).forEach(i => {\r\n                datasets = [...datasets, tempData[i]]\r\n            })\r\n\r\n            finalData =  {\r\n                labels : Object.keys(tempData),\r\n                datasets: [\r\n                    {\r\n                        label: 'Number of connections',\r\n                        data: datasets,\r\n                        backgroundColor: 'transparent'\r\n                    }\r\n                ]\r\n            } \r\n\r\n        this.setState({ data: finalData, globalDataSet: data})\r\n\r\n    }\r\n    render() {\r\n        const {data} = this.state;\r\n\r\n        let chart = <div>loading</div>\r\n\r\n        if(data){\r\n            chart = <Line \r\n                        options={{\r\n                            responsive: true,\r\n                            scales: {\r\n                                yAxes: [{\r\n                                    ticks: {\r\n                                        beginAtZero: true,\r\n                                        stepSize: 1\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }}\r\n                        data = {data}\r\n                  />\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"user-account__chart\">\r\n                <div className=\"user-account__chart__container\">\r\n                   {chart}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConnectionCounter;\r\n\r\n","import React, { Component, Fragment } from 'react';\r\nimport './userAccount.css';\r\nimport ProductCard from '../../components/product/Product';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions';\r\nimport IconSvg from '../../utilities/svg/svg';\r\nimport ConnectionCounter from './userAccountCharts/ConnectionCounter';\r\n\r\nclass userAccount extends Component {\r\n\r\n    state = {\r\n        user: null,\r\n        userFavoriteProducts: null,\r\n        userViewedProducts: null\r\n    }\r\n\r\n    componentDidMount(){\r\n       this.fetchUserAccountDetails()\r\n    }\r\n\r\n    fetchUserAccountDetails = () => {\r\n        let url = \"https://africauto.herokuapp.com/admin/user/\" + this.props.match.params.userId;\r\n\r\n        fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        })\r\n        .then(res => {\r\n             if (res.status !== 200) {\r\n             throw new Error(\"Failed to fetch users\");\r\n             }\r\n             return res.json();\r\n         })\r\n         .then(resData => {\r\n             this.setState({ user: resData.user,\r\n                            userFavoriteProducts: resData.favorites,\r\n                            userViewedProducts: resData.viewedProducts})\r\n         })\r\n         .catch(err => {\r\n             console.log(err);\r\n         });\r\n    }\r\n\r\n    elapsedTimeCalculator = data => {\r\n        let hourDisplayedElapsedTime;\r\n        let minuteDisplayedElapsedTime;\r\n        let secondsDisplayedElapsedTime\r\n\r\n        let connectionEnd = data.end.substr(3, 2) + '-' + data.end.substr(0, 2) + '-' + data.end.substr(6, 4) + ' ' + data.end.split(' ')[1]\r\n        let connectionStart = data.start.substr(3, 2) + '-' + data.start.substr(0, 2) + '-' + data.start.substr(6, 4) + ' ' + data.start.split(' ')[1]\r\n        let elapsedTime = new Date(connectionEnd) - new Date(connectionStart)\r\n    \r\n        if( (elapsedTime / 1000 / 60) > 60){\r\n            //elapsed time is bigger than one hour\r\n            hourDisplayedElapsedTime = Math.floor(elapsedTime / 1000 / 60 / 60) + 'h'\r\n            minuteDisplayedElapsedTime = Math.floor((elapsedTime / 1000 / 60) % 60)  + 'min'\r\n            secondsDisplayedElapsedTime = Math.floor((elapsedTime / 1000 / 60) % 60) % 60 + 'sec'\r\n            return `${hourDisplayedElapsedTime} ${minuteDisplayedElapsedTime} ${secondsDisplayedElapsedTime}`\r\n        } else {\r\n                if( (elapsedTime / 1000) > 60){\r\n                    //elapsed time is bigger than one minute\r\n                    minuteDisplayedElapsedTime = (Math.floor(elapsedTime / 1000 / 60)) + 'min';\r\n                    secondsDisplayedElapsedTime = (elapsedTime / 1000) % 60 + 'sec'\r\n                    return `${minuteDisplayedElapsedTime} ${secondsDisplayedElapsedTime}`\r\n                    } \r\n                    else return ((elapsedTime / 1000) + 'sec') \r\n                            \r\n                }\r\n    }\r\n\r\n    render() {\r\n        const { user, userFavoriteProducts, userViewedProducts } = this.state;\r\n        let userData;\r\n\r\n        let userFavoriteProductsList = (\r\n            <div className=\"user-account__products-list--noProduct\">\r\n                This user doesn't have favorite products yet\r\n            </div>\r\n        ) \r\n\r\n        if(userFavoriteProducts && userFavoriteProducts.length > 0){\r\n            userFavoriteProductsList = (\r\n                        <ul className=\"user-account__products-list\">\r\n                                {userFavoriteProducts.map( product => (\r\n                                        <ProductCard\r\n                                            key={product._id}\r\n                                            id={product._id}\r\n                                            mainImg={product.general.mainImgUrl}\r\n                                            made={product.general.made}\r\n                                            model={product.general.model}\r\n                                            year={product.general.year}\r\n                                            price={product.general.price}\r\n                                            nbKilometers={product.general.nbKilometers}\r\n                                            gazol={product.general.gazol}\r\n                                            transmissionType={product.general.transmissionType}\r\n                                            goToProd={() => {\r\n                                            this.props.setProductRequestedId(product._id);\r\n                                            this.props.history.push(`/car/${product._id}`);\r\n                                            }}\r\n                                        />\r\n                                    ))}\r\n                            </ul>\r\n            )\r\n        }\r\n\r\n        if(!user) {\r\n            userData = <div>Loading...</div>\r\n        } else {\r\n            userData = (\r\n                    <div className=\"user-account\">\r\n\r\n                        <header className=\"user-account__header\">\r\n\r\n                            <div className=\"user-account__header__id\">          \r\n                                <div className=\"user-account__header__id__avatar\">\r\n                                    {user.firstName.slice(0, 1)}{user.lastName.slice(0, 1)}\r\n                                </div>\r\n                                <div className=\"user__account__header__id__name\">{user.firstName} {user.lastName}</div>\r\n                            </div>\r\n                        \r\n                            <div className=\"user-account__header__infos\">\r\n                                <div className=\"user-account__header__infos__group\">\r\n                                    <IconSvg icon=\"email\"/>\r\n                                   <div>{user.email}</div>\r\n                                </div>\r\n                                <div className=\"user-account__header__infos__group\">\r\n                                    <IconSvg icon=\"phone\"/>\r\n                                   <div>{user.phoneNumber && user.phoneNumber !== ''? user.phoneNumber : 'N.D.' }</div>\r\n                                </div>\r\n                                \r\n                            </div>\r\n\r\n                      \r\n                                <div className={`user-account__header__status\r\n                                                ${user.active ? 'active' : 'away'}`}>\r\n                                    {user.active ? 'active' : 'away'}\r\n                                </div>\r\n\r\n                            \r\n                        </header>\r\n\r\n                        <section className=\"user-account__section user-account__favorites\">\r\n                            <h3 className=\"user-account__section-title\">Favorite Products</h3>\r\n                            {userFavoriteProductsList}\r\n                        </section>\r\n\r\n                        <section className=\"user-account__section user-account__viewed\">\r\n                            <h3 className=\"user-account__section-title\">Viewed Products</h3>\r\n                            <ul className=\"user-account__products-list\">\r\n                                {\r\n                                    userViewedProducts.map( product => (\r\n                                        <ProductCard\r\n                                            key={product._id}\r\n                                            id={product._id}\r\n                                            mainImg={product.general.mainImgUrl}\r\n                                            made={product.general.made}\r\n                                            model={product.general.model}\r\n                                            year={product.general.year}\r\n                                            price={product.general.price}\r\n                                            nbKilometers={product.general.nbKilometers}\r\n                                            gazol={product.general.gazol}\r\n                                            transmissionType={product.general.transmissionType}\r\n                                            goToProd={() => {\r\n                                            this.props.setProductRequestedId(product._id);\r\n                                            this.props.history.push(`/car/${product._id}`);\r\n                                            }}\r\n                                        />\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                        </section>\r\n\r\n                        <section className=\"user-account__section\">\r\n                                <h3 className=\"user-account__section-title\">Connection History</h3>\r\n                                \r\n                                <ConnectionCounter data={user.connection } />\r\n\r\n                                {/* <table className=\"user-account__connection__table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Start</th>\r\n                                            <th>End</th>\r\n                                            <th>Durée</th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {\r\n                                            user.connection.map(connection => {\r\n                                                let data = {\r\n                                                            end: connection.end, \r\n                                                            start: connection.start\r\n                                                        }\r\n                                               let displayedElapsedTime = this.elapsedTimeCalculator(data)\r\n\r\n                                                return (\r\n                                                    <tr className=\"user-account__connection__table__data\"\r\n                                                        key={connection._id}>\r\n                                                        <td>{connection.start}</td>\r\n                                                        <td>{connection.end !== 'none' ? connection.end : 'active'}</td>\r\n                                                        <td>{displayedElapsedTime.includes(NaN) ? 'to be determined' : displayedElapsedTime }</td>\r\n                                                    </tr>\r\n                                                )\r\n                                                \r\n                                            })\r\n                                        }\r\n                                    </tbody>\r\n                                </table> */}\r\n                        </section>\r\n\r\n         \r\n                    </div>              \r\n\r\n            )\r\n        }\r\n        return userData\r\n\r\n        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      setProductRequestedId: (prodId) =>dispatch(actions.setRequestedProductId(prodId)),\r\n      };\r\n  \r\n  };\r\n\r\nexport default connect(null, mapDispatchToProps)(userAccount)\r\n","import React from 'react';\r\nimport Title from '../../components/title/Title';\r\nimport Button from '../../components/button/Button'\r\n\r\nconst SuppliersList = props => {\r\n    let suppliers = props.suppliers;\r\n    return (\r\n        <ul className=\"suppliers__list\">\r\n                    <Title title = \"Suppliers\">\r\n                        <div className=\"suppliers__addButton\"\r\n                              onClick={() => props.supplierCurrentViewHandler('suppliersForm')}>\r\n                            Add\r\n                        </div>\r\n                    </Title>\r\n                    {suppliers.map(supplier => (\r\n                        <li className=\"suppliers__list__item\"\r\n                            key={supplier._id}>\r\n                            <div className=\"suppliers__list__item__header\">\r\n                                <h3 className=\"suppliers__list__item__header__name\">{supplier.name}</h3> \r\n                                <div className=\"suppliers__list__item__header__cta\">                     \r\n                                    <div className=\"suppliers__list__item__header__cta__btn suppliers__list__item__header__cta__btn--edit\"\r\n                                         onClick={() => props.editSupplierHandler(supplier)}>\r\n                                        Edit\r\n                                    </div>\r\n                                    <div className=\"suppliers__list__item__header__cta__btn suppliers__list__item__header__cta__btn--delete\"\r\n                                        onClick={() => props.deleteSupplierHandler(supplier._id)}>\r\n                                        Delete\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"suppliers__list__item__infoGroup\">\r\n                                <div className=\"suppliers__list__item__info\">{supplier.email}</div>\r\n                                <div className=\"suppliers__list__item__info\">{supplier.phoneNumber}</div>\r\n                                <div className=\"suppliers__list__item__info\">{supplier.address}</div>\r\n                            </div>\r\n\r\n                            \r\n\r\n                            <div className=\"suppliers__list__item__nav\">\r\n                                <div className={`suppliers__list__item__nav__item\r\n                                                ${supplier.currentView === 'contacts' ? 'active': ''}`}\r\n                                     onClick={() => props.supplierNavigationHandler(supplier._id, 'contacts')}>Contacts</div>\r\n                                {/* <div className={`suppliers__list__item__nav__item\r\n                                                ${supplier.currentView === 'products' ? 'active': ''}`}\r\n                                    onClick={() => props.supplierNavigationHandler(supplier._id, 'products')}>Products</div> */}\r\n                            </div>\r\n\r\n                            <table className=\"suppliers__list__item__responsiblesTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Email</th>\r\n                                        <th>Phone Number</th>\r\n                                        <th>Poste</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {supplier.responsibles.map(responsible => (\r\n                                        <tr className=\"suppliers__list__item__responsiblesTable__row\"\r\n                                            key={responsible}>\r\n                                            <td className=\"suppliers__list__item__responsiblesTable__row__data\">{responsible.name}</td>\r\n                                            <td className=\"suppliers__list__item__responsiblesTable__row__data\">{responsible.email}</td>\r\n                                            <td className=\"suppliers__list__item__responsiblesTable__row__data\">{responsible.phoneNumber}</td>\r\n                                            <td className=\"suppliers__list__item__responsiblesTable__row__data\">{responsible.title}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                                \r\n                            </table>\r\n                        </li>\r\n                    )\r\n                    )}\r\n                </ul>\r\n    )\r\n}\r\n\r\nexport default SuppliersList\r\n","import React from 'react';\r\nimport Button from '../../components/button/Button';\r\nimport Input from '../../components/formInput/FormInput';\r\nimport Title from '../../components/title/Title'\r\n\r\nconst SuppliersForm = props => {\r\n\r\n    let addSupplierForm = props.addSupplierForm,\r\n        responsiblesForm = props.responsiblesForm\r\n\r\n    return (\r\n        <form className=\"suppliers__form\"\r\n                      onSubmit={e => props.addSupplierHandler(e, addSupplierForm, responsiblesForm)}>\r\n                    <Title title=\" Add supplier\">\r\n                        <div className=\"suppliers__addButton\"\r\n                              onClick={() => props.supplierCurrentViewHandler('suppliersList')}>\r\n                            List\r\n                        </div>\r\n                    </Title>                  \r\n                    {\r\n                        Object.keys(addSupplierForm).map(input =>(\r\n                            <Input \r\n                                className=\"add-product__input\"\r\n                                label={input}\r\n                                key={input}\r\n                                id={input}\r\n                                placeholder={input}\r\n                                control = 'input'\r\n                                type={addSupplierForm[input].type}\r\n                                value={addSupplierForm[input].value}\r\n                                onChange={props.addSupplierFormChangeHandler}\r\n                                formType='addSupplierForm'\r\n                            />\r\n                        ))\r\n                    }\r\n\r\n\r\n\r\n                    <div className=\"suppliers__form__add-responsible\">\r\n                        <h2 className=\"suppliers__form__add-responsible__title\">Responsible</h2>\r\n                        <div className=\"suppliers__form__add-responsible__cta\"\r\n                             onClick={props.addResponsibleHandler}>+</div>\r\n                    </div>\r\n\r\n                    {\r\n\r\n                        Object.keys(responsiblesForm).length > 0 && Object.keys(responsiblesForm).map( (responsible, index) => {   \r\n                  \r\n\r\n                       return (\r\n                           <div className=\"suppliers__form__responsible\"\r\n                                key={index}>\r\n                                <h3 className=\"suppliers__form__responsible__rank\">{responsible}</h3>\r\n                                {\r\n                                    Object.keys(responsiblesForm[responsible]).map((input, index) => (\r\n                                        <Input \r\n                                            className=\"suppliers__form__responsible__input\"\r\n                                            label={input}\r\n                                            key={index}\r\n                                            id={responsible}\r\n                                            placeholder={input}\r\n                                            control = 'input'\r\n                                            type={responsiblesForm[responsible][input].type}\r\n                                            value={responsiblesForm[responsible][input].value}\r\n                                            onChange={props.responsibleInputHandler.bind(this, input)}\r\n                                            formType='responsiblesForm'\r\n                                        />\r\n                                    ))\r\n                                }\r\n                           </div>\r\n                            )\r\n                        })                       \r\n                        \r\n                    }\r\n\r\n                    <div className=\"suppliers__form__cta\">\r\n                        <Button color=\"primary\" type='submit'>\r\n                            {props.editingMode ? 'Update' : 'Add'}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n    )\r\n}\r\n\r\nexport default SuppliersForm\r\n","import React, { Component } from 'react';\r\nimport './Suppliers.css';\r\nimport Loader from '../../components/loader/Loader';\r\nimport SuppliersList from './SuppliersList';\r\nimport SuppliersForm from './SuppliersForm';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions'\r\n\r\nclass Suppliers extends Component {\r\n\r\n    state = {\r\n        addSupplierForm: {\r\n            name: {\r\n                value: ''\r\n            },\r\n\r\n            email: {\r\n                value: '',\r\n                type: 'email'\r\n            },\r\n\r\n            phoneNumber: {\r\n                value: ''\r\n            },\r\n\r\n            address: {\r\n                value: ''\r\n            }\r\n        },\r\n        responsiblesForm: {},\r\n        suppliers: null,\r\n        loading: true,\r\n        currentView: 'suppliersList',\r\n        editingMode: false,\r\n        currentSupplierBeingEditedId: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        let suppliers = this.props.suppliers;\r\n        if(suppliers){\r\n            this.setState({ suppliers: this.props.suppliers, loading: false })\r\n        } else {\r\n            this.fetchSuppliers()\r\n        }\r\n    }\r\n\r\n    fetchSuppliers = () => {\r\n        let url = 'https://africauto.herokuapp.com/suppliers';  \r\n        fetch(url, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n        .then(res => {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not fetch suppliers')\r\n            }\r\n\r\n            return res.json()\r\n        })\r\n        .then(resData => {\r\n            let suppliers = resData.suppliers;\r\n            suppliers.forEach(supplier => {\r\n                supplier.currentView = 'contacts'\r\n            })\r\n\r\n            this.setState({suppliers: suppliers, loading: false })\r\n            this.props.setSuppliers(suppliers)\r\n      \r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    deleteSupplierHandler = supplierId => {\r\n        const {suppliers} = this.state;\r\n        let url = 'https://africauto.herokuapp.com/suppliers/delete-supplier/' + supplierId;\r\n        let method = 'DELETE'\r\n\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res =>  {\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not delete supplier')\r\n            }\r\n            return res.json()\r\n        })\r\n        .then( resData => {\r\n            console.log(resData);\r\n            let newSuppliersList = suppliers.filter(supplier => supplier._id !== supplierId);\r\n            this.props.setSuppliers(newSuppliersList)\r\n            this.setState({ suppliers: newSuppliersList})\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    addSupplierHandler = (e, addSupplierForm, responsiblesForm) => {\r\n        e.preventDefault();\r\n        const {editingMode, currentSupplierBeingEditedId, suppliers} = this.state;\r\n        let url = 'https://africauto.herokuapp.com/suppliers/add-supplier';\r\n        let method = 'POST';\r\n        let body = {\r\n                name: addSupplierForm.name.value,\r\n                email: addSupplierForm.email.value,\r\n                phoneNumber: addSupplierForm.phoneNumber.value,\r\n                address: addSupplierForm.address.value,\r\n                responsibles: responsiblesForm\r\n        }\r\n        if(editingMode){\r\n            method = 'PUT';\r\n            url = 'https://africauto.herokuapp.com/suppliers/edit-supplier';\r\n            body = {...body, _id: currentSupplierBeingEditedId}\r\n        }\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n        .then( res => {\r\n            if(res.status === 422){\r\n                throw new Error('Add supplier failed')\r\n            }         \r\n\r\n            if(res.status !== 200 && res.status !== 201){\r\n                throw new Error('Could not add supplier')\r\n            }\r\n\r\n            return res.json()\r\n        })\r\n        .then( resData => {\r\n            let newSuppliersList = [];\r\n            let newSupplier = {\r\n                ...resData.supplier,\r\n                currentView: 'contacts'\r\n            }\r\n            if(editingMode){\r\n              let editedSupplierIndex = suppliers.findIndex(supplier => supplier._id === resData.supplier._id);\r\n              newSuppliersList = [...suppliers];\r\n              newSuppliersList[editedSupplierIndex] = newSupplier\r\n\r\n            } else {       \r\n                if(suppliers !== null){\r\n                     newSuppliersList = [\r\n                        ...suppliers,\r\n                        newSupplier\r\n                    ]\r\n                } else {\r\n                    newSuppliersList = [newSupplier]\r\n                }\r\n            }\r\n            this.props.setSuppliers(newSuppliersList)\r\n            this.setState({ suppliers: newSuppliersList, currentView: 'suppliersList' }, () => this.resetFormHandler())\r\n\r\n        })\r\n        .catch( err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    addSupplierFormChangeHandler = (input, value) => {\r\n            this.setState(prevState => {\r\n                const updatedForm = {\r\n                    ...prevState.addSupplierForm,\r\n                    [input]:{\r\n                        ...prevState.addSupplierForm[input],\r\n                        value: value\r\n                    }\r\n                }\r\n                return {\r\n                    addSupplierForm: updatedForm\r\n                }\r\n            })   \r\n    }\r\n\r\n    responsibleInputHandler = (input, responsible, value) => {\r\n        this.setState(prevState => {\r\n            const updatedForm = {\r\n                ...prevState.responsiblesForm,\r\n                [responsible]: {\r\n                    ...prevState.responsiblesForm[responsible],\r\n                    [input] : {\r\n                        ...prevState.responsiblesForm[responsible][input],\r\n                        value: value\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            return {\r\n                responsiblesForm: updatedForm\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    addResponsibleHandler = () => {\r\n        let currentResponsibles = this.state.responsiblesForm;\r\n        let numberOfCurrentResponsibles = Object.keys(currentResponsibles).length;\r\n\r\n        let newResponsible = `0${numberOfCurrentResponsibles+1}-Responsible`\r\n\r\n         currentResponsibles = {\r\n            ...currentResponsibles,\r\n            [newResponsible] : {\r\n                name: {\r\n                    value: '',\r\n                    type: 'text'\r\n                },\r\n                email: {\r\n                    value: '',\r\n                    type: 'email'\r\n                },\r\n                phoneNumber: {\r\n                    value: '',\r\n                    type: 'text'\r\n                },\r\n                title: {\r\n                    value: '',\r\n                    type: 'text'\r\n                }\r\n            }\r\n        }\r\n        this.setState({ responsiblesForm: currentResponsibles})\r\n       \r\n    }\r\n\r\n    supplierNavigationHandler = (id, requestedView) => {\r\n        let suppliers = this.state.suppliers;\r\n        suppliers.forEach(supplier => {\r\n            if(supplier._id === id){\r\n                supplier.currentView = requestedView\r\n            }\r\n        })\r\n        this.setState({ suppliers})\r\n    }\r\n\r\n    resetFormHandler = () => {\r\n      let  addSupplierForm = {\r\n            name: {\r\n                value: ''\r\n            },\r\n\r\n            email: {\r\n                value: '',\r\n                type: 'email'\r\n            },\r\n\r\n            phoneNumber: {\r\n                value: ''\r\n            },\r\n\r\n            address: {\r\n                value: ''\r\n            }\r\n        };\r\n        let responsiblesForm = {};\r\n        this.setState({ \r\n            addSupplierForm : addSupplierForm, \r\n            responsiblesForm : responsiblesForm, \r\n            editingMode: false, \r\n            currentView: 'suppliersList',\r\n            currentSupplierBeingEditedId: null})\r\n    }\r\n\r\n\r\n    supplierCurrentViewHandler = view => {\r\n        if(view === 'suppliersList' && this.state.editingMode === true){\r\n            this.resetFormHandler()\r\n        } else {\r\n            this.setState({ currentView: view})\r\n        }\r\n    }\r\n\r\n    editSupplierHandler = supplier => {\r\n        let addSupplierForm = {\r\n            name: {\r\n                value: supplier.name\r\n            },\r\n\r\n            email: {\r\n                value: supplier.email,\r\n                type: 'email'\r\n            },\r\n\r\n            phoneNumber: {\r\n                value: supplier.phoneNumber\r\n            },\r\n\r\n            address: {\r\n                value: supplier.address\r\n            },\r\n        }\r\n        let responsibles = supplier.responsibles;\r\n        let responsiblesForm = {}\r\n        responsibles.map( (responsible, index) => {\r\n            let newResponsible = `0${index+1}-Responsible`\r\n            responsiblesForm = {\r\n                ...responsiblesForm,\r\n                [newResponsible]: {\r\n                    name: {\r\n                        value: responsible.name,\r\n                        type: 'text'\r\n                    },\r\n                    email: {\r\n                        value: responsible.email,\r\n                        type: 'email'\r\n                    },\r\n                    phoneNumber: {\r\n                        value: responsible.phoneNumber,\r\n                        type: 'text'\r\n                    },\r\n                    title: {\r\n                        value: responsible.title,\r\n                        type: 'text'\r\n                    }\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            addSupplierForm: addSupplierForm,\r\n            responsiblesForm: responsiblesForm,\r\n            currentView: 'suppliersForm',\r\n            editingMode: true,\r\n            currentSupplierBeingEditedId: supplier._id\r\n        })     \r\n    }\r\n\r\n    render() {\r\n\r\n        const {addSupplierForm, responsiblesForm, suppliers, loading, currentView, editingMode} = this.state;\r\n\r\n        let suppliersList = <Loader />\r\n        if(!loading && suppliers){\r\n            suppliersList = <SuppliersList suppliers={suppliers}\r\n                                           supplierNavigationHandler={this.supplierNavigationHandler}\r\n                                           supplierCurrentViewHandler={this.supplierCurrentViewHandler} \r\n                                           \r\n                                           editSupplierHandler={this.editSupplierHandler}\r\n                                           deleteSupplierHandler={this.deleteSupplierHandler}/>\r\n        }\r\n\r\n        let suppliersForm =  <SuppliersForm addSupplierForm ={addSupplierForm}\r\n                                            responsiblesForm = {responsiblesForm}\r\n                                            addSupplierHandler={this.addSupplierHandler}\r\n                                            editingMode={editingMode}\r\n\r\n                                            addResponsibleHandler={this.addResponsibleHandler}                       \r\n                                            addSupplierFormChangeHandler={this.addSupplierFormChangeHandler}\r\n                                            responsibleInputHandler={this.responsibleInputHandler}\r\n\r\n                                            supplierCurrentViewHandler={this.supplierCurrentViewHandler}/>\r\n\r\n        return (\r\n            <div className=\"suppliers\">\r\n                {currentView === 'suppliersList' && suppliersList}\r\n                {currentView === 'suppliersForm' && suppliersForm}                              \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setSuppliers: suppliers => dispatch(actions.setSuppliers(suppliers))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        suppliers: state.suppliers.suppliers\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Suppliers);","import React, { Component } from 'react'\r\nimport AddAdmin from '../../pages/auth/signup/Signup';\r\nimport './AdminManager.css'\r\n\r\nclass AdminManager extends Component {\r\n\r\n    state= {\r\n        loading: false,\r\n        error: false\r\n    }\r\n\r\n    setLoadingToTrue = () => {\r\n        this.setState({ loading: true})\r\n    }\r\n\r\n    setLoadingToFalse = () => {\r\n        this.setState( { loading: false})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"admin-manager\">            \r\n                <AddAdmin setLoadingToTrue={this.setLoadingToTrue}\r\n                            setLoadingToFalse = {this.setLoadingToFalse}\r\n                            // setErrors={this.setErrors}\r\n                            // resetErrors={this.resetErrors}\r\n                />\r\n\r\n          </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  AdminManager\r\n","import React, { Component } from 'react'\r\nimport './Navtop.css';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Navtop extends Component {\r\n\r\n    state = {\r\n        users: null,\r\n        showUsersList: false,\r\n        loading: true\r\n    }\r\n\r\n    componentWillMount(){\r\n        document.addEventListener('mousedown', this.handleClick, false)\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n         document.removeEventListener('mousedown', this.handleClick, false)\r\n    }\r\n\r\n    handleClick = e => {         \r\n        if(this.target && this.target.contains(e.target)){\r\n            return\r\n        } else {\r\n            if(this.state.showUsersList){\r\n                this.hideUsersList()\r\n            }\r\n            \r\n        }     \r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.fetchUsersHandler()\r\n    }\r\n\r\n    showUsersListToggler = () => {\r\n        this.setState( prevState => ({\r\n            ...prevState,\r\n            showUsersList: !prevState.showUsersList\r\n        }))\r\n    }\r\n\r\n    hideUsersList = () => {\r\n        this.setState({showUsersList: false})\r\n    }\r\n\r\n    fetchUsersHandler = () => {\r\n        let url = \"https://africauto.herokuapp.com/admin/connected-users\";\r\n       fetch(url, {\r\n           headers: {\r\n               \"Content-Type\": \"application/json\"\r\n           },\r\n       })\r\n       .then(res => {\r\n            if (res.status !== 200) {\r\n            throw new Error(\"Failed to fetch users\");\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            this.setState({ users: resData.users, loading: false})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {users, showUsersList, loading} = this.state;\r\n\r\n        let connectedUsers = ''\r\n        if(users){\r\n            connectedUsers = (\r\n                <div className=\"nav__top__connected\"\r\n                ref={el => this.target = el}>\r\n                    <div className=\"nav__top__connected__count\"\r\n                        onClick={this.showUsersListToggler}>\r\n                            <div className=\"nav__top__connected__count__icon\">\r\n                                <IconSvg icon=\"users\"/>\r\n                                <div className={`nav__top__connected__count__icon__status ${users.length > 0 ? 'green': 'red'}`}></div>\r\n                            </div>\r\n                            {users.length > 0 && (\r\n                                <span>{users.length}</span>\r\n                            )}\r\n                            \r\n                    </div>\r\n                    \r\n                    {users.length > 0 && (\r\n                        <ul className={`nav__top__connected__list ${showUsersList ? 'active': ''}`}>\r\n                            {\r\n                                users.map( (user, i) => (\r\n                                    <li className=\"nav__top__connected__list__item\"\r\n                                    key={i}>\r\n                                        <div className=\"nav__top__connected__list__item__avatar\">\r\n                                            {user.firstName.slice(0, 1)}{user.lastName.slice(0, 1)}\r\n                                        </div>\r\n                                        <div className=\"nav__top__connected__list__item__name\">\r\n                                            {user.firstName} {user.lastName}\r\n                                        </div>\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    )}\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"navtop\">\r\n\r\n                <div className=\"navtop__logo\">\r\n                    WOTO ADMIN\r\n                </div>\r\n\r\n                {this.props.auth && this.props.token && this.props.adminId && this.props.adminName && (\r\n                    <div className=\"navtop__cta\">\r\n                        {connectedUsers}\r\n                        <div className=\"navtop__cta__logout\"\r\n                            onClick={this.props.logoutHandler}>\r\n                        Logout\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        auth: state.auth.auth,\r\n        token: state.auth.auth,\r\n        adminId: state.auth.adminId,\r\n        adminName: state.auth.adminName, \r\n    }\r\n  }\r\n  \r\n\r\nexport default connect(mapStateToProps)(Navtop); \r\n","export const NAV_LINKS = [\r\n    {\r\n        path: 'stats',\r\n        text: 'Statistiques',\r\n        icon: 'stats'\r\n    },\r\n   \r\n    {\r\n        path: 'users',\r\n        text: 'Users',\r\n        icon: 'users'\r\n    },\r\n    {\r\n        path: 'publicity',\r\n        text: 'Publicité',\r\n        icon: 'pub'\r\n    },\r\n    {\r\n        path: 'ajouter',\r\n        text: 'Ajouter',\r\n        icon: 'pencil'\r\n    },\r\n    \r\n    \r\n    // {\r\n    //     path: 'commandes',\r\n    //     text: 'Commandes',\r\n    //     icon: 'command'\r\n    // },\r\n    \r\n    {\r\n        path: 'fournisseurs',\r\n        text: 'Fournisseurs',\r\n        icon: 'hand-shake'\r\n    }\r\n]","import React, { Component } from 'react'\r\nimport './Navbar.css';\r\nimport { NavLink} from 'react-router-dom';\r\nimport IconSvg from '../../../utilities/svg/svg';\r\nimport { NAV_LINKS } from './NavbarList';\r\nimport { connect } from 'react-redux';\r\nimport  * as actions from '../../../store/actions'\r\n\r\n\r\n\r\nclass Navbar extends Component {\r\n\r\n    componentDidMount(){\r\n        let url = \"http://localhost:8000/stats/notifications\";\r\n        let mehod = 'GET';\r\n\r\n        fetch(url, {\r\n            method: mehod,\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        })\r\n        .then( res => {\r\n            if(res.status !== 200 && res.status !== 201)\r\n            throw new Error('Failed to get notifications')\r\n            return res.json()\r\n        })\r\n        .then( resData => {\r\n            this.props.initNotifications(resData.notifData)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul className={`navbar__list ${this.props.showFullNavbar === true ? '': 'small'}`}>\r\n\r\n                    {\r\n                        this.props.showFullNavbar === true && (\r\n                            <IconSvg icon=\"chevrons-left\" customClass=\"navbar__list__toggle\"\r\n                            onClick={this.props.toggleShowFullNavbar}/>\r\n                        )\r\n                    }\r\n\r\n                    {\r\n                        this.props.showFullNavbar === false && (\r\n                            <IconSvg icon=\"chevrons-right\" customClass=\"navbar__list__toggle\"\r\n                            onClick={this.props.toggleShowFullNavbar}/>\r\n                        )\r\n                    }\r\n                    \r\n\r\n                    <NavLink to=\"/inventory\" className={`navbar__list__item \r\n                                            ${this.props.showFullNavbar === true ? '' : 'hide'}`} >\r\n                        <IconSvg icon=\"inventory\"/>\r\n                        <span className=\"navbar__list__item__text\">Inventaire</span>\r\n                    </NavLink>\r\n\r\n                    <NavLink to=\"/messages\"  className={`navbar__list__item \r\n                                            ${this.props.showFullNavbar === true ? '' : 'hide'}`} >\r\n                        <IconSvg icon=\"email\"/>\r\n                        <span className=\"navbar__list__item__text\">Messages</span>\r\n\r\n                       {\r\n                           this.props.notification.length > 0 && (\r\n                            <div className=\"navbar__list__item__notification\">\r\n                                <span>{this.props.notification.length}</span> \r\n                            </div>\r\n                           )\r\n                       }\r\n                        \r\n                    </NavLink> \r\n\r\n\r\n                    \r\n                    {\r\n                        NAV_LINKS.map( i => (\r\n                            <NavLink key={i.path} to={`/${i.path}`} className={`navbar__list__item \r\n                                        ${this.props.showFullNavbar === true ? '' : 'hide'}`} >\r\n                                <IconSvg icon={i.icon}/>\r\n                                <span className=\"navbar__list__item__text\">{i.text}</span>\r\n                            </NavLink>\r\n                        ))\r\n                    }\r\n\r\n                    {this.props.adminId === '5d94e344b01eb1509cc2539c' && (\r\n                        <NavLink to=\"/admin-manager\" className={`navbar__list__item \r\n                            ${this.props.showFullNavbar === true ? '' : 'hide'}`} >\r\n                            <IconSvg icon=\"inventory\"/>\r\n                            <span className=\"navbar__list__item__text\">Admin</span>\r\n                        </NavLink>\r\n                    )}\r\n\r\n                  \r\n\r\n                    \r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        showFullNavbar: state.nav.showFullNavbar,\r\n        notification: state.nav.notification,\r\n        adminId: state.auth.adminId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleShowFullNavbar: () => dispatch(actions.toggleShowFullNavbar()),\r\n        initNotifications: data => dispatch(actions.initNotifications(data))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n","import React, { Component } from 'react';\r\nimport './Chat.css';\r\nimport Input from '../formInput/FormInput';\r\n\r\n\r\n\r\n\r\n class Chat extends Component {\r\n\r\n\r\n    state = {\r\n        messages: [\r\n            {\r\n                from: 'Max',\r\n                type: 'user',\r\n                message: 'Bonjour',\r\n                date:  new Date()\r\n            },\r\n            {\r\n                from: 'Mario',\r\n                type: 'admin',\r\n                message: 'Salut Max',\r\n                date:  new Date()\r\n            },\r\n\r\n            {\r\n                from: 'Max',\r\n                type: 'user',\r\n                message: 'Ca va Mario',\r\n                date:  new Date()\r\n            },\r\n\r\n            {\r\n                from: 'Mario',\r\n                type: 'admin',\r\n                message: 'Oui super, je souhaiterai acheter une voiture, est ce que tu pouuras m aider',\r\n                date:  new Date()\r\n            },\r\n\r\n        ],\r\n\r\n        messageInput: '',\r\n\r\n        showChat: true\r\n    }\r\n\r\n    messageChangeHandler = (e) => {\r\n        this.setState({ messageInput: e.target.value})\r\n    }\r\n\r\n\r\n    handleKeyDown(e) {\r\n\r\n        e.target.style.height = 'inherit';\r\n        e.target.style.height = `${e.target.scrollHeight}px`; \r\n        // In case you have a limitation\r\n        // e.target.style.height = `${Math.min(e.target.scrollHeight, limit)}px`\r\n      }\r\n\r\n      keypress = e => {\r\n        if(e.key === 'Enter'){\r\n            e.preventDefault();\r\n            console.log('value', e.target.value);\r\n            this.setState({ messageInput: ''})\r\n        }\r\n      }\r\n\r\n      toggleShowChat = () => {\r\n          this.setState( prevState => ({\r\n              showChat: !prevState.showChat\r\n          }))\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <section className={`chat ${this.state.showChat ?'': 'hide'}`}>\r\n\r\n                <div className=\"chat__bar\"\r\n                    onClick={this.toggleShowChat}>\r\n                    Messages\r\n                </div>\r\n\r\n                <div className={`chat__body \r\n                                 ${this.state.showChat ? '' : 'hide'}`}> \r\n\r\n                       {\r\n                           this.state.messages.map( message => {\r\n\r\n                            if(message.type === 'user'){\r\n                                return (\r\n                                    <div className=\"user__message__container\">\r\n                                        <div></div>\r\n                                        <div className=\"chat__message chat__message--user\">\r\n                                            {message.message}\r\n                                        </div> \r\n                                    </div>\r\n\r\n                                     \r\n                                )\r\n                            }\r\n\r\n                            if(message.type === 'admin'){\r\n                                return (\r\n                                    <div>\r\n                                        <div className=\"chat__message chat__message--admin\">\r\n                                            {message.message}\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n\r\n                                )\r\n                            }\r\n                            \r\n                           })\r\n                       } \r\n\r\n\r\n                </div>\r\n\r\n                <div className={`chat__input \r\n                                ${this.state.showChat ? '' : 'hide'}`}>\r\n\r\n                    <textarea className=\"textarea\"\r\n                            value={this.state.messageInput}\r\n                            onChange={(e) => this.messageChangeHandler(e)}\r\n                            placeholder='message'\r\n                            onKeyDown={this.handleKeyDown}\r\n                            onKeyPress={this.keypress}\r\n                            />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat;\r\n","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\r\nimport Loader from './components/loader/Loader';\r\n\r\n/*-----------PAGES---------*/\r\nimport Inventory from './pages/inventory/Inventory';\r\nimport Publicity from './pages/publicity/Publicity';\r\nimport Stats from './pages/stats/Stats';\r\nimport Order from './pages/order/Order';\r\nimport Add from './pages/addProduct/AddProduct';\r\nimport SingleCar from './pages/car/Car';\r\nimport Auth from './pages/auth/Auth';\r\nimport Users from './pages/users/Users'\r\nimport Messages from './pages/messages/Messages';\r\nimport UserAccount from './pages/userAccount/userAccount';\r\nimport Suppliers from './pages/suppliers/Suppliers';\r\nimport AdminManager from './pages/adminManager/AdminManager'\r\n\r\n/*----COMPONENTS---------*/\r\nimport Navtop from './components/navigation/navtop/Navtop';\r\nimport Navbar from './components/navigation/navbar/Navbar';\r\nimport Chat from './components/chat/Chat';\r\nimport notification from './assets/eventually.mp3'\r\nimport ErrorHandler from './components/errorHandler/ErrorHandler';\r\n\r\n\r\nimport * as actions from './store/actions'\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    loading: true,\r\n    hideScrollBar: false,\r\n  }\r\n\r\n  showScrollBarHandler = () => {\r\n    this.setState({ hideScrollBar: false}, () => document.body.className = \"\")\r\n  }\r\n  hideScrollBarHandler = () => {\r\n    this.setState({ hideScrollBar: true}, () => document.body.className=\"hideScrollBar\")\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n      const token = localStorage.getItem('woto-admin-token');\r\n      const expiryDate = localStorage.getItem('woto-admin-expiryData');\r\n      const connectedAdminId = localStorage.getItem('woto-admin-adminId');\r\n      const connnectedAdminName = localStorage.getItem('woto-admin-adminName');\r\n\r\n      this.initializeDatasHandler()\r\n\r\n      if(!token || !expiryDate){\r\n        console.log('NO TOKEN');\r\n        return\r\n      }\r\n\r\n      if(new Date(expiryDate) <= new Date()){\r\n        console.log('Token not valid anymore')\r\n        return\r\n      }\r\n\r\n      this.props.setLoginStateToTrue(true, token, connectedAdminId, connnectedAdminName);\r\n\r\n  }\r\n\r\n  initializeDatasHandler = () => {\r\n    let url = 'https://africauto.herokuapp.com/init';  \r\n    fetch(url, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n    })\r\n    .then(res => {\r\n        if(res.status !== 200 && res.status !== 201){\r\n            throw new Error('Could not fetch suppliers')\r\n        }\r\n        return res.json()\r\n    })\r\n    .then(resData => {\r\n\r\n\r\n        let suppliers = resData.suppliers;\r\n        //We need to set the current view for the suppliers list page\r\n        suppliers.forEach(supplier => {\r\n            supplier.currentView = 'contacts'\r\n        })\r\n\r\n      this.props.setSuppliers(suppliers);\r\n       this.props.initAppData(resData)\r\n      this.setState({ loading: false})\r\n    })\r\n    .catch( err => {\r\n        console.log(err)\r\n    })\r\n  }\r\n\r\n  playNotificationSound = () => {\r\n    this.player.play();\r\n  }\r\n\r\n  logoutHandler = () => {\r\n    this.props.setLoginStateToFalse();\r\n    localStorage.removeItem('woto-admin-token');\r\n    localStorage.removeItem('woto-admin-expiryDate');\r\n    localStorage.removeItem('woto-admin-adminId');\r\n    localStorage.removeItem('woto-admin-adminName');\r\n    this.props.history.push('/')\r\n  }\r\n\r\n  render() {\r\n\r\n    const { hideScrollBar } = this.state\r\n    let app;\r\n\r\n    if(this.state.loading === true) {\r\n      app = <Loader fullView/>\r\n    } else {\r\n        \r\n      if(!this.props.token || !this.props.adminId || !this.props.auth || !this.props.adminName) {\r\n          app = (\r\n            <div className=\"fullScreen\">\r\n              <Auth />\r\n            </div>\r\n          )\r\n        } else {\r\n            app = (\r\n      \r\n              <Fragment>       \r\n                        <Navbar />  \r\n                        <audio src={notification} ref={ref => this.player = ref}  />\r\n                      {\r\n                        /*\r\n                            <Chat /> \r\n                        */\r\n                      }                \r\n                        <Switch>\r\n                            <Route exact path='/' component={Inventory}/>  \r\n                            <Route path='/inventory/:prodId'  render={(props) => <SingleCar {...props} hideScrollBar={hideScrollBar} showScrollBarHandler={this.showScrollBarHandler} hideScrollBarHandler={this.hideScrollBarHandler} /> }/>\r\n                            <Route path='/inventory' component={Inventory}/>\r\n                            <Route path='/ajouter' component={Add}/>\r\n                            <Route path='/publicity' component={Publicity}/>\r\n                            <Route path='/users/:userId' component={UserAccount}/>\r\n                            <Route path='/users' component={Users}/>\r\n                            <Route path='/stats' component={Stats}/>   \r\n                            <Route path='/fournisseurs' component={Suppliers}/>\r\n                            <Route path='/messages' render={(props) => <Messages {...props} playNotificationSound={this.playNotificationSound}/>}\r\n                            />     \r\n\r\n                            {this.props.adminId === '5d94e344b01eb1509cc2539c' && (\r\n                              <Route path='/admin-manager' component={AdminManager}/> \r\n                            )}\r\n                            \r\n\r\n\r\n\r\n                            <Redirect to=\"/\"/>                                                    \r\n                        </Switch>\r\n                        \r\n                </Fragment>\r\n          )\r\n        }\r\n    \r\n    \r\n      }\r\n    \r\n    return (\r\n            <div className={`app  ${this.props.showFullNavbar === true ? '' : 'full-app'}`}>\r\n                    <Navtop logoutHandler={this.logoutHandler} />\r\n                    {this.props.errors !== null && <ErrorHandler />}\r\n                    {app}\r\n            </div>\r\n      )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    showFullNavbar: state.nav.showFullNavbar,\r\n    loading: state.nav.loading,\r\n\r\n    auth: state.auth.auth,\r\n    token: state.auth.auth,\r\n    adminId: state.auth.adminId,\r\n    adminName: state.auth.adminName,\r\n    errors: state.error.errors\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setLoginStateToTrue: (isAuth, token, adminId, adminName) => dispatch(actions.setLoginStateToTrue(isAuth, token, adminId, adminName)),\r\n    setLoginStateToFalse: () => dispatch(actions.setLoginStateToFalse()),\r\n    initAppData: data => dispatch(actions.initAppData(data)),\r\n    setSuppliers: data => dispatch(actions.setSuppliers(data)),\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const updatedObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n}","import * as actionTypes from '../actions/actionsTypes';\r\nimport {updatedObject } from '../utility';\r\n\r\n\r\nconst initialState = {\r\n    productRequested: {},\r\n    productRequestedId: '',\r\n    editingMode: false,\r\n    products: [],\r\n    brandAndModelsData: null,\r\n    price: null,\r\n    bodyTypeList: null,\r\n    totalProducts: null,\r\n    itemsPerPage: 20,\r\n    currentInventoryPage: 1,\r\n}\r\n\r\nconst initAppData = (state, action) => {\r\n    return updatedObject( state, {\r\n        brandAndModelsData: action.data.brandAndModelsData,\r\n        price: action.data.price,\r\n        bodyTypeList: action.data.bodyTypeList,\r\n        totalProducts: action.data.totalProducts\r\n    })\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.INIT_APP_DATA: return initAppData(state, action);\r\n        case actionTypes.SET_REQUESTED_PRODUCT : return updatedObject(state, {productRequested: action.product});\r\n        case actionTypes.SET_REQUESTED_PRODUCT_ID: return updatedObject(state, {productRequestedId: action.id});\r\n        case actionTypes.TOGGLE_EDITING_MODE: return updatedObject(state, {editingMode: !state.editingMode});\r\n        case actionTypes.SET_PRODUCTS: return updatedObject(state, {products: action.products});     \r\n        case actionTypes.ADD_TOTAL_PRODUCTS: return updatedObject(state, {totalProducts: state.totalProducts + 1});\r\n        case actionTypes.SET_INVENTORY_CURRENT_PAGE: return updatedObject(state, {currentInventoryPage: action.page})\r\n\r\n    \r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionsTypes';\r\nimport {updatedObject } from '../utility';\r\n\r\nconst initialState = {\r\n    showFullNavbar: false,\r\n    notification: []\r\n}\r\n\r\n\r\nconst addANotification = (state, action) => {\r\n    let notificationUpdated;\r\n    if(state.notification.includes(action.userId)){\r\n        return state\r\n    } else {\r\n        notificationUpdated = [...state.notification, action.userId ];\r\n        return updatedObject( state, {notification: notificationUpdated})\r\n    }\r\n}\r\n\r\nconst substractANotification = (state, action) => {\r\n    let notificationUpdated = state.notification.filter( i => i !== action.userId ); \r\n    return updatedObject( state, {notification: notificationUpdated})\r\n\r\n\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.TOGGLE_SHOW_FULL_NAVBAR : return updatedObject(state, {showFullNavbar: !state.showFullNavbar} );\r\n        case actionTypes.INIT_NOTIFICATIONS: return updatedObject(state, {notification: action.notifData});\r\n        case actionTypes.ADD_A_NOTIFICATION: return addANotification(state, action);   \r\n        case actionTypes.SUBSTRACT_A_NOTIFICATION: return substractANotification(state, action);\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionsTypes';\r\nimport { updatedObject} from '../utility';\r\n\r\n\r\nconst initialState = {\r\n    auth: false,\r\n    token: null,\r\n    adminId: null,\r\n    adminName: null\r\n}\r\n\r\n\r\nconst loginSucced = (state, action) => {\r\n    return updatedObject( state, {\r\n        auth: true,\r\n        token: action.token,\r\n        adminId: action.adminId,\r\n        adminName: action.adminName\r\n    })\r\n}\r\n\r\nconst setLoginStateToTrue = (state, action) => {\r\n    return updatedObject(state, {\r\n        auth: action.isAuth,\r\n        token: action.token,\r\n        adminId: action.adminId,\r\n        adminName: action.adminName\r\n    })\r\n}\r\n\r\nconst setLoginStateToFalse = state => {\r\n    return updatedObject(state, {\r\n        auth: false,\r\n        token: null,\r\n        adminId:  null,\r\n        adminName: null\r\n    })\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case actionTypes.LOGIN_SUCCEDED: return loginSucced(state, action);\r\n        case actionTypes.LOGIN_FAILED: return state;\r\n        case actionTypes.SET_LOGIN_STATE_TO_TRUE: return setLoginStateToTrue(state, action);\r\n        case actionTypes.SET_LOGIN_STATE_TO_FALSE: return setLoginStateToFalse(state);\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionsTypes';\r\nimport {updatedObject} from '../utility';\r\n\r\n\r\nconst initialState = {\r\n    suppliers: null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case actionTypes.SET_SUPPLIERS: return updatedObject(state, {suppliers: action.suppliers })\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionsTypes';\r\nimport { updatedObject } from '../utility';\r\n\r\n\r\nconst initialState = {\r\n    errors: null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n\r\n        case actionTypes.SET_ERROR: return updatedObject(state, {errors: action.data})\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionsTypes';\r\nimport {updatedObject } from '../utility';\r\n\r\n\r\nconst initialState = {\r\n    INIT_pubProducts: null,\r\n    INIT_homePageProducts: null,\r\n\r\n    currentPubProducts: null,\r\n    currentHomePageProducts: null,\r\n\r\n    selectedPubProducts: [],\r\n    selectedHomePageProducts: [],\r\n\r\n    newPubProducts: [],\r\n    newHomePageProducts: [],\r\n\r\n    showSelector: false,\r\n    selectorTitle: null,\r\n    editingMode: [],\r\n\r\n    selectorSelectedProductsIds: [],\r\n    selectorSelectedProductsDetails: []\r\n}\r\n\r\n\r\nconst setPublicityData = (state, action) => {\r\n    return updatedObject(state, {\r\n        INIT_pubProducts: action.pubProducts,\r\n        INIT_homePageProducts: action.homePageProducts,\r\n        currentPubProducts: action.pubProducts,\r\n        currentHomePageProducts: action.homePageProducts,\r\n\r\n    })\r\n}\r\n\r\nconst cancelPublicityEditingMode = (state, action) => {\r\n    if(action.section === 'publicity'){\r\n        return updatedObject(state, {\r\n            currentPubProducts: state.INIT_pubProducts,\r\n            selectedPubProducts: [],\r\n            editingMode: state.editingMode.filter(mode => mode !== action.section),\r\n            selectorSelectedProductsIds: [],\r\n            selectorSelectedProductsDetails: [],\r\n            newPubProducts: []\r\n        })\r\n    }\r\n\r\n    if(action.section === 'home page'){\r\n        return updatedObject(state, {\r\n            currentHomePageProducts: state.INIT_homePageProducts,\r\n            selectedHomePageProducts: [],\r\n            editingMode: state.editingMode.filter(mode => mode !== action.section),\r\n            selectorSelectedProductsIds: [],\r\n            selectorSelectedProductsDetails: [],\r\n            newHomePageProducts: []\r\n        })\r\n    }\r\n}\r\n\r\nconst togglePublicitySelector = (state, action) => {\r\n    let requestedSection = null;\r\n\r\n    /* SELECTOR CLOSED */\r\n    if(!state.showSelector){\r\n        requestedSection = action.section\r\n    }\r\n\r\n    return updatedObject(state, {\r\n        showSelector: !state.showSelector,\r\n        selectorTitle: requestedSection\r\n    })\r\n}\r\n\r\nconst setPublicitySelectorSelectedProducts = (state, action) => {\r\n    return updatedObject(state, {\r\n        selectorSelectedProductsIds: action.productsIds,\r\n        selectorSelectedProductsDetails: action.productsDetails\r\n\r\n    })\r\n}\r\n\r\nconst addPublicityPubProducts = (state, action) => {\r\n    return updatedObject(state, {\r\n        newPubProducts: action.data,\r\n        selectorSelectedProductsIds: [],\r\n        selectorSelectedProductsDetails: []\r\n    })\r\n}\r\n\r\nconst addPublicityHomePageProducts = (state, action) => {\r\n    return updatedObject(state, {\r\n        newHomePageProducts: action.data,\r\n        selectorSelectedProductsIds: [],\r\n        selectorSelectedProductsDetails: []\r\n    })\r\n}\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.SET_PUBLICITY_DATA: return setPublicityData(state, action);\r\n        case actionTypes.SET_PUBLICITY_EDITING_MODE: return updatedObject(state, {editingMode: action.editingMode});\r\n        case actionTypes.SET_PUBLICITY_SELECTED_PUB_PRODUCTS: return updatedObject(state, {selectedPubProducts: action.data});\r\n        case actionTypes.SET_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS: return updatedObject(state, {selectedHomePageProducts: action.data});\r\n        case actionTypes.CANCEL_PUBLICITY_EDITING_MODE: return cancelPublicityEditingMode(state, action);\r\n        case actionTypes.DELETE_PUBLICITY_SELECTED_PUB_PRODUCTS: return updatedObject(state, {currentPubProducts: action.data});\r\n        case actionTypes.DELETE_PUBLICITY_SELECTED_HOMEPAGE_PRODUCTS: return updatedObject(state, {currentHomePageProducts: action.data});\r\n        case actionTypes.TOGGLE_PUBLICITY_SELECTOR: return togglePublicitySelector(state, action);\r\n        case actionTypes.SET_PUBLICITY_SELECTOR_SELECTED_PRODUCTS: return  setPublicitySelectorSelectedProducts(state, action)\r\n        case actionTypes.ADD_PUBLICITY_PUB_PRODUCTS: return addPublicityPubProducts(state, action);\r\n        case actionTypes.ADD__PUBLICITY__HOMEPAGE__PRODUCTS: return addPublicityHomePageProducts(state, action);\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer; ","import * as actionTypes from '../actions/actionsTypes';\r\nimport { updatedObject} from '../utility';\r\n\r\nconst initialState = {\r\n    lang: 'english',\r\n    currency: 'CAD',\r\n    quotes: {\r\n\r\n        USDCAD : 1.32357,\r\n        USDEUR : 0.92693,\r\n\r\n        // USDCAD : 1.32,\r\n        // USDEUR : 0.92,\r\n        \r\n        EURUSD: 1.0788,  // 1 EUR = 1.07 USD\r\n        EURCAD: 1.4289,\r\n\r\n        CADUSD: 0.7555,\r\n        CADEUR: 0.6998,\r\n\r\n\r\n        \r\n\r\n\r\n      \r\n        \r\n    }\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case actionTypes.SET_LANG : return updatedObject(state, { lang: action.lang});\r\n        case actionTypes.SET_CURRENCY : return updatedObject(state, { currency: action.currency});\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore , applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport productsReducer from './store/reducers/products';\r\nimport navReducer from './store/reducers/nav';\r\nimport authReducer from './store/reducers/auth';\r\nimport suppliersReducer from './store/reducers/suppliers';\r\nimport errorReducer from './store/reducers/error';\r\nimport publicityReducer from './store/reducers/publicity';\r\nimport parametersReducer from './store/reducers/parameters';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; \r\n\r\nconst rootReducer = combineReducers({\r\n    products: productsReducer,\r\n    nav: navReducer,\r\n    auth: authReducer,\r\n    suppliers: suppliersReducer,\r\n    error: errorReducer,\r\n    publicity: publicityReducer,\r\n    parameters: parametersReducer\r\n})\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n)\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>\r\n    \r\n, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}